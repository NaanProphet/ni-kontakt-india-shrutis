{***********************************************
India - Melodic Main
Author: Native Instruments
Written by: Nikolas Jeroma
Modified: April 18, 2016
Hacked by: Krishna Bhamidipati
Last hack: January 18, 2021
*************************************************}

on init
	

{ function constants }
	
	{GENERAL}
	message("")
	declare $count
	make_perfview
	set_ui_height_px(482)
	declare $init_flag := 1
	
	declare const $HIDE_AUTOMATION_SLIDERS := 1 {must be set to 1}
	declare const $SHOW_EXPORT_BUTTON := 0 {must be set to 0}
	
	{snapshot}
	declare $instr_loaded := 1 {1 if init callback has been loaded, 0 otherwise}
	set_snapshot_type(1)
	
	SET_CONDITION(NO_SYS_SCRIPT_PEDAL)
	
	declare const $KNOB_ADJUSTMENT_TOLERANCE := 20 * 1000
	
	
	declare const $MAX_SWING_AMOUNT := 50 {in percent of one step}
	declare const $MAX_INST_TYPES_PER_MENU := 10 {the maximum number of instrument types per player, i.e. the max number to appear in the menu}
	declare const $NUM_OF_SCALES := 12 {first is always chromatic}
	
	{FONTS}
	declare const $FONT_TYPE_SOUND_MENU := 14
	declare const $FONT_TYPE_PATTERN_NAME := 18
	declare const $FONT_TYPE_PATTERN_NUMBER := 14
	
	{KEY COLORS}
	declare const $ROOT_NOTE_COLOR := $KEY_COLOR_CYAN
	declare const $SCALE_NOTE_COLOR := $KEY_COLOR_TURQUOISE
	
	{MIX PRESETS}
	declare const $NUM_OF_FACTORY_MIXPRESETS := 8 {the number of hard-coded factory presets}
	
	{mixer preset factory names}
	declare !factory_mix_preset_names[$NUM_OF_FACTORY_MIXPRESETS]
	!factory_mix_preset_names[0] := "Classic"
	!factory_mix_preset_names[1] := "Modern"
	!factory_mix_preset_names[2] := "Vintage"
	!factory_mix_preset_names[3] := "Mono"
	!factory_mix_preset_names[4] := "Ambient"
	!factory_mix_preset_names[5] := "Hyped"
	!factory_mix_preset_names[6] := "Relaxed"
	!factory_mix_preset_names[7] := "Init"
	
	{SPECIAL MIDI CCs}
	declare const $MIDI_CC_1 := 20
	declare const $MIDI_CC_2 := 21
	
	{ORNAMENTS}
	declare const $ORNA_DURATION_MAX := 20 {in ms}
	declare const $ORNA_DURATION_MIN := 100
	
	{SITAR}
	declare const $CHIKARI_COLOR := $KEY_COLOR_PURPLE
	
	{HARMONIUM}
	declare const $COUPLER_CC := 20
	
	{BROWSER}
	declare @libary_path
	@libary_path := get_folder($GET_FOLDER_LIBRARY_DIR)
	
	declare @browser_basepath
	
	@browser_basepath := @libary_path & "Library Data/Scales/"
	
	declare @browser_filepath
	make_persistent(@browser_filepath)
	
	declare @browser_filename {the name displayed in the browser, without file extension}
	make_persistent(@browser_filename)
	
	{ROLLS}
	declare $ROLL_FIRST_NOTE := 48 {C2}
	declare $ROLL_LAST_NOTE := 59 {B2}
	
	declare const $ROLL_RND_PERCENT := 3
	
	declare const $ROLL_VELO_ADD_MAX := 30
	declare const $ROLL_VELO_SUB_MAX := -60
	
	{SEQUENCER}
	declare const $MAX_NUM_OF_TRACKS := 6
	declare $NUM_OF_TRACKS
	
	declare const $MAX_RANDOMIZE_TIME_ABS := 30 * 1000 {in microseconds, scaled by knob 1 (feel)}
	
	declare const $MAX_RANDOMIZE_VELO := 30 {scaled by knob 1 (feel)}
	
	declare const $NUM_OF_BEATS_IN_BAR := 4 {i.e. 4 = 4/4 bar}
	declare const $TICKS_PER_BEAT := 12
	
	declare const $NUM_NOTE_PAR := 3 {the number of note parameters in play buffer}
	
	declare const $MAX_NUM_OF_STEPS_PAGE := 16 {don't change, must be 16}
	declare const $MAX_NUM_OF_BARS := 4 {don't change, must be 4}
	declare const $MAX_NUM_OF_STEPS := $MAX_NUM_OF_STEPS_PAGE * $MAX_NUM_OF_BARS
	declare const $MAX_NUM_OF_NOTES := 5
	
	declare const $DEFAULT_BEAT_GRID := 4
	
	declare const $PATTERN_KEY_MIN := 36
	declare const $PATTERN_KEY_MAX := 47
	{min and max keys set in instrument identifier below}
	
	
	declare const $ACCENT_VELO := 30
	declare const $ACCENT_VOL := 5 * 1000 {in dB}
	
	declare const $MAX_NUM_OF_ARTICULATIONS := 7 {the max number of articulations} 
	
	declare const $NUM_OF_NOTES_TANPURA := 4
	
	{note names}
	declare !note_names_chromatic[12]
	!note_names_chromatic[0] := "C"
	!note_names_chromatic[1] := "C#"
	!note_names_chromatic[2] := "D"
	!note_names_chromatic[3] := "D#"
	!note_names_chromatic[4] := "E"
	!note_names_chromatic[5] := "F"
	!note_names_chromatic[6] := "F#"
	!note_names_chromatic[7] := "G"
	!note_names_chromatic[8] := "G#"
	!note_names_chromatic[9] := "A"
	!note_names_chromatic[10] := "A#"
	!note_names_chromatic[11] := "B"
	
	{standard note names}
	declare !note_names_standard[12]
	!note_names_standard[0] := "C"
	!note_names_standard[1] := "C#"
	!note_names_standard[2] := "D"
	!note_names_standard[3] := "Eb"
	!note_names_standard[4] := "E"
	!note_names_standard[5] := "F"
	!note_names_standard[6] := "F#"
	!note_names_standard[7] := "G"
	!note_names_standard[8] := "Ab"
	!note_names_standard[9] := "A"
	!note_names_standard[10] := "Bb"
	!note_names_standard[11] := "B"
	
	{standard note names for fifth degree}
	declare !note_names_fifth[12]
	!note_names_fifth[0] := "G"
	!note_names_fifth[1] := "G#"
	!note_names_fifth[2] := "A"
	!note_names_fifth[3] := "Bb"
	!note_names_fifth[4] := "B"
	!note_names_fifth[5] := "C"
	!note_names_fifth[6] := "C#"
	!note_names_fifth[7] := "D"
	!note_names_fifth[8] := "Eb"
	!note_names_fifth[9] := "E"
	!note_names_fifth[10] := "F"
	!note_names_fifth[11] := "F#"
	
	declare !scale_label_names[12]
	!scale_label_names[0] := "Scale 1 (C1)"
	!scale_label_names[1] := "Scale 2 (C#1)"
	!scale_label_names[2] := "Scale 3 (D1)"
	!scale_label_names[3] := "Scale 4 (Eb1)"
	!scale_label_names[4] := "Scale 5 (E1)"
	!scale_label_names[5] := "Scale 6 (F1)"
	!scale_label_names[6] := "Scale 7 (F#1)"
	!scale_label_names[7] := "Scale 8 (G1)"
	!scale_label_names[8] := "Scale 9 (Ab1)"
	!scale_label_names[9] := "Scale 10 (A1)"
	!scale_label_names[10] := "Scale 11 (Bb1)"
	!scale_label_names[11] := "Scale 12 (B1)"
	
	{key mode names}
	declare !mapping_names[3]
	!mapping_names[0] := "Guide"
	!mapping_names[1] := "Mapped"
	!mapping_names[2] := "Easy"
	
	declare !ornament_names[3]
	!ornament_names[0] := "Off"
	!ornament_names[1] := "On"
	
{function } {}
	
{ function instrument_dentifier}
	
	{copy also to mixer script}
	
	declare const $MAX_NUM_OF_PROTOTYPES := 6 {CAUTION}
	
	declare $INSTRUMENT_ID
	make_instr_persistent($INSTRUMENT_ID)
	read_persistent_var($INSTRUMENT_ID)
	
	declare const $BANSURI_ID := 0
	declare const $HARMONIUM_ID := 1
	declare const $SANTUR_ID := 2
	declare const $SITAR_ID := 3
	declare const $TANPURA_ID := 4
	declare const $TUMBI_ID := 5
	
	$NUM_OF_TRACKS := 3
	
	{name and number of tracks}
	select ($INSTRUMENT_ID)
	
		case $BANSURI_ID
			set_script_title("Bansuri")
			set_control_par_str($INST_WALLPAPER_ID,$CONTROL_PAR_PICTURE,"MEL-Wallpaper-Bansuri")
		case $HARMONIUM_ID
			set_script_title("Harmonium")
			set_control_par_str($INST_WALLPAPER_ID,$CONTROL_PAR_PICTURE,"MEL-Wallpaper-Harmonium")
		case $SANTUR_ID
			set_script_title("Santur")
			set_control_par_str($INST_WALLPAPER_ID,$CONTROL_PAR_PICTURE,"MEL-Wallpaper-Santoor")
		case $SITAR_ID
			set_script_title("Sitar")
			set_control_par_str($INST_WALLPAPER_ID,$CONTROL_PAR_PICTURE,"MEL-Wallpaper-Sitar")
		case $TANPURA_ID
			set_script_title("Tanpura")
			set_control_par_str($INST_WALLPAPER_ID,$CONTROL_PAR_PICTURE,"MEL-Wallpaper-Tanpura")
		case $TUMBI_ID
			set_script_title("Tumbi")
			set_control_par_str($INST_WALLPAPER_ID,$CONTROL_PAR_PICTURE,"MEL-Wallpaper-Tumbi")
	end select
	

	
	declare $PLAY_RANGE_MIN
	declare $PLAY_RANGE_MAX
	
	declare $MAPPED_RANGE_MIN
	declare $MAPPED_RANGE_MAX
	
	{play and mapping ranges}
	select ($INSTRUMENT_ID)
		
			case $BANSURI_ID
				
				$PLAY_RANGE_MIN := 48 {C2}
				$PLAY_RANGE_MAX := 96 {C6}
	
				$MAPPED_RANGE_MIN := 56 {Ab2}
				$MAPPED_RANGE_MAX := 91 {G5}
				
			case $HARMONIUM_ID
				
				$PLAY_RANGE_MIN := 48 {C2}
				$PLAY_RANGE_MAX := 96 {C6}
	
				$MAPPED_RANGE_MIN := 48 {C2}
				$MAPPED_RANGE_MAX := 86 {D5}
				
			case $SANTUR_ID
				
				$PLAY_RANGE_MIN := 48 {C2}
				$PLAY_RANGE_MAX := 96 {C6}
	
				$MAPPED_RANGE_MIN := 48 {C2}
				$MAPPED_RANGE_MAX := 79 {G4}
				
			case $SITAR_ID
				
				$PLAY_RANGE_MIN := 48 {C2}
				$PLAY_RANGE_MAX := 96 {C6}
	
				$MAPPED_RANGE_MIN := 48 {C2}
				$MAPPED_RANGE_MAX := 79 {G4}
				
			case $TANPURA_ID
				
				$PLAY_RANGE_MIN := 48 {C2}
				$PLAY_RANGE_MAX := 96 {C6}
	
				$MAPPED_RANGE_MIN := 48 {C2}
				$MAPPED_RANGE_MAX := 84 {C5}
				
			case $TUMBI_ID
				
				$PLAY_RANGE_MIN := 48 {C2}
				$PLAY_RANGE_MAX := 96 {C6}
	
				$MAPPED_RANGE_MIN := 63 {Eb3}
				$MAPPED_RANGE_MAX := 80 {Ab4}
				
		end select
	
{function } {}

{ function gui_data }
	
	declare !key_switch_white_names[7]
	!key_switch_white_names[0] := "No Ornam."
	!key_switch_white_names[1] := "Short Up"
	!key_switch_white_names[2] := "Short Dn"
	!key_switch_white_names[3] := "Long Up"
	!key_switch_white_names[4] := "Long Dn"
	!key_switch_white_names[6] := "Up-Down"
	
	if ($INSTRUMENT_ID = $SITAR_ID)
		!key_switch_white_names[5] := "Fast Dn"
	else
		!key_switch_white_names[5] := "Turn"
	end if
	
	
	declare !key_switch_black_names[5]
	
	select ($INSTRUMENT_ID)
		case $BANSURI_ID
			!key_switch_black_names[0] := "Fade Out"
			!key_switch_black_names[1] := "Add Intensity"
			!key_switch_black_names[2] := "Vibrato"
			!key_switch_black_names[3] := "Bend Down"
			!key_switch_black_names[4] := "Bend Up"
		case $HARMONIUM_ID
			!key_switch_black_names[0] := "Pump"
			!key_switch_black_names[1] := "Release"
			!key_switch_black_names[2] := "Root"
			!key_switch_black_names[3] := "4th"
			!key_switch_black_names[4] := "5th"
		case $SANTUR_ID
			!key_switch_black_names[0] := "Roll"
			!key_switch_black_names[1] := "Damp"
			!key_switch_black_names[2] := "Root "
			!key_switch_black_names[3] := "5th"
			!key_switch_black_names[4] := "8ve"
		case $SITAR_ID
			!key_switch_black_names[0] := "8ve"
			!key_switch_black_names[1] := "Root"
			!key_switch_black_names[2] := "5th"
			!key_switch_black_names[3] := "Root Low"
			!key_switch_black_names[4] := "5th Low"
		case $TANPURA_ID
			!key_switch_black_names[0] := "Damp"
			!key_switch_black_names[1] := "5th"
			!key_switch_black_names[2] := "8ve 1"
			!key_switch_black_names[3] := "8ve 2"
			!key_switch_black_names[4] := "Root"
		case $TUMBI_ID
			!key_switch_black_names[0] := "Pattern 1"
			!key_switch_black_names[1] := "Pattern 2"
			!key_switch_black_names[2] := "Pattern 3"
			!key_switch_black_names[3] := "Pattern 4"
			!key_switch_black_names[4] := "Pattern 5"
			
	end select
	
	
	declare !accidental_names[3]
	!accidental_names[0] := ""
	!accidental_names[1] := "#"
	!accidental_names[2] := "b"
	
	declare %root_note_accidental[12] := (0,1,0,2,0,0,1,0,2,0,2,0)
	declare %fifth_accidental[12] := (0,1,0,2,0,0,1,0,2,0,0,1)
	
	declare %second_note_accidental[12*3] := (...
	{C}		2,0,1,...
	{C#}	0,1,0,...
	{D}		2,0,0,...
	{Eb}	0,0,1,...
	{E}		0,1,0,...
	{F}		2,0,1,...
	{F#}	0,1,0,...
	{G}		2,0,1,...
	{Ab}	0,2,0,...
	{A}		2,0,0,...
	{Bb}	0,0,1,...
	{B}		0,1,0)
	
	declare %third_note_accidental[12*3] := (...
	{C}		0,2,0,...
	{C#}	2,0,0,...
	{D}		0,0,1,...
	{Eb}	0,2,0,...
	{E}		2,0,1,...
	{F}		0,2,0,...
	{F#}	2,0,1,...
	{G}		0,2,0,...
	{Ab}	2,0,0,...
	{A}		0,0,1,...
	{Bb}	0,2,0,...
	{B}		2,0,1)
	
	declare %fourth_note_accidental[12*2] := (...
	{C}		0,1,...
	{C#}	1,0,...
	{D}		0,1,...
	{Eb}	2,0,...
	{E}		0,1,...
	{F}		2,0,...
	{F#}	0,0,...
	{G}		0,1,...
	{Ab}	2,0,...
	{A}		0,1,...
	{Bb}	2,0,...
	{B}		0,0)
	
	declare %sixth_note_accidental[12*3] := (...
	{C}		2,0,1,...
	{C#}	0,1,0,...
	{D}		2,0,0,...
	{Eb}	0,0,1,...
	{E}		0,1,0,...
	{F}		2,0,1,...
	{F#}	0,1,0,...
	{G}		2,0,0,...
	{Ab}	0,0,1,...
	{A}		0,1,0,...
	{Bb}	2,0,1,...
	{B}		0,1,0)
	
	declare %seventh_note_accidental[12*3] := (...
	{C}		0,2,0,...
	{C#}	2,0,0,...
	{D}		0,0,1,...
	{Eb}	0,2,0,...
	{E}		2,0,1,...
	{F}		0,2,0,...
	{F#}	2,0,0,...
	{G}		0,0,1,...
	{Ab}	0,2,0,...
	{A}		2,0,1,...
	{Bb}	0,2,0,...
	{B}		2,0,1)
	
	declare !note_names_simple[7]
	!note_names_simple[0] := "C"
	!note_names_simple[1] := "D"
	!note_names_simple[2] := "E"
	!note_names_simple[3] := "F"
	!note_names_simple[4] := "G"
	!note_names_simple[5] := "A"
	!note_names_simple[6] := "B"
	
{function } {}

{ function gui_main_page }
	
	{about screen}
	declare ui_button $about_btn
	set_text($about_btn,"")
	set_control_par(get_ui_id($about_btn),$CONTROL_PAR_HEIGHT,52)
	set_control_par(get_ui_id($about_btn),$CONTROL_PAR_WIDTH,139)
	set_control_par_str(get_ui_id($about_btn),$CONTROL_PAR_PICTURE,"ENS-Logo-Btn")
	move_control_px($about_btn,248,7)
	
	declare ui_label $about_lbl (1,3)
	set_control_par(get_ui_id($about_lbl),$CONTROL_PAR_TEXTPOS_Y,60)
	set_control_par(get_ui_id($about_lbl),$CONTROL_PAR_HEIGHT,211)
	set_control_par(get_ui_id($about_lbl),$CONTROL_PAR_WIDTH,311)
	set_control_par_str(get_ui_id($about_lbl),$CONTROL_PAR_PICTURE,"ENS-About")
	move_control_px($about_lbl,160,122)
	
	set_text($about_lbl,     "    Version: 1.1.0")
	add_text_line($about_lbl,"")
	add_text_line($about_lbl,"    Product Design and Concept: Nikolas Jeroma")
	add_text_line($about_lbl,"    User Interface Design: Simon Martin, Efflam Le Bivic, Fabian Ruf")
	add_text_line($about_lbl,"    KSP and Kontakt Programming: Nikolas Jeroma")
	add_text_line($about_lbl,"    MIDI Grooves: Ricky Kej, Timo Preece, Thomas Seher, Akash Dey")
	add_text_line($about_lbl,"    Sound Design: Sebastian Mueller, Tommaso de Donatis")
	add_text_line($about_lbl,"    Sample Editing: Antonio de Spirt, Carlos Ruiz")
	add_text_line($about_lbl,"    Sample Recording: Native Instruments")
	
	
	declare ui_button $about_close_btn
	set_text($about_close_btn,"")
	set_control_par(get_ui_id($about_close_btn),$CONTROL_PAR_HEIGHT,21)
	set_control_par(get_ui_id($about_close_btn),$CONTROL_PAR_WIDTH,21)
	set_control_par_str(get_ui_id($about_close_btn),$CONTROL_PAR_PICTURE,"ENS-Help-Close-Btn")
	move_control_px($about_close_btn,444,137)
	
	{mod wheel slider}
	declare ui_slider $perf_0_sld (0,127)
	make_persistent($perf_0_sld)
	set_control_par(get_ui_id($perf_0_sld),$CONTROL_PAR_VALUE,0)
	set_control_par(get_ui_id($perf_0_sld),$CONTROL_PAR_DEFAULT_VALUE,64)
	set_control_par(get_ui_id($perf_0_sld),$CONTROL_PAR_MOUSE_BEHAVIOUR,1000)
	set_control_par_str(get_ui_id($perf_0_sld),$CONTROL_PAR_PICTURE,"MEL-ModWheel-Slider")
	set_control_par(get_ui_id($perf_0_sld),$CONTROL_PAR_ALLOW_AUTOMATION,0)
	move_control_px($perf_0_sld,18,34)
	
	{root note}
	declare ui_slider $root_note_sld (0,11)
	set_control_par(get_ui_id($root_note_sld), $CONTROL_PAR_DEFAULT_VALUE,0)
	set_control_par(get_ui_id($root_note_sld),$CONTROL_PAR_MOUSE_BEHAVIOUR,-500)
	set_control_par_str(get_ui_id($root_note_sld),$CONTROL_PAR_AUTOMATION_NAME,"Root")
	set_control_par_str(get_ui_id($root_note_sld),$CONTROL_PAR_PICTURE,"MEL-RootNote-Value")
	make_persistent($root_note_sld)
	move_control_px($root_note_sld,250,424)
	
	declare ui_button $root_up_btn
	set_text($root_up_btn,"")
	set_control_par(get_ui_id($root_up_btn),$CONTROL_PAR_HEIGHT,14)
	set_control_par(get_ui_id($root_up_btn),$CONTROL_PAR_WIDTH,22)
	set_control_par_str(get_ui_id($root_up_btn),$CONTROL_PAR_PICTURE,"MEL-Root-Up-Btn")
	move_control_px($root_up_btn,277,421)
	
	declare ui_button $root_down_btn
	set_text($root_down_btn,"")
	set_control_par(get_ui_id($root_down_btn),$CONTROL_PAR_HEIGHT,14)
	set_control_par(get_ui_id($root_down_btn),$CONTROL_PAR_WIDTH,22)
	set_control_par_str(get_ui_id($root_down_btn),$CONTROL_PAR_PICTURE,"MEL-Root-Down-Btn")
	move_control_px($root_down_btn,277,430)
	
	{scale}
	declare ui_slider $scale_sld (0,11)
	set_control_par_str(get_ui_id($scale_sld),$CONTROL_PAR_AUTOMATION_NAME,"Scale")
	make_persistent($scale_sld)
	move_control($scale_sld,1,4)
	
	{key mode menu}
	declare ui_menu $key_mode_menu
	add_menu_item($key_mode_menu,!mapping_names[0],0)
	add_menu_item($key_mode_menu,!mapping_names[1],1)
	add_menu_item($key_mode_menu,!mapping_names[2],2)
	set_control_par(get_ui_id($key_mode_menu),$CONTROL_PAR_WIDTH,86)
	set_control_par(get_ui_id($key_mode_menu),$CONTROL_PAR_HEIGHT,28)
	set_control_par(get_ui_id($key_mode_menu),$CONTROL_PAR_FONT_TYPE,$FONT_TYPE_SOUND_MENU)
	set_control_par(get_ui_id($key_mode_menu),$CONTROL_PAR_TEXTPOS_Y,7)
	set_control_par_str(get_ui_id($key_mode_menu),$CONTROL_PAR_PICTURE,"cuba_soundmenu_transparent")
	make_persistent($key_mode_menu)
	move_control_px($key_mode_menu,447,428)
	
	declare ui_slider $key_mode_menu_sld (0,2)
	set_control_par_str(get_ui_id($key_mode_menu_sld),$CONTROL_PAR_AUTOMATION_NAME,"Key Mode")
	
	make_persistent($key_mode_menu_sld)
	move_control($key_mode_menu_sld,2,4)
	

	declare ui_label $key_mode_arrow_lbl (1,1)
	set_text($key_mode_arrow_lbl,"")
	set_control_par_str(get_ui_id($key_mode_arrow_lbl),$CONTROL_PAR_PICTURE,"MEL-Keymode-Dropdown-Btn")
	set_control_par(get_ui_id($key_mode_arrow_lbl),$CONTROL_PAR_WIDTH,26)
	set_control_par(get_ui_id($key_mode_arrow_lbl),$CONTROL_PAR_HEIGHT,23)
	move_control_px($key_mode_arrow_lbl,504,430)
	
	{ornament menu}
	declare ui_menu $main_ornament_menu
	add_menu_item($main_ornament_menu,!ornament_names[0],0)
	add_menu_item($main_ornament_menu,!ornament_names[1],1)
	set_control_par(get_ui_id($main_ornament_menu),$CONTROL_PAR_WIDTH,68)
	set_control_par(get_ui_id($main_ornament_menu),$CONTROL_PAR_HEIGHT,28)
	set_control_par(get_ui_id($main_ornament_menu),$CONTROL_PAR_FONT_TYPE,$FONT_TYPE_SOUND_MENU)
	set_control_par(get_ui_id($main_ornament_menu),$CONTROL_PAR_TEXTPOS_Y,7)
	set_control_par_str(get_ui_id($main_ornament_menu),$CONTROL_PAR_PICTURE,"cuba_soundmenu_transparent")
	make_persistent($main_ornament_menu)
	move_control_px($main_ornament_menu,549,428)
	
	declare ui_slider $ornament_menu_sld (0,1)
	set_control_par_str(get_ui_id($ornament_menu_sld),$CONTROL_PAR_AUTOMATION_NAME,"Ornaments")
	make_persistent($ornament_menu_sld)
	move_control($ornament_menu_sld,3,4)
	
	declare ui_label $main_ornament_arrow_lbl (1,1)
	set_text($main_ornament_arrow_lbl,"")
	set_control_par_str(get_ui_id($main_ornament_arrow_lbl),$CONTROL_PAR_PICTURE,"MEL-Keymode-Dropdown-Btn")
	set_control_par(get_ui_id($main_ornament_arrow_lbl),$CONTROL_PAR_WIDTH,26)
	set_control_par(get_ui_id($main_ornament_arrow_lbl),$CONTROL_PAR_HEIGHT,23)
	move_control_px($main_ornament_arrow_lbl,588,430)
	
	if ($HIDE_AUTOMATION_SLIDERS = 1)
		set_control_par(get_ui_id($scale_sld),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
		set_control_par(get_ui_id($key_mode_menu_sld),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
		set_control_par(get_ui_id($ornament_menu_sld),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
	end if
	
	{transport section}
	{declare ui_button $trigger_host_btn
	$trigger_host_btn := 0
	set_text($trigger_host_btn,"")
	set_control_par_str(get_ui_id($trigger_host_btn),$CONTROL_PAR_PICTURE,"ENS-Trigger-Btn")
	set_control_par(get_ui_id($trigger_host_btn),$CONTROL_PAR_WIDTH,24)
	set_control_par(get_ui_id($trigger_host_btn),$CONTROL_PAR_HEIGHT,29)
	make_instr_persistent($trigger_host_btn)
	move_control_px($trigger_host_btn,15,440)}
	
	declare ui_slider $trigger_host_btn (0,1)
	$trigger_host_btn := 0
	set_control_par_str(get_ui_id($trigger_host_btn),$CONTROL_PAR_PICTURE,"ENS-Trigger-Slider")
	set_control_par(get_ui_id($trigger_host_btn),$CONTROL_PAR_MOUSE_BEHAVIOUR,-5000)
	set_control_par(get_ui_id($trigger_host_btn),$CONTROL_PAR_ALLOW_AUTOMATION,0)
	make_instr_persistent($trigger_host_btn)
	move_control_px($trigger_host_btn,15,440)
	
	declare ui_switch $play_btn
	set_control_par(get_ui_id($play_btn),$CONTROL_PAR_ALLOW_AUTOMATION,1)
	set_control_par_str(get_ui_id($play_btn),$CONTROL_PAR_AUTOMATION_NAME,"Drone On/Off")
	set_control_par_str(get_ui_id($play_btn),$CONTROL_PAR_PICTURE,"ENS-Play-Btn")
	set_control_par_str(get_ui_id($play_btn),$CONTROL_PAR_TEXT,"")
	set_control_par(get_ui_id($play_btn),$CONTROL_PAR_WIDTH,27)
	set_control_par(get_ui_id($play_btn),$CONTROL_PAR_HEIGHT,26)
	move_control_px($play_btn,75,442)
	
	declare ui_button $sync_btn
	$sync_btn := 1
	set_text ($sync_btn,"")
	set_control_par_str(get_ui_id($sync_btn),$CONTROL_PAR_PICTURE,"ENS-Sync-Btn")
	set_control_par(get_ui_id($sync_btn),$CONTROL_PAR_HEIGHT,16)
	set_control_par(get_ui_id($sync_btn),$CONTROL_PAR_WIDTH,17)
	make_instr_persistent($sync_btn)
	move_control_px($sync_btn,79,417)
	
	declare ui_switch $half_time_btn
	set_text($half_time_btn,"")
	set_control_par(get_ui_id($half_time_btn),$CONTROL_PAR_ALLOW_AUTOMATION,0)
	set_control_par(get_ui_id($half_time_btn),$CONTROL_PAR_WIDTH,30)
	set_control_par(get_ui_id($half_time_btn),$CONTROL_PAR_HEIGHT,22)
	set_control_par_str(get_ui_id($half_time_btn),$CONTROL_PAR_PICTURE,"ENS-Tempo-1-2-Btn")
	make_persistent($half_time_btn)
	move_control_px($half_time_btn,129,414)
	
	declare ui_switch $double_time_btn
	set_text($double_time_btn,"")
	set_control_par(get_ui_id($double_time_btn),$CONTROL_PAR_ALLOW_AUTOMATION,0)
	set_control_par(get_ui_id($double_time_btn),$CONTROL_PAR_WIDTH,28)
	set_control_par(get_ui_id($double_time_btn),$CONTROL_PAR_HEIGHT,22)
	set_control_par_str(get_ui_id($double_time_btn),$CONTROL_PAR_PICTURE,"ENS-Tempo-x2-Btn")
	make_persistent($double_time_btn)
	move_control_px($double_time_btn,158,414)
	
	{bpm display}
	
	{variables}
	declare %tempo_check[2]
	declare const $bpm_display_y := 450
	declare const $bpm_display_x := 110
	
	
	declare $tempo_gui_helper1
	declare $tempo_gui_helper2
	
	declare $tempo_vedit := 12000
	make_persistent ($tempo_vedit)
	
	declare ui_button $tempo_up_btn
	set_text($tempo_up_btn,"")
	set_control_par(get_ui_id($tempo_up_btn),$CONTROL_PAR_HEIGHT,13)
	set_control_par(get_ui_id($tempo_up_btn),$CONTROL_PAR_WIDTH,29)
	set_control_par_str(get_ui_id($tempo_up_btn),$CONTROL_PAR_PICTURE,"ENS-Tempo-Up-Btn")
	move_control_px($tempo_up_btn,158,443)
	
	declare ui_button $tempo_down_btn
	set_text($tempo_down_btn,"")
	set_control_par(get_ui_id($tempo_down_btn),$CONTROL_PAR_HEIGHT,13)
	set_control_par(get_ui_id($tempo_down_btn),$CONTROL_PAR_WIDTH,29)
	set_control_par_str(get_ui_id($tempo_down_btn),$CONTROL_PAR_PICTURE,"ENS-Tempo-Down-Btn")
	move_control_px($tempo_down_btn,158,455)
	
	declare ui_label $tempo_up_lbl (1,1)
	set_text($tempo_up_lbl,"")
	set_control_par(get_ui_id($tempo_up_lbl),$CONTROL_PAR_HEIGHT,13)
	set_control_par(get_ui_id($tempo_up_lbl),$CONTROL_PAR_WIDTH,29)
	set_control_par(get_ui_id($tempo_up_lbl),$CONTROL_PAR_PICTURE_STATE,6)
	set_control_par_str(get_ui_id($tempo_up_lbl),$CONTROL_PAR_PICTURE,"ENS-Tempo-Up-Btn")
	move_control_px($tempo_up_lbl,159,444)
	
	declare ui_label $tempo_down_lbl (1,1)
	set_text($tempo_down_lbl,"")
	set_control_par(get_ui_id($tempo_down_lbl),$CONTROL_PAR_HEIGHT,13)
	set_control_par(get_ui_id($tempo_down_lbl),$CONTROL_PAR_WIDTH,29)
	set_control_par(get_ui_id($tempo_down_lbl),$CONTROL_PAR_PICTURE_STATE,6)
	set_control_par_str(get_ui_id($tempo_down_lbl),$CONTROL_PAR_PICTURE,"ENS-Tempo-Down-Btn")
	move_control_px($tempo_down_lbl,159,456)
	
	declare ui_slider $tempo_drag_course (10,400)
	set_control_par_str(get_ui_id($tempo_drag_course),$CONTROL_PAR_PICTURE,"ENS-Tempo-Value-1")
	set_control_par(get_ui_id($tempo_drag_course),$CONTROL_PAR_DEFAULT_VALUE,120)
	set_control_par(get_ui_id($tempo_drag_course),$CONTROL_PAR_MOUSE_BEHAVIOUR,-100)
	set_control_par(get_ui_id($tempo_drag_course),$CONTROL_PAR_ALLOW_AUTOMATION,0)
	set_control_par(get_ui_id($tempo_drag_course),$CONTROL_PAR_WIDTH,36)
	set_control_par(get_ui_id($tempo_drag_course),$CONTROL_PAR_HEIGHT,16)
	make_persistent($tempo_drag_course)
	move_control_px($tempo_drag_course,109,450)
	
	declare ui_slider $tempo_drag_fine (0,99)
	set_control_par_str(get_ui_id($tempo_drag_fine),$CONTROL_PAR_PICTURE,"ENS-Tempo-Value-2")
	set_control_par(get_ui_id($tempo_drag_fine),$CONTROL_PAR_ALLOW_AUTOMATION,0)
	set_control_par(get_ui_id($tempo_drag_fine),$CONTROL_PAR_MOUSE_BEHAVIOUR,-100)
	set_control_par(get_ui_id($tempo_drag_fine),$CONTROL_PAR_WIDTH,24)
	set_control_par(get_ui_id($tempo_drag_fine),$CONTROL_PAR_HEIGHT,16)
	make_persistent($tempo_drag_fine)
	move_control_px($tempo_drag_fine,134,450)
	
	declare ui_label $tempo_label_course (1,1)
	set_text($tempo_label_course,"")
	set_control_par_str(get_ui_id($tempo_label_course),$CONTROL_PAR_PICTURE,"ENS-Tempo-Value-1")
	set_control_par(get_ui_id($tempo_label_course),$CONTROL_PAR_WIDTH,36)
	set_control_par(get_ui_id($tempo_label_course),$CONTROL_PAR_HEIGHT,16)
	move_control_px($tempo_label_course,109,450)
	
	declare ui_label $tempo_label_fine (1,1)
	set_text($tempo_label_fine,"")
	set_control_par_str(get_ui_id($tempo_label_fine),$CONTROL_PAR_PICTURE,"ENS-Tempo-Value-2")
	set_control_par(get_ui_id($tempo_label_fine),$CONTROL_PAR_WIDTH,24)
	set_control_par(get_ui_id($tempo_label_fine),$CONTROL_PAR_HEIGHT,16)
	move_control_px($tempo_label_fine,134,450)
	
	



{function } {}

{ function gui_pattern_select }

	declare ui_text_edit @pattern_tedit
	set_control_par(get_ui_id(@pattern_tedit),$CONTROL_PAR_POS_X,251)
	set_control_par(get_ui_id(@pattern_tedit),$CONTROL_PAR_POS_Y,447)
	set_control_par(get_ui_id(@pattern_tedit),$CONTROL_PAR_FONT_TYPE,$FONT_TYPE_PATTERN_NAME)
	set_control_par(get_ui_id(@pattern_tedit),$CONTROL_PAR_WIDTH,133)
	set_control_par(get_ui_id(@pattern_tedit),$CONTROL_PAR_HEIGHT,25)
	make_persistent(@pattern_tedit)
	
	declare ui_label $pattern_lbl (1,1)
	set_text($pattern_lbl,"Major")
	set_control_par_str(get_ui_id($pattern_lbl),$CONTROL_PAR_PICTURE,"cuba_soundmenu_transparent")
	set_control_par(get_ui_id($pattern_lbl),$CONTROL_PAR_FONT_TYPE,$FONT_TYPE_SOUND_MENU)
	set_control_par(get_ui_id($pattern_lbl),$CONTROL_PAR_WIDTH,133)
	set_control_par(get_ui_id($pattern_lbl),$CONTROL_PAR_HEIGHT,25)
	move_control_px($pattern_lbl,244,447)
	
	declare ui_menu $scale_menu
	add_menu_item($scale_menu,"Scale 1",0)
	add_menu_item($scale_menu,"Scale 2",1)
	add_menu_item($scale_menu,"Scale 3",2)
	add_menu_item($scale_menu,"Scale 4",3)
	add_menu_item($scale_menu,"Scale 5",4)
	add_menu_item($scale_menu,"Scale 6",5)
	add_menu_item($scale_menu,"Scale 7",6)
	add_menu_item($scale_menu,"Scale 8",7)
	add_menu_item($scale_menu,"Scale 9",8)
	add_menu_item($scale_menu,"Scale 10",9)
	add_menu_item($scale_menu,"Scale 11",10)
	add_menu_item($scale_menu,"Scale 12",11)
	make_persistent($scale_menu)
	
	set_control_par(get_ui_id($scale_menu),$CONTROL_PAR_WIDTH,170)
	set_control_par(get_ui_id($scale_menu),$CONTROL_PAR_HEIGHT,20)
	set_control_par_str(get_ui_id($scale_menu),$CONTROL_PAR_PICTURE,"cuba_soundmenu_transparent")
	set_control_par(get_ui_id($scale_menu),$CONTROL_PAR_TEXTPOS_Y,20)
	move_control_px($scale_menu,251,445)
	
	
	declare ui_label $scale_menu_arrow_lbl (1,1)
	set_text($scale_menu_arrow_lbl,"")
	set_control_par_str(get_ui_id($scale_menu_arrow_lbl),$CONTROL_PAR_PICTURE,"MEL-ScaleName-Dropdown-Btn")
	set_control_par(get_ui_id($scale_menu_arrow_lbl),$CONTROL_PAR_WIDTH,35)
	set_control_par(get_ui_id($scale_menu_arrow_lbl),$CONTROL_PAR_HEIGHT,18)
	move_control_px($scale_menu_arrow_lbl,384,445)
	
	declare ui_button $edit_seq_btn
	set_control_par_str(get_ui_id($edit_seq_btn),$CONTROL_PAR_PICTURE,"MEL-Scale-Edit-Btn")
	set_control_par_str(get_ui_id($edit_seq_btn),$CONTROL_PAR_TEXT,"")
	set_control_par(get_ui_id($edit_seq_btn),$CONTROL_PAR_WIDTH,39)
	set_control_par(get_ui_id($edit_seq_btn),$CONTROL_PAR_HEIGHT,22)
	move_control_px($edit_seq_btn,381,419)
	
{function } {}

{ function gui_help_page }
	
	{help button}
	declare ui_button $help_btn
	set_text($help_btn,"")
	set_control_par(get_ui_id($help_btn),$CONTROL_PAR_HEIGHT,21)
	set_control_par(get_ui_id($help_btn),$CONTROL_PAR_WIDTH,21)
	set_control_par_str(get_ui_id($help_btn),$CONTROL_PAR_PICTURE,"ENS-Help-Btn")
	move_control_px($help_btn,597,75)
	
	{close help button}
	declare ui_button $close_help_btn
	set_text($close_help_btn,"")
	set_control_par(get_ui_id($close_help_btn),$CONTROL_PAR_HEIGHT,21)
	set_control_par(get_ui_id($close_help_btn),$CONTROL_PAR_WIDTH,21)
	set_control_par_str(get_ui_id($close_help_btn),$CONTROL_PAR_PICTURE,"ENS-Help-Close-Btn")
	move_control_px($close_help_btn,597,180)
	
	declare ui_label $articulation_lbl (1,1)
	set_control_par(get_ui_id($articulation_lbl),$CONTROL_PAR_WIDTH,226)
	set_control_par(get_ui_id($articulation_lbl),$CONTROL_PAR_HEIGHT,19)
	set_control_par(get_ui_id($articulation_lbl),$CONTROL_PAR_FONT_TYPE,24)
	set_text($articulation_lbl,"")
	set_control_par(get_ui_id($articulation_lbl),$CONTROL_PAR_TEXTPOS_Y,2)
	set_control_par(get_ui_id($articulation_lbl),$CONTROL_PAR_TEXT_ALIGNMENT,1)
	set_control_par(get_ui_id($articulation_lbl),$CONTROL_PAR_HIDE,$HIDE_PART_BG)
	move_control_px($articulation_lbl,203,345)
	
	declare %help_page_ids[2]
	%help_page_ids[0] := get_ui_id($close_help_btn)
	%help_page_ids[1] := get_ui_id($articulation_lbl)
	
	declare ui_label $help_0_lbl (1,1)
	declare ui_label $help_1_lbl (1,1)
	declare ui_label $help_2_lbl (1,1)
	declare ui_label $help_3_lbl (1,1)
	declare ui_label $help_4_lbl (1,1)
	declare ui_label $help_5_lbl (1,1)
	declare ui_label $help_6_lbl (1,1)
	
	declare ui_label $help_7_lbl (1,1)
	declare ui_label $help_8_lbl (1,1)
	declare ui_label $help_9_lbl (1,1)
	declare ui_label $help_10_lbl (1,1)
	declare ui_label $help_11_lbl (1,1)
	
	declare %help_label_ids[12]
	%help_label_ids[0] := get_ui_id($help_0_lbl)
	%help_label_ids[1] := get_ui_id($help_1_lbl)
	%help_label_ids[2] := get_ui_id($help_2_lbl)
	%help_label_ids[3] := get_ui_id($help_3_lbl)
	%help_label_ids[4] := get_ui_id($help_4_lbl)
	%help_label_ids[5] := get_ui_id($help_5_lbl)
	%help_label_ids[6] := get_ui_id($help_6_lbl)
	%help_label_ids[7] := get_ui_id($help_7_lbl)
	%help_label_ids[8] := get_ui_id($help_8_lbl)
	%help_label_ids[9] := get_ui_id($help_9_lbl)
	%help_label_ids[10] := get_ui_id($help_10_lbl)
	%help_label_ids[11] := get_ui_id($help_11_lbl)
	
	$count := 0
	while ($count < num_elements(%help_label_ids))
		set_control_par(%help_label_ids[$count],$CONTROL_PAR_WIDTH,100)
		set_control_par(%help_label_ids[$count],$CONTROL_PAR_HEIGHT,19)
		set_control_par(%help_label_ids[$count],$CONTROL_PAR_FONT_TYPE,$FONT_TYPE_SOUND_MENU)
		
		
		if ($count < 7)
			{white keys}
			set_control_par_str(%help_label_ids[$count],$CONTROL_PAR_TEXT,!key_switch_white_names[$count])
		else
			{black keys}
			set_control_par_str(%help_label_ids[$count],$CONTROL_PAR_TEXT,!key_switch_black_names[$count-7])
		end if
		
		inc($count)
	end while
	
	move_control_px($help_0_lbl,79+(69*0),330)
	move_control_px($help_1_lbl,79+(67*1),330)
	move_control_px($help_2_lbl,79+(67*2),330)
	move_control_px($help_3_lbl,79+(67*3),330)
	move_control_px($help_4_lbl,79+(67*4),330)
	move_control_px($help_5_lbl,79+(67*5),330)
	move_control_px($help_6_lbl,79+(67*6),330)
	
	move_control_px($help_7_lbl,118,231)
	move_control_px($help_8_lbl,194,231)
	move_control_px($help_9_lbl,318,231)
	move_control_px($help_10_lbl,390,231)
	move_control_px($help_11_lbl,460,231)

{function } {}

{ function gui_seq_page }
	
	{export scale button}
	
	declare ui_button $export_scale_btn
	set_text($export_scale_btn,"Export Scale")
	move_control_px($export_scale_btn,50,70)
	
	{global tuning and drone}
	declare ui_menu $tuning_menu
	add_menu_item($tuning_menu,"Equal",0)
	add_menu_item($tuning_menu,"Just",1)
	add_menu_item($tuning_menu,"Scale Tuning",2)
	set_control_par(get_ui_id($tuning_menu),$CONTROL_PAR_WIDTH,107)
	set_control_par(get_ui_id($tuning_menu),$CONTROL_PAR_HEIGHT,28)
	set_control_par(get_ui_id($tuning_menu),$CONTROL_PAR_FONT_TYPE,$FONT_TYPE_SOUND_MENU)
	set_control_par(get_ui_id($tuning_menu),$CONTROL_PAR_TEXTPOS_Y,7)
	set_control_par_str(get_ui_id($tuning_menu),$CONTROL_PAR_PICTURE,"cuba_soundmenu_transparent")
	make_persistent($tuning_menu)
	move_control_px($tuning_menu,67,296)
	
	declare ui_label $tuning_menu_arrow_lbl (1,1)
	set_text($tuning_menu_arrow_lbl,"")
	set_control_par_str(get_ui_id($tuning_menu_arrow_lbl),$CONTROL_PAR_PICTURE,"MEL-Scale-Edit-Tuning-Dropdown-Btn")
	set_control_par(get_ui_id($tuning_menu_arrow_lbl),$CONTROL_PAR_WIDTH,26)
	set_control_par(get_ui_id($tuning_menu_arrow_lbl),$CONTROL_PAR_HEIGHT,17)
	move_control_px($tuning_menu_arrow_lbl,144,301)
	
	declare ui_menu $drone_menu
	add_menu_item($drone_menu,"5-12-12-1",0)
	add_menu_item($drone_menu,"4-12-12-1",1)
	add_menu_item($drone_menu,"6-12-12-1",2)
	set_control_par(get_ui_id($drone_menu),$CONTROL_PAR_WIDTH,107)
	set_control_par(get_ui_id($drone_menu),$CONTROL_PAR_HEIGHT,28)
	set_control_par(get_ui_id($drone_menu),$CONTROL_PAR_FONT_TYPE,$FONT_TYPE_SOUND_MENU)
	set_control_par(get_ui_id($drone_menu),$CONTROL_PAR_TEXTPOS_Y,7)
	set_control_par_str(get_ui_id($drone_menu),$CONTROL_PAR_PICTURE,"cuba_soundmenu_transparent")
	make_persistent($drone_menu)
	move_control_px($drone_menu,67,330)
	
	declare ui_label $drone_menu_arrow_lbl (1,1)
	set_text($drone_menu_arrow_lbl,"")
	set_control_par_str(get_ui_id($drone_menu_arrow_lbl),$CONTROL_PAR_PICTURE,"MEL-Scale-Edit-Tuning-Dropdown-Btn")
	set_control_par(get_ui_id($drone_menu_arrow_lbl),$CONTROL_PAR_WIDTH,26)
	set_control_par(get_ui_id($drone_menu_arrow_lbl),$CONTROL_PAR_HEIGHT,17)
	move_control_px($drone_menu_arrow_lbl,144,335)
	
	
	{note ornament menu}
	declare ui_menu $note_ornament_menu
	
	set_control_par(get_ui_id($note_ornament_menu),$CONTROL_PAR_WIDTH,200)
	set_control_par(get_ui_id($note_ornament_menu),$CONTROL_PAR_HEIGHT,28)
	set_control_par(get_ui_id($note_ornament_menu),$CONTROL_PAR_FONT_TYPE,$FONT_TYPE_SOUND_MENU)
	set_control_par(get_ui_id($note_ornament_menu),$CONTROL_PAR_TEXTPOS_Y,7)
	set_control_par_str(get_ui_id($note_ornament_menu),$CONTROL_PAR_PICTURE,"cuba_soundmenu_transparent")
	make_persistent($note_ornament_menu)
	move_control_px($note_ornament_menu,218,205)
	
	add_menu_item($note_ornament_menu,"No Ornament",0)
	add_menu_item($note_ornament_menu,"Slide Up - Short",1)
	add_menu_item($note_ornament_menu,"Slide Up - Med",3)
	add_menu_item($note_ornament_menu,"Slide Up - Long",5)
	add_menu_item($note_ornament_menu,"Slide Down - Short",2)
	add_menu_item($note_ornament_menu,"Slide Down - Med",4)
	add_menu_item($note_ornament_menu,"Slide Down - Long",6)
	
	{if ($INSTRUMENT_ID # $SITAR_ID)}
		add_menu_item($note_ornament_menu,"Turn",7)
		add_menu_item($note_ornament_menu,"Mordent",8)
	{end if}
	
	declare ui_label $note_ornament_arrow_lbl (1,1)
	set_text($note_ornament_arrow_lbl,"")
	set_control_par_str(get_ui_id($note_ornament_arrow_lbl),$CONTROL_PAR_PICTURE,"MEL-Keymode-Dropdown-Btn")
	set_control_par(get_ui_id($note_ornament_arrow_lbl),$CONTROL_PAR_WIDTH,26)
	set_control_par(get_ui_id($note_ornament_arrow_lbl),$CONTROL_PAR_HEIGHT,23)
	move_control_px($note_ornament_arrow_lbl,389,207)
	
	{note tuning}
	declare ui_button $note_tune_up_btn
	set_text($note_tune_up_btn,"")
	set_control_par(get_ui_id($note_tune_up_btn),$CONTROL_PAR_HEIGHT,13)
	set_control_par(get_ui_id($note_tune_up_btn),$CONTROL_PAR_WIDTH,29)
	set_control_par_str(get_ui_id($note_tune_up_btn),$CONTROL_PAR_PICTURE,"ENS-Tempo-Up-Btn")
	move_control_px($note_tune_up_btn,502,206)
	
	declare ui_button $note_tune_dn_btn
	set_text($note_tune_dn_btn,"")
	set_control_par(get_ui_id($note_tune_dn_btn),$CONTROL_PAR_HEIGHT,14)
	set_control_par(get_ui_id($note_tune_dn_btn),$CONTROL_PAR_WIDTH,29)
	set_control_par_str(get_ui_id($note_tune_dn_btn),$CONTROL_PAR_PICTURE,"ENS-Tempo-Down-Btn")
	move_control_px($note_tune_dn_btn,502,206+12)
	
	declare ui_label $note_tune_up_lbl (1,1)
	set_text($note_tune_up_lbl,"")
	set_control_par(get_ui_id($note_tune_up_lbl),$CONTROL_PAR_HEIGHT,13)
	set_control_par(get_ui_id($note_tune_up_lbl),$CONTROL_PAR_WIDTH,29)
	set_control_par(get_ui_id($note_tune_up_lbl),$CONTROL_PAR_PICTURE_STATE,6)
	set_control_par_str(get_ui_id($note_tune_up_lbl),$CONTROL_PAR_PICTURE,"ENS-Tempo-Up-Btn")
	move_control_px($note_tune_up_lbl,503,207)
	
	declare ui_label $note_tune_dn_lbl (1,1)
	set_text($note_tune_dn_lbl,"")
	set_control_par(get_ui_id($note_tune_dn_lbl),$CONTROL_PAR_HEIGHT,13)
	set_control_par(get_ui_id($note_tune_dn_lbl),$CONTROL_PAR_WIDTH,29)
	set_control_par(get_ui_id($note_tune_dn_lbl),$CONTROL_PAR_PICTURE_STATE,6)
	set_control_par_str(get_ui_id($note_tune_dn_lbl),$CONTROL_PAR_PICTURE,"ENS-Tempo-Down-Btn")
	move_control_px($note_tune_dn_lbl,503,207+12)
	
	declare ui_slider $note_tune_sld (-100,100)
	set_control_par_str(get_ui_id($note_tune_sld),$CONTROL_PAR_PICTURE,"MEL-Tuning-Value")
	set_control_par(get_ui_id($note_tune_sld),$CONTROL_PAR_DEFAULT_VALUE,0)
	set_control_par(get_ui_id($note_tune_sld),$CONTROL_PAR_ALLOW_AUTOMATION,0)
	set_control_par(get_ui_id($note_tune_sld),$CONTROL_PAR_MOUSE_BEHAVIOUR,-100)
	set_control_par(get_ui_id($note_tune_sld),$CONTROL_PAR_WIDTH,24)
	set_control_par(get_ui_id($note_tune_sld),$CONTROL_PAR_HEIGHT,16)
	move_control_px($note_tune_sld,432,212)
	
	declare ui_label $note_tune_lbl (1,1)
	set_text($note_tune_lbl,"")
	set_control_par(get_ui_id($note_tune_lbl),$CONTROL_PAR_HEIGHT,12)
	set_control_par(get_ui_id($note_tune_lbl),$CONTROL_PAR_WIDTH,55)
	set_control_par(get_ui_id($note_tune_lbl),$CONTROL_PAR_PICTURE_STATE,100)
	set_control_par_str(get_ui_id($note_tune_lbl),$CONTROL_PAR_PICTURE,"MEL-Tuning-Value-Disabled")
	move_control_px($note_tune_lbl,432,212)
	
	{arrow label for select note menu}
	declare ui_label $note_select_arrow_lbl (1,1)
	set_text($note_select_arrow_lbl,"")
	set_control_par_str(get_ui_id($note_select_arrow_lbl),$CONTROL_PAR_PICTURE,"MEL-Keymode-Dropdown-Btn")
	set_control_par(get_ui_id($note_select_arrow_lbl),$CONTROL_PAR_WIDTH,26)
	set_control_par(get_ui_id($note_select_arrow_lbl),$CONTROL_PAR_HEIGHT,23)
	move_control_px($note_select_arrow_lbl,178,207)
	
	declare %note_tuning_ids[13]
	%note_tuning_ids[0] := get_ui_id($note_tune_up_btn)
	%note_tuning_ids[1] := get_ui_id($note_tune_dn_btn)
	%note_tuning_ids[2] := get_ui_id($note_tune_sld)
	%note_tuning_ids[3] := get_ui_id($note_ornament_menu)
	%note_tuning_ids[4] := get_ui_id($note_ornament_arrow_lbl)
	%note_tuning_ids[5] := get_ui_id($note_select_arrow_lbl)
	%note_tuning_ids[6] := get_ui_id($tuning_menu)
	%note_tuning_ids[7] := get_ui_id($tuning_menu_arrow_lbl)
	%note_tuning_ids[8] := get_ui_id($drone_menu)
	%note_tuning_ids[9] := get_ui_id($drone_menu_arrow_lbl)
	%note_tuning_ids[10] := get_ui_id($note_tune_up_lbl)
	%note_tuning_ids[11] := get_ui_id($note_tune_dn_lbl)
	%note_tuning_ids[12] := get_ui_id($note_tune_lbl)
	
	{select note menus}
	declare ui_menu $note_0_menu
	declare ui_menu $note_1_menu
	declare ui_menu $note_2_menu
	declare ui_menu $note_3_menu
	declare ui_menu $note_4_menu
	declare ui_menu $note_5_menu
	declare ui_menu $note_6_menu
	
	add_menu_item($note_0_menu,"C",0)
	add_menu_item($note_1_menu,"Db",0)
	add_menu_item($note_1_menu,"D",1)
	add_menu_item($note_1_menu,"D#",2)
	add_menu_item($note_2_menu,"D",0)
	add_menu_item($note_2_menu,"Eb",1)
	add_menu_item($note_2_menu,"E",2)
	add_menu_item($note_3_menu,"F",0)
	add_menu_item($note_3_menu,"F#",1)
	add_menu_item($note_4_menu,"G",0)
	add_menu_item($note_5_menu,"Ab",0)
	add_menu_item($note_5_menu,"A",1)
	add_menu_item($note_5_menu,"A#",2)
	add_menu_item($note_6_menu,"A",0)
	add_menu_item($note_6_menu,"Bb",1)
	add_menu_item($note_6_menu,"B",2)
	
	
	declare %note_menu_ids[7]
	%note_menu_ids[0] := get_ui_id($note_0_menu)
	%note_menu_ids[1] := get_ui_id($note_1_menu)
	%note_menu_ids[2] := get_ui_id($note_2_menu)
	%note_menu_ids[3] := get_ui_id($note_3_menu)
	%note_menu_ids[4] := get_ui_id($note_4_menu)
	%note_menu_ids[5] := get_ui_id($note_5_menu)
	%note_menu_ids[6] := get_ui_id($note_6_menu)
	
	$count := 0
	while ($count < num_elements(%note_menu_ids))
	
		set_control_par(%note_menu_ids[$count],$CONTROL_PAR_POS_X,108)
		set_control_par(%note_menu_ids[$count],$CONTROL_PAR_POS_Y,205)
		
		
		set_control_par(%note_menu_ids[$count],$CONTROL_PAR_WIDTH,99)
		set_control_par(%note_menu_ids[$count],$CONTROL_PAR_HEIGHT,29)
		set_control_par(%note_menu_ids[$count],$CONTROL_PAR_FONT_TYPE,$FONT_TYPE_SOUND_MENU)
		set_control_par(%note_menu_ids[$count],$CONTROL_PAR_TEXTPOS_Y,7)
		set_control_par_str(%note_menu_ids[$count],$CONTROL_PAR_PICTURE,"cuba_soundmenu_transparent")
		
		inc($count)
	end while
	
	{notehead labels}
	declare ui_label $notehead_0_lbl (1,1)
	declare ui_label $notehead_1_lbl (1,1)
	declare ui_label $notehead_2_lbl (1,1)
	declare ui_label $notehead_3_lbl (1,1)
	declare ui_label $notehead_4_lbl (1,1)
	declare ui_label $notehead_5_lbl (1,1)
	declare ui_label $notehead_6_lbl (1,1)
	
	declare %notehead_label_ids[7]
	%notehead_label_ids[0] := get_ui_id($notehead_0_lbl)
	%notehead_label_ids[1] := get_ui_id($notehead_1_lbl)
	%notehead_label_ids[2] := get_ui_id($notehead_2_lbl)
	%notehead_label_ids[3] := get_ui_id($notehead_3_lbl)
	%notehead_label_ids[4] := get_ui_id($notehead_4_lbl)
	%notehead_label_ids[5] := get_ui_id($notehead_5_lbl)
	%notehead_label_ids[6] := get_ui_id($notehead_6_lbl)
	
	declare %notehead_pos_x[7] := (0,86,171,255,340,426,511)
	
	declare %notehead_pos_y[7*7] := (...
	{c} 0,4,7,11,14,18,21,...
	{d} 0,3,7,10,14,17,21,...
	{e} 0,4,7,11,14,18,21,...
	{f} 0,3,7,10,14,17,21,...
	{g} 0,4,7,11,14,18,21,...
	{a} 0,3,7,10,14,17,21,...
	{b} 0,4,7,11,14,18,21)
	
	$count := 0
	while ($count < num_elements(%notehead_label_ids))
		
		set_control_par(%notehead_label_ids[$count],$CONTROL_PAR_WIDTH,25)
		set_control_par(%notehead_label_ids[$count],$CONTROL_PAR_HEIGHT,22)
		
		set_control_par(%notehead_label_ids[$count],$CONTROL_PAR_POS_X,44 +  %notehead_pos_x[$count])
		set_control_par(%notehead_label_ids[$count],$CONTROL_PAR_POS_Y,122 - %notehead_pos_y[$count])
		
		set_control_par_str(%notehead_label_ids[$count],$CONTROL_PAR_TEXT,"")
		set_control_par_str(%notehead_label_ids[$count],$CONTROL_PAR_PICTURE,"MEL-Pattern-Edit-Notes")
		
		inc($count)
	end while
	
	{tab buttons}
	declare ui_button $tab_0_btn
	declare ui_button $tab_1_btn
	declare ui_button $tab_2_btn
	declare ui_button $tab_3_btn
	declare ui_button $tab_4_btn
	declare ui_button $tab_5_btn
	declare ui_button $tab_6_btn
	
	declare %tab_btn_ids[7]
	%tab_btn_ids[0] := get_ui_id($tab_0_btn)
	%tab_btn_ids[1] := get_ui_id($tab_1_btn)
	%tab_btn_ids[2] := get_ui_id($tab_2_btn)
	%tab_btn_ids[3] := get_ui_id($tab_3_btn)
	%tab_btn_ids[4] := get_ui_id($tab_4_btn)
	%tab_btn_ids[5] := get_ui_id($tab_5_btn)
	%tab_btn_ids[6] := get_ui_id($tab_6_btn)
	
	declare %tab_pos_x[7] := (0,87,172,257,342,427,512)
	
	$count := 0
	while ($count < num_elements(%tab_btn_ids))
		
		set_control_par(%tab_btn_ids[$count],$CONTROL_PAR_WIDTH,89)
		set_control_par(%tab_btn_ids[$count],$CONTROL_PAR_HEIGHT,24)
		
		set_control_par(%tab_btn_ids[$count],$CONTROL_PAR_POS_X,16 +  %tab_pos_x[$count])
		set_control_par(%tab_btn_ids[$count],$CONTROL_PAR_POS_Y,155)
		
		set_control_par_str(%tab_btn_ids[$count],$CONTROL_PAR_TEXT,"")
		set_control_par_str(%tab_btn_ids[$count],$CONTROL_PAR_PICTURE,"MEL-Pattern-Edit-Tab" & $count+1 & "-Button")
		
		inc($count)
		
	end while
	
	{file browser}
	declare ui_file_selector $file_browser
	set_control_par(get_ui_id($file_browser),$CONTROL_PAR_WIDTH,598)
	set_control_par(get_ui_id($file_browser),$CONTROL_PAR_HEIGHT,102)
	set_control_par(get_ui_id($file_browser),$CONTROL_PAR_COLUMN_WIDTH,197) {197}
	set_control_par_str(get_ui_id($file_browser),$CONTROL_PAR_BASEPATH,@browser_basepath)
	set_control_par(get_ui_id($file_browser),$CONTROL_PAR_FILE_TYPE,$NI_FILE_TYPE_ARRAY)
	set_control_par_str(get_ui_id($file_browser),$CONTROL_PAR_FILEPATH,@browser_basepath & "1 - North Indian Scales 1/")
	move_control_px($file_browser,218,276)
	
	declare ui_label $chromatic_notes_lbl (1,1)
	set_text($chromatic_notes_lbl,"")
	set_control_par(get_ui_id($chromatic_notes_lbl),$CONTROL_PAR_WIDTH,155)
	set_control_par(get_ui_id($chromatic_notes_lbl),$CONTROL_PAR_HEIGHT,40)
	set_control_par_str(get_ui_id($chromatic_notes_lbl),$CONTROL_PAR_PICTURE,"MEL-Chromatic-Mode-Label")
	move_control_px($chromatic_notes_lbl,237,93)
	
	declare ui_label $chromatic_tabs_lbl (1,1)
	set_text($chromatic_tabs_lbl,"")
	set_control_par(get_ui_id($chromatic_tabs_lbl),$CONTROL_PAR_WIDTH,600)
	set_control_par(get_ui_id($chromatic_tabs_lbl),$CONTROL_PAR_HEIGHT,23)
	set_control_par_str(get_ui_id($chromatic_tabs_lbl),$CONTROL_PAR_PICTURE,"MEL-Pattern-Edit-Tabs-Disabled")
	move_control_px($chromatic_tabs_lbl,17,156)
	
{function } {}

{ function gui_inst_page }
	
	{parameter name labels}
	declare ui_label $inst_0_lbl (1,1)
	declare ui_label $inst_1_lbl (1,1)
	declare ui_label $inst_2_lbl (1,1)
	declare ui_label $inst_3_lbl (1,1)
	
	declare %inst_label_ids[4]
	%inst_label_ids[0] := get_ui_id($inst_0_lbl)
	%inst_label_ids[1] := get_ui_id($inst_1_lbl)
	%inst_label_ids[2] := get_ui_id($inst_2_lbl)
	%inst_label_ids[3] := get_ui_id($inst_3_lbl)
	
	$count := 0
	while ($count < num_elements(%inst_label_ids))
		
		set_control_par(%inst_label_ids[$count],$CONTROL_PAR_WIDTH,57)
		set_control_par(%inst_label_ids[$count],$CONTROL_PAR_HEIGHT,13)
		
		set_control_par_str(%inst_label_ids[$count],$CONTROL_PAR_TEXT,"")
		set_control_par_str(%inst_label_ids[$count],$CONTROL_PAR_PICTURE,"MEL-InstrEdit-Labels")
		
		inc($count)
	end while
	
	{set correct label via picture state}
	select ($INSTRUMENT_ID)
		
		case $HARMONIUM_ID
			set_control_par(get_ui_id($inst_0_lbl),$CONTROL_PAR_PICTURE_STATE,0)
			set_control_par(get_ui_id($inst_1_lbl),$CONTROL_PAR_PICTURE_STATE,1)
			set_control_par(get_ui_id($inst_2_lbl),$CONTROL_PAR_PICTURE_STATE,2)
			set_control_par(get_ui_id($inst_3_lbl),$CONTROL_PAR_PICTURE_STATE,3)
		
		case $SITAR_ID
			
			set_control_par(get_ui_id($inst_0_lbl),$CONTROL_PAR_PICTURE_STATE,4)
			set_control_par(get_ui_id($inst_1_lbl),$CONTROL_PAR_PICTURE_STATE,5)
			set_control_par(get_ui_id($inst_2_lbl),$CONTROL_PAR_PICTURE_STATE,0)
			set_control_par(get_ui_id($inst_3_lbl),$CONTROL_PAR_PICTURE_STATE,0)
			
		case $TANPURA_ID
			
			set_control_par(get_ui_id($inst_0_lbl),$CONTROL_PAR_PICTURE_STATE,6)
			set_control_par(get_ui_id($inst_1_lbl),$CONTROL_PAR_PICTURE_STATE,10)
			set_control_par(get_ui_id($inst_2_lbl),$CONTROL_PAR_PICTURE_STATE,0)
			set_control_par(get_ui_id($inst_3_lbl),$CONTROL_PAR_PICTURE_STATE,0)
			
		case $TUMBI_ID
			
			set_control_par(get_ui_id($inst_0_lbl),$CONTROL_PAR_PICTURE_STATE,2)
			set_control_par(get_ui_id($inst_1_lbl),$CONTROL_PAR_PICTURE_STATE,9)
			set_control_par(get_ui_id($inst_2_lbl),$CONTROL_PAR_PICTURE_STATE,0)
			set_control_par(get_ui_id($inst_3_lbl),$CONTROL_PAR_PICTURE_STATE,0)
		
	end select
	
	{inst knobs}
	declare ui_slider $inst_0_sld (0,100)
	$inst_0_sld := 0
	set_control_par(get_ui_id($inst_0_sld), $CONTROL_PAR_DEFAULT_VALUE,50)
	set_control_par(get_ui_id($inst_0_sld),$CONTROL_PAR_MOUSE_BEHAVIOUR,-500)
	set_control_par_str(get_ui_id($inst_0_sld),$CONTROL_PAR_PICTURE,"PRC-InstrEdit-Knob")
	make_persistent ($inst_0_sld)
	
	declare ui_slider $inst_1_sld (0,100)
	$inst_1_sld := 0
	set_control_par(get_ui_id($inst_1_sld), $CONTROL_PAR_DEFAULT_VALUE,50)
	set_control_par(get_ui_id($inst_1_sld),$CONTROL_PAR_MOUSE_BEHAVIOUR,-500)
	set_control_par_str(get_ui_id($inst_1_sld),$CONTROL_PAR_PICTURE,"PRC-InstrEdit-Knob")
	make_persistent ($inst_1_sld)
	
	declare ui_slider $inst_2_sld (0,100)
	set_control_par(get_ui_id($inst_2_sld), $CONTROL_PAR_DEFAULT_VALUE,50)
	set_control_par(get_ui_id($inst_2_sld),$CONTROL_PAR_MOUSE_BEHAVIOUR,-500)
	set_control_par_str(get_ui_id($inst_2_sld),$CONTROL_PAR_PICTURE,"PRC-InstrEdit-Knob")
	make_persistent ($inst_2_sld)
	
	declare ui_menu $inst_3_menu
	add_menu_item($inst_3_menu,"Off      ",0)
	add_menu_item($inst_3_menu,"On",1)
	set_control_par(get_ui_id($inst_3_menu),$CONTROL_PAR_WIDTH,74)
	set_control_par(get_ui_id($inst_3_menu),$CONTROL_PAR_HEIGHT,20)
	set_control_par(get_ui_id($inst_3_menu),$CONTROL_PAR_FONT_TYPE,$FONT_TYPE_SOUND_MENU)
	set_control_par(get_ui_id($inst_3_menu),$CONTROL_PAR_TEXTPOS_Y,2)
	set_control_par_str(get_ui_id($inst_3_menu),$CONTROL_PAR_PICTURE,"cuba_soundmenu_transparent")
	make_persistent($inst_3_menu)
	move_control_px($inst_3_menu,381,351)
	
	
	declare ui_slider $inst_3_menu_sld (0,1)
	set_control_par_str(get_ui_id($inst_3_menu_sld),$CONTROL_PAR_AUTOMATION_NAME,"Coupler")
	make_persistent($inst_3_menu_sld)
	
	if ($HIDE_AUTOMATION_SLIDERS = 1)
		set_control_par(get_ui_id($inst_3_menu_sld),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
	end if
	
	declare ui_label $inst_3_arrow_lbl (1,1)
	set_text($inst_3_arrow_lbl,"")
	set_control_par_str(get_ui_id($inst_3_arrow_lbl),$CONTROL_PAR_PICTURE,"PRC-InstrEdit-Dropdown")
	set_control_par(get_ui_id($inst_3_arrow_lbl),$CONTROL_PAR_WIDTH,20)
	set_control_par(get_ui_id($inst_3_arrow_lbl),$CONTROL_PAR_HEIGHT,19)
	move_control_px($inst_3_arrow_lbl,431,350)
	
	{automation names}
	select ($INSTRUMENT_ID)
		case $HARMONIUM_ID
			set_control_par_str(get_ui_id($inst_0_sld),$CONTROL_PAR_AUTOMATION_NAME,"Stop 1 Vol")
			set_control_par_str(get_ui_id($inst_1_sld),$CONTROL_PAR_AUTOMATION_NAME,"Stop 2 Vol")
			set_control_par_str(get_ui_id($inst_2_sld),$CONTROL_PAR_AUTOMATION_NAME,"Noises")
		case $SITAR_ID
			set_control_par_str(get_ui_id($inst_0_sld),$CONTROL_PAR_AUTOMATION_NAME,"Release")
			set_control_par_str(get_ui_id($inst_1_sld),$CONTROL_PAR_AUTOMATION_NAME,"Resonance")
		case $TANPURA_ID
			set_control_par_str(get_ui_id($inst_0_sld),$CONTROL_PAR_AUTOMATION_NAME,"Style")
			set_control_par_str(get_ui_id($inst_1_sld),$CONTROL_PAR_AUTOMATION_NAME,"Depth")
		case $TUMBI_ID
			set_control_par_str(get_ui_id($inst_0_sld),$CONTROL_PAR_AUTOMATION_NAME,"Noises")
			set_control_par_str(get_ui_id($inst_1_sld),$CONTROL_PAR_AUTOMATION_NAME,"Swing")
	end select
	
	{instrument close button}
	declare ui_button $close_inst_btn
	set_text($close_inst_btn,"")
	set_control_par(get_ui_id($close_inst_btn),$CONTROL_PAR_HEIGHT,21)
	set_control_par(get_ui_id($close_inst_btn),$CONTROL_PAR_WIDTH,21)
	set_control_par_str(get_ui_id($close_inst_btn),$CONTROL_PAR_PICTURE,"ENS-Help-Close-Btn")
	
	declare %inst_page_ids[10]
	%inst_page_ids[0] := get_ui_id($close_inst_btn)
	%inst_page_ids[1] := get_ui_id($inst_0_lbl)
	%inst_page_ids[2] := get_ui_id($inst_1_lbl)
	%inst_page_ids[3] := get_ui_id($inst_2_lbl)
	%inst_page_ids[4] := get_ui_id($inst_3_lbl)
	%inst_page_ids[5] := get_ui_id($inst_0_sld)
	%inst_page_ids[6] := get_ui_id($inst_1_sld)
	%inst_page_ids[7] := get_ui_id($inst_2_sld)
	%inst_page_ids[8] := get_ui_id($inst_3_menu)
	%inst_page_ids[9] := get_ui_id($inst_3_arrow_lbl)
	
	
	{instrument selector}
	declare ui_button $inst_0_btn
	set_text($inst_0_btn,"")
	select ($INSTRUMENT_ID)
		
		case $SITAR_ID
			set_control_par_str(get_ui_id($inst_0_btn),$CONTROL_PAR_PICTURE,"MEL-Sitar-Select-Instr-Btn")
			set_control_par(get_ui_id($inst_0_btn),$CONTROL_PAR_HEIGHT,225)
			set_control_par(get_ui_id($inst_0_btn),$CONTROL_PAR_WIDTH,458)
			move_control_px($inst_0_btn,144,152)
			
		case $TUMBI_ID
			set_control_par_str(get_ui_id($inst_0_btn),$CONTROL_PAR_PICTURE,"MEL-Tumbi-Select-Instr-Btn")
			set_control_par(get_ui_id($inst_0_btn),$CONTROL_PAR_HEIGHT,213)
			set_control_par(get_ui_id($inst_0_btn),$CONTROL_PAR_WIDTH,312)
			move_control_px($inst_0_btn,80,106)
			
		case $HARMONIUM_ID
			set_control_par_str(get_ui_id($inst_0_btn),$CONTROL_PAR_PICTURE,"MEL-Harmonium-Select-Instr-Btn")
			set_control_par(get_ui_id($inst_0_btn),$CONTROL_PAR_HEIGHT,207)
			set_control_par(get_ui_id($inst_0_btn),$CONTROL_PAR_WIDTH,326)
			move_control_px($inst_0_btn,66,162)
			
		case $TANPURA_ID
			set_control_par_str(get_ui_id($inst_0_btn),$CONTROL_PAR_PICTURE,"MEL-Tanpura-Left-Select-Instr-Btn")
			set_control_par(get_ui_id($inst_0_btn),$CONTROL_PAR_HEIGHT,318)
			set_control_par(get_ui_id($inst_0_btn),$CONTROL_PAR_WIDTH,112)
			move_control_px($inst_0_btn,159,65)
			
	end select
	
	{positioning}
	if ($INSTRUMENT_ID = $HARMONIUM_ID)
		
		move_control_px($inst_0_sld,178,338)
		move_control_px($inst_1_sld,245,338)
		move_control_px($inst_2_sld,312,338)
		
		move_control_px($inst_0_lbl,168,374)
		move_control_px($inst_1_lbl,238,374)
		move_control_px($inst_2_lbl,304,374)
		move_control_px($inst_3_lbl,384,374)
		
		move_control_px($close_inst_btn,462,327)
	
	else
		
		move_control_px($inst_0_sld,246,338)
		move_control_px($inst_1_sld,343,338)
		
		move_control_px($inst_0_lbl,239,374)
		move_control_px($inst_1_lbl,334,374)
		move_control_px($inst_2_lbl,239,374)
		move_control_px($inst_3_lbl,337,374)
		
		move_control_px($close_inst_btn,438,327)
	
	end if
	
{function } {}

{ function gui_mix_preset }
	
	declare ui_menu $mix_preset_menu
	
	set_control_par(get_ui_id($mix_preset_menu),$CONTROL_PAR_TEXTPOS_Y,3)
	set_control_par(get_ui_id($mix_preset_menu),$CONTROL_PAR_HEIGHT,20)
	set_control_par(get_ui_id($mix_preset_menu),$CONTROL_PAR_WIDTH,122)
	set_control_par_str(get_ui_id($mix_preset_menu),$CONTROL_PAR_PICTURE,"cuba_soundmenu_transparent")
	set_control_par(get_ui_id($mix_preset_menu),$CONTROL_PAR_FONT_TYPE,$FONT_TYPE_SOUND_MENU)
	make_persistent($mix_preset_menu)
	move_control_px($mix_preset_menu,497,32)
	
	{add factory preset names}
	$count := 0
	while($count < $NUM_OF_FACTORY_MIXPRESETS)
		add_menu_item($mix_preset_menu,!factory_mix_preset_names[$count],$count)
		inc($count)
	end while
	
	
	{arrow graphic}
	declare ui_label $mix_preset_arrow_lbl (1,1)
	set_text($mix_preset_arrow_lbl,"")
	set_control_par_str(get_ui_id($mix_preset_arrow_lbl),$CONTROL_PAR_PICTURE,"ENS-Sound-Preset-Dropdown-Btn")
	set_control_par(get_ui_id($mix_preset_arrow_lbl),$CONTROL_PAR_WIDTH,16)
	set_control_par(get_ui_id($mix_preset_arrow_lbl),$CONTROL_PAR_HEIGHT,15)
	move_control_px($mix_preset_arrow_lbl,599,34)
	
	declare ui_button $mix_preset_prev_btn
	set_control_par_str(get_ui_id($mix_preset_prev_btn),$CONTROL_PAR_PICTURE,"ENS-Sound-Preset-Prev-Btn")
	
	move_control_px($mix_preset_prev_btn,462,33)
	
	declare ui_button $mix_preset_next_btn
	set_control_par_str(get_ui_id($mix_preset_next_btn),$CONTROL_PAR_PICTURE,"ENS-Sound-Preset-Next-Btn")
	
	move_control_px($mix_preset_next_btn,479,33)
	
	
	declare %mix_preset_control_ids[3]
	%mix_preset_control_ids[0] := get_ui_id($mix_preset_menu)
	%mix_preset_control_ids[1] := get_ui_id($mix_preset_prev_btn)
	%mix_preset_control_ids[2] := get_ui_id($mix_preset_next_btn)
	
	$count := 1
	while ($count < 3)
		set_control_par(%mix_preset_control_ids[$count],$CONTROL_PAR_HEIGHT,17)
		set_control_par(%mix_preset_control_ids[$count],$CONTROL_PAR_WIDTH,18)
		set_control_par_str(%mix_preset_control_ids[$count],$CONTROL_PAR_TEXT,"")
	
		inc($count)
	end while
	
{function } {}

{ function data }
	
	{scale names}
	declare @scale_name_0
	declare @scale_name_1
	declare @scale_name_2
	declare @scale_name_3
	declare @scale_name_4
	declare @scale_name_5
	declare @scale_name_6
	declare @scale_name_7
	declare @scale_name_8
	declare @scale_name_9
	declare @scale_name_10
	declare @scale_name_11
	
	make_persistent(@scale_name_0)
	make_persistent(@scale_name_1)
	make_persistent(@scale_name_2)
	make_persistent(@scale_name_3)
	make_persistent(@scale_name_4)
	make_persistent(@scale_name_5)
	make_persistent(@scale_name_6)
	make_persistent(@scale_name_7)
	make_persistent(@scale_name_8)
	make_persistent(@scale_name_9)
	make_persistent(@scale_name_10)
	make_persistent(@scale_name_11)
	
	@scale_name_0 := "Chromatic"
	
	{notes per scale degree}
	declare %notes_data[7 * $NUM_OF_SCALES] {saves the selected note per scale degree for all presets}
	make_persistent(%notes_data)
	
	{ornament per scale degree}
	declare %ornaments_data[7 * $NUM_OF_SCALES] {saves the selected ornament per scale degree for all presets}
	make_persistent(%ornaments_data)
	
	{tuning per scale degree}
	declare %tuning_data[7 * $NUM_OF_SCALES] {saves the tuning per scale degree for all presets}
	make_persistent(%tuning_data)
	
	declare %single_scale_preset[7*3] {for exporting}
	
	{scale}
	declare %scale_data[12 * $NUM_OF_SCALES] {0: in scale, 1: not in scale}
	make_persistent(%scale_data)
	{C		Db		D		Eb		E		F		Gb		G		Ab		A		Bb		B}
	
 	 {0,	 	1,		0,		1,		0,		0,	 	1,		0,		1,		0,		1,		0}
	
	declare %scale_tuning_data[12 * $NUM_OF_SCALES]
	make_persistent(%scale_tuning_data)
	{the tuning for each chromatic note, starting with C}
	
	declare %just_tuning_data[12] := (0,-29,4,16,-14,-2,-32,2,14,-16,18,-12)
	
	declare %map_low_high[12] := (0,1,0,1,0,1,0,0,1,0,1,0)
	{0: map lower, 1: map higher}
	
	{main play buffer for tanpura}
	declare %play_buffer[$MAX_NUM_OF_NOTES * $NUM_NOTE_PAR] := (-1)
	make_persistent(%play_buffer)
	{arrangement order:
	0 position (sp ticks)
	1 note number
	2 group}
	
	{for female tanpura}
	declare %fem_play_buffer[$MAX_NUM_OF_NOTES * $NUM_NOTE_PAR] := (-1)
	make_persistent(%fem_play_buffer)
	
	{this array is only used for notes with a negative song position, i.e. notes that otherwise would not be played}
	declare %alt_play_buffer[$MAX_NUM_OF_NOTES * $NUM_NOTE_PAR] := (-1)
	make_persistent(%alt_play_buffer)
	
	declare %fem_alt_play_buffer[$MAX_NUM_OF_NOTES * $NUM_NOTE_PAR] := (-1)
	make_persistent(%fem_alt_play_buffer)

	
	{edit buffers}
	declare %edit_all_buffer[$MAX_NUM_OF_STEPS * $MAX_NUM_OF_TRACKS]
	declare $pattern_length_edit_buffer
	declare $beat_grid_edit_buffer
	declare $clave_edit_buffer
	
	declare @pattern_name_edit_buffer
	
	declare %pattern_track_solo_edit_buffer[$MAX_NUM_OF_TRACKS]
	declare %pattern_track_mute_edit_buffer[$MAX_NUM_OF_TRACKS]
	
	{chikari notes}
	declare %chikari_notes[5] := (37,39,42,44,46)
	
	{key switch notes}
	declare %key_switch_notes[7] := (36,38,40,41,43,45,47)
	
	declare %chikari_real_notes[5 * 12] := (...
		{C}  72,60,55,48,43,...
		{C#} 73,61,56,49,44,...
		{D}  74,62,57,50,45,...
		{Eb} 75,63,58,51,46,...
		{E}	 71,59,59,47,47,...
		{F}  72,60,53,48,41,...
		{F#} 73,61,54,49,42,...
		{G}  74,62,55,50,43,...
		{Ab} 75,63,56,51,44,...
		{A}  76,64,57,52,45,...
		{Bb} 70,58,58,46,46,...
		{B}  71,59,54,47,42)
	
	{tanpura notes}
	declare %tanpura_notes_1[12 * $NUM_OF_NOTES_TANPURA] := (...
	{C}		43,48,48,36,...
	{C#}	44,49,49,37,...
	{D}		45,50,50,38,...
	{Eb}	46,51,51,39,...
	{E}		47,52,52,40,...
	{F}		41,48,48,36,...
	{F#}	42,49,49,37,...
	{G}		43,50,50,38,...
	{Ab}	44,51,51,39,...
	{A}		40,45,45,33,...
	{Bb}	41,46,46,34,...
	{B}		42,47,47,35)
	
	declare %tanpura_notes_2[12 * $NUM_OF_NOTES_TANPURA] := (...
	{C}		41,48,48,36,...
	{C#}	42,49,49,37,...
	{D}		43,50,50,38,...
	{Eb}	44,51,51,39,...
	{E}		45,52,52,40,...
	{F}		46,46,46,34,...
	{F#}	47,47,47,35,...
	{G}		43,48,48,36,...
	{Ab}	44,49,49,37,...
	{A}		45,50,50,33,...
	{Bb}	46,51,51,34,...
	{B}		40,47,47,35)

	declare %tanpura_notes_3[12 * $NUM_OF_NOTES_TANPURA] := (...
	{C}		45,48,48,36,...
	{C#}	46,49,49,37,...
	{D}		47,50,50,38,...
	{Eb}	48,51,51,39,...
	{E}		49,52,52,40,...
	{F}		43,48,48,36,...
	{F#}	44,49,49,37,...
	{G}		45,50,50,38,...
	{Ab}	46,51,51,39,...
	{A}		42,45,45,33,...
	{Bb}	43,46,46,34,...
	{B}		44,47,47,35)
	
	{sitar, for original c# string}
	declare %sitar1_root_data[12] := (...
	{C}	486100,...
	{Db}500000,...
	{D}	513900,...
	{Eb}527800,...
	{E}	472200,...
	{F}	486100,...
	{F#}500000,...
	{G}	513900,...
	{Ab}527800,...
	{A}	541700,...
	{Bb}458400,...
	{B}	472200)
	
	{sitar, for original g# string}
	declare %sitar2_root_data[12] := (...
	{C}	486100,...
	{Db}500000,...
	{D}	513900,...
	{Eb}527800,...
	{E}	541700,...
	{F}	458400,...
	{F#}472200,...
	{G}	486100,...
	{Ab}500000,...
	{A}	513900,...
	{Bb}527800,...
	{B}	472200)
	
	{main data array}
	declare %preset_data[$MAX_NUM_OF_STEPS  * $MAX_NUM_OF_TRACKS * $NUM_OF_SCALES]
	make_persistent(%preset_data)
	
	{lauflicht and cell grid tables}
	declare %lauflicht_table[$MAX_NUM_OF_STEPS_PAGE]
	
	declare %cell_grid_table[$MAX_NUM_OF_STEPS_PAGE * $MAX_NUM_OF_TRACKS]
	make_persistent(%cell_grid_table)
	
	{pattern specific}
	declare %pattern_length_beats[$NUM_OF_SCALES] := (4) {the length in beats of each pattern}
	make_persistent(%pattern_length_beats)
	
	declare %pattern_length_data[$NUM_OF_SCALES] := (1) {the length of each pattern in bars, i.e. the state of the vedit}
	make_persistent(%pattern_length_data)
	
	declare %pattern_clave[$NUM_OF_SCALES] {the clave of each pattern, 0 = 2-3, 1 = 3-2}
	make_persistent(%pattern_clave)
	
	declare %pattern_beat_grid[$NUM_OF_SCALES] := ($DEFAULT_BEAT_GRID) {the beat grid of each pattern, can be 2, 3 or 4}
	make_persistent(%pattern_beat_grid)
	
	declare %pattern_track_solo[$NUM_OF_SCALES * $MAX_NUM_OF_TRACKS] {the state of the solo buttons per track and preset}
	make_persistent(%pattern_track_solo)
	
	declare %pattern_track_mute[$NUM_OF_SCALES * $MAX_NUM_OF_TRACKS] {the state of the mute buttons per track and preset}
	make_persistent(%pattern_track_mute)
	
	
	{adjust beat grid for melodic instruments, should be always 1}
	
	
	
	declare $num_of_steps_page {the number of visual steps in current page, can be 12 or 16, not global}
	$num_of_steps_page := 16															
	make_persistent($num_of_steps_page)
	
	declare $num_of_steps_pattern {the total number of steps in current pattern}
	$num_of_steps_pattern := 16
	make_persistent($num_of_steps_pattern)
	
	declare $num_of_beats_page {the number of beats on the page, can be 4 or 8}
	$num_of_beats_page := 4
	make_persistent($num_of_beats_page)
	
	declare %beat_delay[$MAX_NUM_OF_TRACKS]
	make_persistent(%beat_delay)
	
	declare %step_delay[4 * $MAX_NUM_OF_TRACKS]
	make_persistent(%step_delay)
	
	
	declare %inst_knob2_data[$MAX_INST_TYPES_PER_MENU * 6] := (50)
	make_persistent(%inst_knob2_data)
	
	declare %inst_knob1_data[$MAX_INST_TYPES_PER_MENU * 6]
	make_persistent(%inst_knob1_data)
	
	
	
	{midifile names per pattern}
	declare @pattern_0_midifile_name
	declare @pattern_1_midifile_name
	declare @pattern_2_midifile_name
	declare @pattern_3_midifile_name
	declare @pattern_4_midifile_name
	declare @pattern_5_midifile_name
	declare @pattern_6_midifile_name
	declare @pattern_7_midifile_name
	declare @pattern_8_midifile_name
	declare @pattern_9_midifile_name
	declare @pattern_10_midifile_name
	declare @pattern_11_midifile_name
	
	make_persistent(@pattern_0_midifile_name)
	make_persistent(@pattern_1_midifile_name)
	make_persistent(@pattern_2_midifile_name)
	make_persistent(@pattern_3_midifile_name)
	make_persistent(@pattern_4_midifile_name)
	make_persistent(@pattern_5_midifile_name)
	make_persistent(@pattern_6_midifile_name)
	make_persistent(@pattern_7_midifile_name)
	make_persistent(@pattern_8_midifile_name)
	make_persistent(@pattern_9_midifile_name)
	make_persistent(@pattern_10_midifile_name)
	make_persistent(@pattern_11_midifile_name)
	
	
	
	
{function } {}

{ function roll_data }
	
	declare %roll_velo_data[32*5] := (...
	70,10,70,10,		70,10,70,10,		70,10,70,10,		70,10,70,10,	70,10,70,10,		70,10,70,10,		70,10,70,10,		70,10,70,10,...
	70,10,70,10,		70,10,70,10,		70,10,70,10,		70,10,70,10,	70,10,70,10,		70,10,70,10,		70,10,70,10,		70,10,70,10,...
	70,10,70,10,		70,10,70,10,		70,10,70,10,		70,5,10,10,	70,10,70,10,		70,10,70,10,		70,10,70,10,		70,10,70,0,...
	70,10,70,10,		70,10,70,10,		70,10,70,10,		70,10,70,10,		70,10,70,10,		70,10,70,10,		70,10,70,10,		70,10,70,10,...
	0,0,70,10,		0,0,70,0,		0,0,70,10,		0,10,70,10,	0,0,70,10,		0,0,70,0,		0,0,70,10,		0,10,70,10)
	
	declare %roll_note_data[32*5] := (...
	0,0,0,0,		0,0,0,0,		0,0,0,0,		0,0,0,0,	0,0,0,0,		0,0,0,0,		0,0,0,0,		0,0,0,0,...
	-2,0,0,0,		0,0,0,0,		-2,0,0,0,		0,0,0,0,	-2,0,0,0,		0,0,0,0,		0,0,0,0,		3,3,2,-2,...
	0,0,0,0,		0,2,2,0,		-2,-2,-2,0,		0,0,0,0,	0,0,2,2,		0,0,-2,-2,		0,0,2,-2,		0,0,0,0,...
	3,3,3,0,		1,1,1,-2,		0,0,0,0,		0,0,0,-2,	3,3,3,0,		1,1,1,-2,		0,0,-2,0,		0,-2,0,1,...
	0,0,0,0,		0,0,0,0,		0,0,0,0,		0,-2,0,0,	0,0,0,0,		0,0,0,0,		0,0,0,0,		0,2,-2,-2)
	
{function } {}

{ function variables }
	
	{array preset system}
	declare $load_array_id
	$load_array_id := -1
	
	declare $main_knob_0_sld_last_callback := -1
	declare $main_knob_0_sld_last_value := -1
	
	declare $main_knob_1_sld_last_callback := -1
	declare $main_knob_1_sld_last_value := -1
	
	declare $main_knob_2_sld_last_callback := -1
	declare $main_knob_2_sld_last_value := -1
	
	declare $inst_0_knob_1_sld_last_callback := -1
	declare $inst_0_knob_1_sld_last_value := -1
	
	declare $inst_1_knob_1_sld_last_callback := -1
	declare $inst_1_knob_1_sld_last_value := -1
	
	declare $inst_2_knob_1_sld_last_callback := -1
	declare $inst_2_knob_1_sld_last_value := -1
	
	declare $inst_3_knob_1_sld_last_callback := -1
	declare $inst_3_knob_1_sld_last_value := -1
	
	declare $inst_4_knob_1_sld_last_callback := -1
	declare $inst_4_knob_1_sld_last_value := -1
	
	declare $inst_5_knob_1_sld_last_callback := -1
	declare $inst_5_knob_1_sld_last_value := -1
	
	declare $last_play_btn
	
	declare $beat_sld_last_callback := -1
	declare $step0_delay_sld_last_callback := -1
	declare $step1_delay_sld_last_callback := -1
	declare $step2_delay_sld_last_callback := -1
	declare $step3_delay_sld_last_callback := -1
	
	declare %track_allowed[$MAX_NUM_OF_TRACKS * $NUM_OF_SCALES] := (1) {1 if the track is allowed for playing, 0 otherwise}
	make_persistent(%track_allowed)
	
	declare $position
	declare $position_deviation
	declare $create_first
	declare $alt_play_buffer_count
	declare $trigger_note
	declare $play_first_beat
	declare $fem_play_first_beat
	
	declare $solo_active {1 if any of the track solo buttons is on, 0 itherwise}
	
	declare $selected_instrument {from 0 to 5; if -1, no instrument is selected}
	$selected_instrument := -1
	
	declare $selected_tab {from 0 to 6}
	make_persistent($selected_tab)
	
	declare $selected_track {from 0 to 5; if -1, no track is selected}
	$selected_track := -1
	
	declare $play_buffer_count
	declare $play_count
	declare $fem_play_count
	declare $track_count {used for play buffer creation}
	declare $bar_count {used for play buffer creation}
	
	declare %key_switch_down[128]
	
	declare $preset_data {used for play buffer creation}
	
	declare $first
	
	declare $tick_counter
	declare $fem_tick_counter
	declare $step_counter
	declare $step_counter_previous
	declare $step_counter_next
	declare $grid_counter
	declare $grid_counter_next
	
	declare $played_beat
	
	declare $seq_running
	declare $phrase_running
	
	declare $sync_position
	
	declare $step_duration_ticks {the duration of one step in song position ticks}
	
	declare $preset_key_counter
	
	declare $new_id {must not be polyphonic}
	
	declare $fem_new_id {must not be polyphonic}
	
	declare polyphonic $played_note_id
	declare polyphonic $art_note_id
	
	
	declare $update_note_icons {only for melodic, 1 if note icons should be updated, 0 otherwise}
	
	declare $tanpura_played_velo
	declare $tanpura_played_note
	declare $tanpura_played_group
	declare $tanpura_played_vol
	declare $tanpura_played_wait
	
	declare $fem_tanpura_played_velo
	declare $fem_tanpura_played_note
	declare $fem_tanpura_played_group
	declare $fem_tanpura_played_vol
	declare $fem_tanpura_played_wait
	
	declare polyphonic $played_velo
	
	declare polyphonic $played_duration
	
	declare polyphonic $played_group
	declare polyphonic $played_tuning
	declare $tanpura_tuning
	declare polyphonic $art_interval
	
	declare polyphonic $original_pitch_class_tonal
	
	declare $played_pattern_length_ticks := 60 {in 24 ppq ticks}
	
	declare $fem_played_pattern_length_ticks := 60 {in 24 ppq ticks}
	make_persistent($fem_played_pattern_length_ticks)
	
	declare $last_played_note
	
	declare $grp_idx
	
	declare $randomize_time_abs
	make_persistent ($randomize_time_abs)
	
	declare $randomize_velo
	make_persistent ($randomize_velo)
	
	declare $played_key_switch := -1 {from 0 to 6, must not be polyphonic}
	
	{rolls}
	
	{declare polyphonic $roll_played_note
	declare polyphonic $roll_played_note_2
	declare polyphonic $roll_played_velo
	declare polyphonic $roll_velo_helper
	declare polyphonic $roll_played_duration
	declare polyphonic $roll_played_tuning
	declare polyphonic $roll_played_stroke
	declare polyphonic $roll_count
	declare polyphonic $roll_active_keyswitch
	declare polyphonic $roll_dur_percentage
	declare polyphonic $roll_length_matras
	declare polyphonic $roll_note_id
	declare polyphonic $roll_duration_sixteenth
	declare polyphonic $roll_duration_helper
	declare polyphonic $roll_running
	declare polyphonic $roll_allow_note}
	
	declare $roll_played_note
	declare $roll_played_note_2
	declare $roll_played_velo
	declare $roll_velo_helper
	declare $roll_played_duration
	declare $roll_played_tuning
	declare $roll_played_stroke
	declare $roll_count
	declare $roll_active_keyswitch
	declare $roll_dur_percentage
	declare $roll_length_matras
	declare $roll_note_id
	declare $roll_duration_sixteenth
	declare $roll_duration_helper
	declare $roll_running
	declare $roll_allow_note
	
	declare %key_down_tumbi[128]
	declare %roll_played_note_per_key[128]
	
	{aux variables}
	
	declare $slider_value
	declare $array_pointer
	declare $value
	declare $break_while
	
	declare $count_1
	declare $count_2
	declare $count_3
	declare $count_4
	
	declare $a
	declare $b
	declare $c

	
	declare %mapping_helper[12] := (0,1,1,2,2,3,3,4,5,5,6,6) {used for easy mapping, maps white notes to scale degrees}
	
	declare %mapping_swara[12] := (0,1,1,2,2,3,3,4,5,5,6,6) 
	
	declare %white_keys[7] := (0,2,4,5,7,9,11)
	
	
	declare polyphonic $played_scale_degree
	declare polyphonic $played_swara
	declare polyphonic $played_ornament
	declare polyphonic $new_octave
	declare polyphonic $semitones
	declare polyphonic $original_note
	declare polyphonic $played_note
	declare polyphonic $new_note
	
	
	
	declare polyphonic $art_note
	declare polyphonic $allow_note
	declare polyphonic $allow_ornament
	
	declare %art_notes_upper[4] {the three current upper notes, starting at index 1}
	declare %art_notes_lower[4] {the three lower upper notes, starting at index 1}
	
	
	
	declare %current_scale[12]
	
	declare $original_note_2
	declare $new_note_2
	declare $low_note
	declare $high_note
	declare $low_note_2
	declare $high_note_2
	declare $played_scale_degree_2
	declare $new_octave_2
	declare $semitones_2
	
	{event limiter}
	declare $last_callback_id
	declare $root_note_sld_last_value := -1000
	declare $scale_sld_last_value := -1000
	declare $key_mode_sld_last_value := -1000
	declare $ornament_menu_sld_last_value := -1000
	
	{listener parameters}
	set_listener($NI_SIGNAL_TIMER_MS,60000000 / $tempo_vedit * 1000 / $TICKS_PER_BEAT / 10)
	set_listener($NI_SIGNAL_TIMER_BEAT,$TICKS_PER_BEAT)
	set_listener($NI_SIGNAL_TRANSP_STOP,1)
	set_listener($NI_SIGNAL_TRANSP_START,1)
	
	{reset key color}
	$count := 0 
	while ($count < 128) 
  		set_key_color($count,$KEY_COLOR_INACTIVE)
  		set_key_type($count,$NI_KEY_TYPE_NONE)
  		inc($count)
  	end while
	
{function } {}

{ function help }
	
	{main page}
	
	set_control_help($perf_0_sld,"Ornament Time: Changes the speed of the triggered ornaments. Can also be controlled with the Mod Wheel (CC1).")
	
	set_control_help($about_btn,"About: Opens the About Screen.")
	
	set_control_help($mix_preset_menu,"Sound Preset Menu: Loads a sound preset. A sound preset contains all settings of the mixer page.")
	set_control_help($mix_preset_prev_btn,"Previous Sound Preset: Loads the previous sound preset in the menu.")
	set_control_help($mix_preset_next_btn,"Next Sound Preset: Loads the next sound preset in the menu.")
	
	set_control_help($inst_0_btn,"Opens the instrument properties window.")
	set_control_help($help_btn,"Help: Opens the help view.")
	set_control_help($edit_seq_btn,"Edit: Opens the scale editor.")
	
	set_control_help($key_mode_menu,"Key Mode: : <no info yet>.")
	set_control_help($main_ornament_menu,"Ornaments: : Disables the triggering of ornaments that have been set for specific scale degrees.")
	
	
	set_control_help($pattern_lbl,"Scale Label: Displays the currently selected scale.")
	set_control_help(@pattern_tedit,"Scale Label (Edit): Displays the currently selected scale. Double-click to change the name of the scale.")

	set_control_help($root_note_sld,"Root Note: Sets the root note of the scale.")
	set_control_help($root_up_btn,"Root Note Up: Changes the root note in semitones.")
	set_control_help($root_down_btn,"Root Note Down: Changes the root note in semitones.")
	
	set_control_help($scale_menu,"Scale: Selects the scale. The first scale slot is always the chromatic scale and not editable.")
	
	{transport}
	
	set_control_help($tempo_up_btn,"Increase Tempo: Increases the pattern sequencer's internal tempo by 1 bpm (or 0.01 if you hold Shift while clicking).")
	set_control_help($tempo_down_btn,"Decrease Tempo: Decreases the pattern sequencer's internal tempo by 1 bpm (or 0.01 if you hold Shift while clicking).")
	set_control_help($tempo_drag_course,"Internal Tempo: Sets the pattern sequencer's internal tempo, i.e. when <Sync> is turned off.")
	set_control_help($tempo_drag_fine,"Internal Tempo: Sets the pattern sequencer's internal tempo, i.e. when <Sync> is turned off.")
	
	set_control_help($half_time_btn,"Half Time: Changes the tempo of the drone to half time.")
	set_control_help($double_time_btn,"Double Time: Changes the tempo of the drone to double time.")
	
	
	set_control_help($sync_btn,"Sync: Syncs the drone pattern to the host tempo. Thie sync state will not be saved with snapshots.")
	set_control_help($trigger_host_btn,"Trigger: If set to <Host>, the drone will start playback when the host clock starts running. The trigger state will not be saved with snapshots.")
	set_control_help($play_btn,"Play Button: Starts playback of the drone, regardless of the <Trigger> selection.")
	
	
	{scale page}

	set_control_help($tuning_menu,"Tuning: Sets the global tuning for the instrument.")
	set_control_help($drone_menu,"Drone: Selects a drone pattern.")
	
	set_control_help($note_ornament_menu,"Ornament: Selects the ornament for the specified scale degree.")
	
	set_control_help($note_tune_up_btn,"Increase Tuning: Raises the tuning of the specified scale degree in cents.")
	set_control_help($note_tune_dn_btn,"Decrease Tuning: Lowers the tuning of the specified scale degree in cents.")
	set_control_help($note_tune_sld,"Scale Tuning: Drag to set the tuning of the specified scale degree in cent. Only available when <Tuning> is set toe <Scale Tuning>.")
	
	set_control_help($note_0_menu,"Select Note: Selects the note for the specified scale degree. The 1st and 5th scale degree are fixed and cannot be changed.")
	set_control_help($note_1_menu,"Select Note: Selects the note for the specified scale degree. The 1st and 5th scale degree are fixed and cannot be changed.")
	set_control_help($note_2_menu,"Select Note: Selects the note for the specified scale degree. The 1st and 5th scale degree are fixed and cannot be changed.")
	set_control_help($note_3_menu,"Select Note: Selects the note for the specified scale degree. The 1st and 5th scale degree are fixed and cannot be changed.")
	set_control_help($note_4_menu,"Select Note: Selects the note for the specified scale degree. The 1st and 5th scale degree are fixed and cannot be changed.")
	set_control_help($note_5_menu,"Select Note: Selects the note for the specified scale degree. The 1st and 5th scale degree are fixed and cannot be changed.")
	set_control_help($note_6_menu,"Select Note: Selects the note for the specified scale degree. The 1st and 5th scale degree are fixed and cannot be changed.")
	
	set_control_help($tab_0_btn,"Displays the settings of the 1st scale degree.")
	set_control_help($tab_1_btn,"Displays the settings of the 2nd scale degree.")
	set_control_help($tab_2_btn,"Displays the settings of the 3rd scale degree.")
	set_control_help($tab_3_btn,"Displays the settings of the 4th scale degree.")
	set_control_help($tab_4_btn,"Displays the settings of the 5th scale degree.")
	set_control_help($tab_5_btn,"Displays the settings of the 6th scale degree.")
	set_control_help($tab_6_btn,"Displays the settings of the 7th scale degree.")
	
	set_control_par_str(get_ui_id($file_browser),$CONTROL_PAR_HELP,"Scale Browser: Double click to load a scale to the currently active slot.")
	
	{instrument edit}
	select ($INSTRUMENT_ID)
		case $HARMONIUM_ID
			set_control_par_str(get_ui_id($inst_0_sld),$CONTROL_PAR_HELP, "Stop 1 Vol: no info yet")
			set_control_par_str(get_ui_id($inst_1_sld),$CONTROL_PAR_HELP, "Stop 2 Vol: no info yet")
			set_control_par_str(get_ui_id($inst_2_sld),$CONTROL_PAR_HELP, "Noises: Sets the volume of the instrument's noises.")
			set_control_par_str(get_ui_id($inst_3_menu),$CONTROL_PAR_HELP,"Coupler: no info yet")
			
		case $SITAR_ID
			set_control_par_str(get_ui_id($inst_0_sld),$CONTROL_PAR_HELP,"Release: Sets the volume of the release sounds.")
			set_control_par_str(get_ui_id($inst_1_sld),$CONTROL_PAR_HELP,"Resonance: Sets the volume of the resonance of the sympathetic strings.")
		case $TANPURA_ID
			set_control_par_str(get_ui_id($inst_0_sld),$CONTROL_PAR_HELP,"Style: no info yet")
			set_control_par_str(get_ui_id($inst_1_sld),$CONTROL_PAR_HELP,"Depth: no info yet")
		case $TUMBI_ID
			set_control_par_str(get_ui_id($inst_0_sld),$CONTROL_PAR_HELP,"Noises: Sets the volume of the instrument's noises.")
			set_control_par_str(get_ui_id($inst_1_sld),$CONTROL_PAR_HELP,"Swing: Sets the swing amount of the triggered pattern. Patterns can be triggered with the black keys in the range of C1 to B1.")
	end select
	
	
{function } {}

{ function key_names }
	
	while ($count < 128)
        remove_keyrange($count)
        inc($count)
    end while
    
    set_keyrange(36,47,"Key Switches")

	{reset key names}
    while ($count < 128)
        set_key_name($count,"")
        inc($count)
    end while
	
	{KEY SWITCHES}
	{white keys}
	$count := 0 
	while ($count < num_elements(%key_switch_notes)) 
		set_key_name(%key_switch_notes[$count],!key_switch_white_names[$count])
		inc($count)
	end while
	
	{black keys}
	$count := 0 
	while ($count < num_elements(%chikari_notes)) 
		set_key_name(%chikari_notes[$count],!key_switch_black_names[$count])
		inc($count)
	end while
	
{function } {}

{ function pgs } 
	
	{for articulation script}
	
	pgs_create_key(INST_MENU_VALUES,6)
	pgs_create_key(MIX_PRESET,1)
	
	pgs_create_key(GLOBAL_TIME,1) {can be 0, normal, 1, half, 2 double}
	pgs_create_key(RANDOMIZE_MASTER,1)
	pgs_create_key(STEP_DURATION_TICKS,1)
	pgs_create_key(SYNC,1)
	pgs_create_key(TEMPO,1)
	
	{value of performance sliders for mixer script}
	pgs_create_key(PERF_SLIDER_0,1)
	
	
{function } {}


	$init_flag := 0
	
end on

function change_noteheads
	
	{note tuning labels}
	if ($tuning_menu = 0) {equal}
		set_control_par(get_ui_id($note_tune_lbl),$CONTROL_PAR_PICTURE_STATE,100)
	end if
	
	if ($tuning_menu = 1) {just}
		
		select ($selected_tab)
			
			case 0
				set_control_par(get_ui_id($note_tune_lbl),$CONTROL_PAR_PICTURE_STATE,100+%just_tuning_data[0])
				
			case 1
				select ($note_1_menu)
					case 0
						set_control_par(get_ui_id($note_tune_lbl),$CONTROL_PAR_PICTURE_STATE,100+%just_tuning_data[1])
					case 1
						set_control_par(get_ui_id($note_tune_lbl),$CONTROL_PAR_PICTURE_STATE,100+%just_tuning_data[2])
					case 2
						set_control_par(get_ui_id($note_tune_lbl),$CONTROL_PAR_PICTURE_STATE,100+%just_tuning_data[3])
				end select
			case 2
				select ($note_2_menu)
					case 0
						set_control_par(get_ui_id($note_tune_lbl),$CONTROL_PAR_PICTURE_STATE,100+%just_tuning_data[2])
					case 1
						set_control_par(get_ui_id($note_tune_lbl),$CONTROL_PAR_PICTURE_STATE,100+%just_tuning_data[3])
					case 2
						set_control_par(get_ui_id($note_tune_lbl),$CONTROL_PAR_PICTURE_STATE,100+%just_tuning_data[4])
				end select
				
			case 3
				if ($note_3_menu = 0)
					set_control_par(get_ui_id($note_tune_lbl),$CONTROL_PAR_PICTURE_STATE,100+%just_tuning_data[5])
				else
					set_control_par(get_ui_id($note_tune_lbl),$CONTROL_PAR_PICTURE_STATE,100+%just_tuning_data[6])
				end if
			case 4
				set_control_par(get_ui_id($note_tune_lbl),$CONTROL_PAR_PICTURE_STATE,100+%just_tuning_data[7])
			
			case 5
				select ($note_5_menu)
					case 0
						set_control_par(get_ui_id($note_tune_lbl),$CONTROL_PAR_PICTURE_STATE,100+%just_tuning_data[8])
					case 1
						set_control_par(get_ui_id($note_tune_lbl),$CONTROL_PAR_PICTURE_STATE,100+%just_tuning_data[9])
					case 2
						set_control_par(get_ui_id($note_tune_lbl),$CONTROL_PAR_PICTURE_STATE,100+%just_tuning_data[10])
				end select
			
			case 6
				select ($note_6_menu)
					case 0
						set_control_par(get_ui_id($note_tune_lbl),$CONTROL_PAR_PICTURE_STATE,100+%just_tuning_data[9])
					case 1
						set_control_par(get_ui_id($note_tune_lbl),$CONTROL_PAR_PICTURE_STATE,100+%just_tuning_data[10])
					case 2
						set_control_par(get_ui_id($note_tune_lbl),$CONTROL_PAR_PICTURE_STATE,100+%just_tuning_data[11])
				end select
			
		end select
		
	end if
	
	{MENU ITEM VISIBILITY}
	
	{1 is visible}
	
	select ($note_1_menu)
		case 0
			set_menu_item_visibility(get_ui_id($note_2_menu),0,1)
			set_menu_item_visibility(get_ui_id($note_2_menu),1,1)
			set_menu_item_visibility(get_ui_id($note_2_menu),2,1)
		case 1
			set_menu_item_visibility(get_ui_id($note_2_menu),0,0)
			set_menu_item_visibility(get_ui_id($note_2_menu),1,1)
			set_menu_item_visibility(get_ui_id($note_2_menu),2,1)
		case 2
			set_menu_item_visibility(get_ui_id($note_2_menu),0,0)
			set_menu_item_visibility(get_ui_id($note_2_menu),1,0)
			set_menu_item_visibility(get_ui_id($note_2_menu),2,1)
	end select
	
	select ($note_2_menu)
		case 0
			set_menu_item_visibility(get_ui_id($note_1_menu),0,1)
			set_menu_item_visibility(get_ui_id($note_1_menu),1,0)
			set_menu_item_visibility(get_ui_id($note_1_menu),2,0)
		case 1
			set_menu_item_visibility(get_ui_id($note_1_menu),0,1)
			set_menu_item_visibility(get_ui_id($note_1_menu),1,1)
			set_menu_item_visibility(get_ui_id($note_1_menu),2,0)
		case 2
			set_menu_item_visibility(get_ui_id($note_1_menu),0,1)
			set_menu_item_visibility(get_ui_id($note_1_menu),1,1)
			set_menu_item_visibility(get_ui_id($note_1_menu),2,1)
	end select
	
	
	select ($note_5_menu)
		case 0
			set_menu_item_visibility(get_ui_id($note_6_menu),0,1)
			set_menu_item_visibility(get_ui_id($note_6_menu),1,1)
			set_menu_item_visibility(get_ui_id($note_6_menu),2,1)
		case 1
			set_menu_item_visibility(get_ui_id($note_6_menu),0,0)
			set_menu_item_visibility(get_ui_id($note_6_menu),1,1)
			set_menu_item_visibility(get_ui_id($note_6_menu),2,1)
		case 2
			set_menu_item_visibility(get_ui_id($note_6_menu),0,0)
			set_menu_item_visibility(get_ui_id($note_6_menu),1,0)
			set_menu_item_visibility(get_ui_id($note_6_menu),2,1)
	end select
	
	select ($note_6_menu)
		case 0
			set_menu_item_visibility(get_ui_id($note_5_menu),0,1)
			set_menu_item_visibility(get_ui_id($note_5_menu),1,0)
			set_menu_item_visibility(get_ui_id($note_5_menu),2,0)
		case 1
			set_menu_item_visibility(get_ui_id($note_5_menu),0,1)
			set_menu_item_visibility(get_ui_id($note_5_menu),1,1)
			set_menu_item_visibility(get_ui_id($note_5_menu),2,0)
		case 2
			set_menu_item_visibility(get_ui_id($note_5_menu),0,1)
			set_menu_item_visibility(get_ui_id($note_5_menu),1,1)
			set_menu_item_visibility(get_ui_id($note_5_menu),2,1)
	end select
		
	
	{SET CORRECT NOTE NAME}
	
	{first and fifth}
	set_menu_item_str(get_ui_id($note_0_menu),0,!note_names_standard[$root_note_sld])
	set_menu_item_str(get_ui_id($note_4_menu),0,!note_names_fifth[$root_note_sld])
	
	{second}
	$a := %second_note_accidental[0 + $root_note_sld*3]
	$b := %second_note_accidental[1 + $root_note_sld*3]
	$c := %second_note_accidental[2 + $root_note_sld*3]
	select ($root_note_sld)
		case 0 {C}
			set_menu_item_str(get_ui_id($note_1_menu),0,!note_names_simple[1] & !accidental_names[$a])
			set_menu_item_str(get_ui_id($note_1_menu),1,!note_names_simple[1] & !accidental_names[$b])
			set_menu_item_str(get_ui_id($note_1_menu),2,!note_names_simple[1] & !accidental_names[$c])
		case 1 {C#}
			set_menu_item_str(get_ui_id($note_1_menu),0,!note_names_simple[1] & !accidental_names[$a])
			set_menu_item_str(get_ui_id($note_1_menu),1,!note_names_simple[1] & !accidental_names[$b])
			set_menu_item_str(get_ui_id($note_1_menu),2,!note_names_simple[2] & !accidental_names[$c])
		case 2 {D}
			set_menu_item_str(get_ui_id($note_1_menu),0,!note_names_simple[2] & !accidental_names[$a])
			set_menu_item_str(get_ui_id($note_1_menu),1,!note_names_simple[2] & !accidental_names[$b])
			set_menu_item_str(get_ui_id($note_1_menu),2,!note_names_simple[3] & !accidental_names[$c])
		case 3 {Eb}
			set_menu_item_str(get_ui_id($note_1_menu),0,!note_names_simple[2] & !accidental_names[$a])
			set_menu_item_str(get_ui_id($note_1_menu),1,!note_names_simple[3] & !accidental_names[$b])
			set_menu_item_str(get_ui_id($note_1_menu),2,!note_names_simple[3] & !accidental_names[$c])
		case 4 {E}
			set_menu_item_str(get_ui_id($note_1_menu),0,!note_names_simple[3] & !accidental_names[$a])
			set_menu_item_str(get_ui_id($note_1_menu),1,!note_names_simple[3] & !accidental_names[$b])
			set_menu_item_str(get_ui_id($note_1_menu),2,!note_names_simple[4] & !accidental_names[$c])
		case 5 {F}
			set_menu_item_str(get_ui_id($note_1_menu),0,!note_names_simple[4] & !accidental_names[$a])
			set_menu_item_str(get_ui_id($note_1_menu),1,!note_names_simple[4] & !accidental_names[$b])
			set_menu_item_str(get_ui_id($note_1_menu),2,!note_names_simple[4] & !accidental_names[$c])
		case 6 {F#}
			set_menu_item_str(get_ui_id($note_1_menu),0,!note_names_simple[4] & !accidental_names[$a])
			set_menu_item_str(get_ui_id($note_1_menu),1,!note_names_simple[4] & !accidental_names[$b])
			set_menu_item_str(get_ui_id($note_1_menu),2,!note_names_simple[5] & !accidental_names[$c])
		case 7 {G}
			set_menu_item_str(get_ui_id($note_1_menu),0,!note_names_simple[5] & !accidental_names[$a])
			set_menu_item_str(get_ui_id($note_1_menu),1,!note_names_simple[5] & !accidental_names[$b])
			set_menu_item_str(get_ui_id($note_1_menu),2,!note_names_simple[5] & !accidental_names[$c])
		case 8 {Ab}
			set_menu_item_str(get_ui_id($note_1_menu),0,!note_names_simple[5] & !accidental_names[$a])
			set_menu_item_str(get_ui_id($note_1_menu),1,!note_names_simple[6] & !accidental_names[$b])
			set_menu_item_str(get_ui_id($note_1_menu),2,!note_names_simple[6] & !accidental_names[$c])
		case 9 {A}
			set_menu_item_str(get_ui_id($note_1_menu),0,!note_names_simple[6] & !accidental_names[$a])
			set_menu_item_str(get_ui_id($note_1_menu),1,!note_names_simple[6] & !accidental_names[$b])
			set_menu_item_str(get_ui_id($note_1_menu),2,!note_names_simple[0] & !accidental_names[$c])
		case 10 {Bb}
			set_menu_item_str(get_ui_id($note_1_menu),0,!note_names_simple[6] & !accidental_names[$a])
			set_menu_item_str(get_ui_id($note_1_menu),1,!note_names_simple[0] & !accidental_names[$b])
			set_menu_item_str(get_ui_id($note_1_menu),2,!note_names_simple[0] & !accidental_names[$c])
		case 11 {B}
			set_menu_item_str(get_ui_id($note_1_menu),0,!note_names_simple[0] & !accidental_names[$a])
			set_menu_item_str(get_ui_id($note_1_menu),1,!note_names_simple[0] & !accidental_names[$b])
			set_menu_item_str(get_ui_id($note_1_menu),2,!note_names_simple[1] & !accidental_names[$c])
	end select
	
	{third}
	$a := %third_note_accidental[0 + $root_note_sld*3]
	$b := %third_note_accidental[1 + $root_note_sld*3]
	$c := %third_note_accidental[2 + $root_note_sld*3]
	select ($root_note_sld)
		case 0 {C}
			set_menu_item_str(get_ui_id($note_2_menu),0,!note_names_simple[1] & !accidental_names[$a])
			set_menu_item_str(get_ui_id($note_2_menu),1,!note_names_simple[2] & !accidental_names[$b])
			set_menu_item_str(get_ui_id($note_2_menu),2,!note_names_simple[2] & !accidental_names[$c])
			
		case 1 {C#}
			set_menu_item_str(get_ui_id($note_2_menu),0,!note_names_simple[2] & !accidental_names[$a])
			set_menu_item_str(get_ui_id($note_2_menu),1,!note_names_simple[2] & !accidental_names[$b])
			set_menu_item_str(get_ui_id($note_2_menu),2,!note_names_simple[3] & !accidental_names[$c])
			
		case 2 {D}
			set_menu_item_str(get_ui_id($note_2_menu),0,!note_names_simple[2] & !accidental_names[$a])
			set_menu_item_str(get_ui_id($note_2_menu),1,!note_names_simple[3] & !accidental_names[$b])
			set_menu_item_str(get_ui_id($note_2_menu),2,!note_names_simple[3] & !accidental_names[$c])
			
		case 3 {Eb}
			set_menu_item_str(get_ui_id($note_2_menu),0,!note_names_simple[3] & !accidental_names[$a])
			set_menu_item_str(get_ui_id($note_2_menu),1,!note_names_simple[4] & !accidental_names[$b])
			set_menu_item_str(get_ui_id($note_2_menu),2,!note_names_simple[4] & !accidental_names[$c])
			
		case 4 {E}
			set_menu_item_str(get_ui_id($note_2_menu),0,!note_names_simple[4] & !accidental_names[$a])
			set_menu_item_str(get_ui_id($note_2_menu),1,!note_names_simple[4] & !accidental_names[$b])
			set_menu_item_str(get_ui_id($note_2_menu),2,!note_names_simple[4] & !accidental_names[$c])
			
		case 5 {F}
			set_menu_item_str(get_ui_id($note_2_menu),0,!note_names_simple[4] & !accidental_names[$a])
			set_menu_item_str(get_ui_id($note_2_menu),1,!note_names_simple[5] & !accidental_names[$b])
			set_menu_item_str(get_ui_id($note_2_menu),2,!note_names_simple[5] & !accidental_names[$c])
			
		case 6 {F#}
			set_menu_item_str(get_ui_id($note_2_menu),0,!note_names_simple[5] & !accidental_names[$a])
			set_menu_item_str(get_ui_id($note_2_menu),1,!note_names_simple[5] & !accidental_names[$b])
			set_menu_item_str(get_ui_id($note_2_menu),2,!note_names_simple[5] & !accidental_names[$c])
			
		case 7 {G}
			set_menu_item_str(get_ui_id($note_2_menu),0,!note_names_simple[5] & !accidental_names[$a])
			set_menu_item_str(get_ui_id($note_2_menu),1,!note_names_simple[6] & !accidental_names[$b])
			set_menu_item_str(get_ui_id($note_2_menu),2,!note_names_simple[6] & !accidental_names[$c])
			
		case 8 {Ab}
			set_menu_item_str(get_ui_id($note_2_menu),0,!note_names_simple[6] & !accidental_names[$a])
			set_menu_item_str(get_ui_id($note_2_menu),1,!note_names_simple[6] & !accidental_names[$b])
			set_menu_item_str(get_ui_id($note_2_menu),2,!note_names_simple[0] & !accidental_names[$c])
			
		case 9 {A}
			set_menu_item_str(get_ui_id($note_2_menu),0,!note_names_simple[6] & !accidental_names[$a])
			set_menu_item_str(get_ui_id($note_2_menu),1,!note_names_simple[0] & !accidental_names[$b])
			set_menu_item_str(get_ui_id($note_2_menu),2,!note_names_simple[0] & !accidental_names[$c])
			
		case 10 {Bb}
			set_menu_item_str(get_ui_id($note_2_menu),0,!note_names_simple[0] & !accidental_names[$a])
			set_menu_item_str(get_ui_id($note_2_menu),1,!note_names_simple[1] & !accidental_names[$b])
			set_menu_item_str(get_ui_id($note_2_menu),2,!note_names_simple[1] & !accidental_names[$c])
			
		case 11 {B}
			set_menu_item_str(get_ui_id($note_2_menu),0,!note_names_simple[1] & !accidental_names[$a])
			set_menu_item_str(get_ui_id($note_2_menu),1,!note_names_simple[1] & !accidental_names[$b])
			set_menu_item_str(get_ui_id($note_2_menu),2,!note_names_simple[1] & !accidental_names[$c])
			
	end select
	
	{fourth}
	$a := %fourth_note_accidental[0 + $root_note_sld*2]
	$b := %fourth_note_accidental[1 + $root_note_sld*2]
	select ($root_note_sld)
		case 0  {C}
			set_menu_item_str(get_ui_id($note_3_menu),0,!note_names_simple[3] & !accidental_names[$a])
			set_menu_item_str(get_ui_id($note_3_menu),1,!note_names_simple[3] & !accidental_names[$b])
		case 1 {C#}
			set_menu_item_str(get_ui_id($note_3_menu),0,!note_names_simple[3] & !accidental_names[$a])
			set_menu_item_str(get_ui_id($note_3_menu),1,!note_names_simple[4] & !accidental_names[$b])
		case 2 {D}
			set_menu_item_str(get_ui_id($note_3_menu),0,!note_names_simple[4] & !accidental_names[$a])
			set_menu_item_str(get_ui_id($note_3_menu),1,!note_names_simple[4] & !accidental_names[$b])
		case 3 to 4{Eb and E}
			set_menu_item_str(get_ui_id($note_3_menu),0,!note_names_simple[5] & !accidental_names[$a])
			set_menu_item_str(get_ui_id($note_3_menu),1,!note_names_simple[5] & !accidental_names[$b])
		case 5 {F}
			set_menu_item_str(get_ui_id($note_3_menu),0,!note_names_simple[6] & !accidental_names[$a])
			set_menu_item_str(get_ui_id($note_3_menu),1,!note_names_simple[6] & !accidental_names[$b])
		case 6 {F#}
			set_menu_item_str(get_ui_id($note_3_menu),0,!note_names_simple[6] & !accidental_names[$a])
			set_menu_item_str(get_ui_id($note_3_menu),1,!note_names_simple[0] & !accidental_names[$b])
		case 7 {G}
			set_menu_item_str(get_ui_id($note_3_menu),0,!note_names_simple[0] & !accidental_names[$a])
			set_menu_item_str(get_ui_id($note_3_menu),1,!note_names_simple[0] & !accidental_names[$b])
		case 8 to 9 {Ab and A}
			set_menu_item_str(get_ui_id($note_3_menu),0,!note_names_simple[1] & !accidental_names[$a])
			set_menu_item_str(get_ui_id($note_3_menu),1,!note_names_simple[1] & !accidental_names[$b])
		case 10 {Bb}
			set_menu_item_str(get_ui_id($note_3_menu),0,!note_names_simple[2] & !accidental_names[$a])
			set_menu_item_str(get_ui_id($note_3_menu),1,!note_names_simple[2] & !accidental_names[$b])
		case 11 {B}
			set_menu_item_str(get_ui_id($note_3_menu),0,!note_names_simple[2] & !accidental_names[$a])
			set_menu_item_str(get_ui_id($note_3_menu),1,!note_names_simple[3] & !accidental_names[$b])
	end select
	
	{sixth}
	$a := %sixth_note_accidental[0 + $root_note_sld*3]
	$b := %sixth_note_accidental[1 + $root_note_sld*3]
	$c := %sixth_note_accidental[2 + $root_note_sld*3]
	select ($root_note_sld)
		case 0 {C}
			set_menu_item_str(get_ui_id($note_5_menu),0,!note_names_simple[5] & !accidental_names[$a])
			set_menu_item_str(get_ui_id($note_5_menu),1,!note_names_simple[5] & !accidental_names[$b])
			set_menu_item_str(get_ui_id($note_5_menu),2,!note_names_simple[5] & !accidental_names[$c])
		case 1 {C#}
			set_menu_item_str(get_ui_id($note_5_menu),0,!note_names_simple[5] & !accidental_names[$a])
			set_menu_item_str(get_ui_id($note_5_menu),1,!note_names_simple[5] & !accidental_names[$b])
			set_menu_item_str(get_ui_id($note_5_menu),2,!note_names_simple[6] & !accidental_names[$c])
		case 2 {D}
			set_menu_item_str(get_ui_id($note_5_menu),0,!note_names_simple[6] & !accidental_names[$a])
			set_menu_item_str(get_ui_id($note_5_menu),1,!note_names_simple[6] & !accidental_names[$b])
			set_menu_item_str(get_ui_id($note_5_menu),2,!note_names_simple[0] & !accidental_names[$c])
		case 3 {Eb}
			set_menu_item_str(get_ui_id($note_5_menu),0,!note_names_simple[6] & !accidental_names[$a])
			set_menu_item_str(get_ui_id($note_5_menu),1,!note_names_simple[0] & !accidental_names[$b])
			set_menu_item_str(get_ui_id($note_5_menu),2,!note_names_simple[0] & !accidental_names[$c])
		case 4 {E}
			set_menu_item_str(get_ui_id($note_5_menu),0,!note_names_simple[0] & !accidental_names[$a])
			set_menu_item_str(get_ui_id($note_5_menu),1,!note_names_simple[0] & !accidental_names[$b])
			set_menu_item_str(get_ui_id($note_5_menu),2,!note_names_simple[1] & !accidental_names[$c])
		case 5 {F}
			set_menu_item_str(get_ui_id($note_5_menu),0,!note_names_simple[1] & !accidental_names[$a])
			set_menu_item_str(get_ui_id($note_5_menu),1,!note_names_simple[1] & !accidental_names[$b])
			set_menu_item_str(get_ui_id($note_5_menu),2,!note_names_simple[1] & !accidental_names[$c])
		case 6 {F#}
			set_menu_item_str(get_ui_id($note_5_menu),0,!note_names_simple[1] & !accidental_names[$a])
			set_menu_item_str(get_ui_id($note_5_menu),1,!note_names_simple[1] & !accidental_names[$b])
			set_menu_item_str(get_ui_id($note_5_menu),2,!note_names_simple[2] & !accidental_names[$c])
		case 7 {G}
			set_menu_item_str(get_ui_id($note_5_menu),0,!note_names_simple[2] & !accidental_names[$a])
			set_menu_item_str(get_ui_id($note_5_menu),1,!note_names_simple[2] & !accidental_names[$b])
			set_menu_item_str(get_ui_id($note_5_menu),2,!note_names_simple[3] & !accidental_names[$c])
		case 8 {Ab}
			set_menu_item_str(get_ui_id($note_5_menu),0,!note_names_simple[2] & !accidental_names[$a])
			set_menu_item_str(get_ui_id($note_5_menu),1,!note_names_simple[3] & !accidental_names[$b])
			set_menu_item_str(get_ui_id($note_5_menu),2,!note_names_simple[3] & !accidental_names[$c])
		case 9 {A}
			set_menu_item_str(get_ui_id($note_5_menu),0,!note_names_simple[3] & !accidental_names[$a])
			set_menu_item_str(get_ui_id($note_5_menu),1,!note_names_simple[3] & !accidental_names[$b])
			set_menu_item_str(get_ui_id($note_5_menu),2,!note_names_simple[4] & !accidental_names[$c])
		case 10 {Bb}
			set_menu_item_str(get_ui_id($note_5_menu),0,!note_names_simple[4] & !accidental_names[$a])
			set_menu_item_str(get_ui_id($note_5_menu),1,!note_names_simple[4] & !accidental_names[$b])
			set_menu_item_str(get_ui_id($note_5_menu),2,!note_names_simple[4] & !accidental_names[$c])
		case 11 {B}
			set_menu_item_str(get_ui_id($note_5_menu),0,!note_names_simple[4] & !accidental_names[$a])
			set_menu_item_str(get_ui_id($note_5_menu),1,!note_names_simple[4] & !accidental_names[$b])
			set_menu_item_str(get_ui_id($note_5_menu),2,!note_names_simple[5] & !accidental_names[$c])
	end select
	
	{seventh}
	$a := %seventh_note_accidental[0 + $root_note_sld*3]
	$b := %seventh_note_accidental[1 + $root_note_sld*3]
	$c := %seventh_note_accidental[2 + $root_note_sld*3]
	select ($root_note_sld)
		case 0 {C}
			set_menu_item_str(get_ui_id($note_6_menu),0,!note_names_simple[5] & !accidental_names[$a])
			set_menu_item_str(get_ui_id($note_6_menu),1,!note_names_simple[6] & !accidental_names[$b])
			set_menu_item_str(get_ui_id($note_6_menu),2,!note_names_simple[6] & !accidental_names[$c])
		case 1 {C#}
			set_menu_item_str(get_ui_id($note_6_menu),0,!note_names_simple[6] & !accidental_names[$a])
			set_menu_item_str(get_ui_id($note_6_menu),1,!note_names_simple[6] & !accidental_names[$b])
			set_menu_item_str(get_ui_id($note_6_menu),2,!note_names_simple[0] & !accidental_names[$c])
		case 2 {D}
			set_menu_item_str(get_ui_id($note_6_menu),0,!note_names_simple[6] & !accidental_names[$a])
			set_menu_item_str(get_ui_id($note_6_menu),1,!note_names_simple[0] & !accidental_names[$b])
			set_menu_item_str(get_ui_id($note_6_menu),2,!note_names_simple[0] & !accidental_names[$c])
		case 3 {Eb}
			set_menu_item_str(get_ui_id($note_6_menu),0,!note_names_simple[0] & !accidental_names[$a])
			set_menu_item_str(get_ui_id($note_6_menu),1,!note_names_simple[1] & !accidental_names[$b])
			set_menu_item_str(get_ui_id($note_6_menu),2,!note_names_simple[1] & !accidental_names[$c])
		case 4 {E}
			set_menu_item_str(get_ui_id($note_6_menu),0,!note_names_simple[1] & !accidental_names[$a])
			set_menu_item_str(get_ui_id($note_6_menu),1,!note_names_simple[1] & !accidental_names[$b])
			set_menu_item_str(get_ui_id($note_6_menu),2,!note_names_simple[1] & !accidental_names[$c])
		case 5 {F}
			set_menu_item_str(get_ui_id($note_6_menu),0,!note_names_simple[1] & !accidental_names[$a])
			set_menu_item_str(get_ui_id($note_6_menu),1,!note_names_simple[2] & !accidental_names[$b])
			set_menu_item_str(get_ui_id($note_6_menu),2,!note_names_simple[2] & !accidental_names[$c])
		case 6 {F#}
			set_menu_item_str(get_ui_id($note_6_menu),0,!note_names_simple[2] & !accidental_names[$a])
			set_menu_item_str(get_ui_id($note_6_menu),1,!note_names_simple[2] & !accidental_names[$b])
			set_menu_item_str(get_ui_id($note_6_menu),2,!note_names_simple[3] & !accidental_names[$c])
		case 7 {G}
			set_menu_item_str(get_ui_id($note_6_menu),0,!note_names_simple[2] & !accidental_names[$a])
			set_menu_item_str(get_ui_id($note_6_menu),1,!note_names_simple[3] & !accidental_names[$b])
			set_menu_item_str(get_ui_id($note_6_menu),2,!note_names_simple[3] & !accidental_names[$c])
		case 8 {Ab}
			set_menu_item_str(get_ui_id($note_6_menu),0,!note_names_simple[3] & !accidental_names[$a])
			set_menu_item_str(get_ui_id($note_6_menu),1,!note_names_simple[4] & !accidental_names[$b])
			set_menu_item_str(get_ui_id($note_6_menu),2,!note_names_simple[4] & !accidental_names[$c])
		case 9 {A}
			set_menu_item_str(get_ui_id($note_6_menu),0,!note_names_simple[4] & !accidental_names[$a])
			set_menu_item_str(get_ui_id($note_6_menu),1,!note_names_simple[4] & !accidental_names[$b])
			set_menu_item_str(get_ui_id($note_6_menu),2,!note_names_simple[4] & !accidental_names[$c])
		case 10 {Bb}
			set_menu_item_str(get_ui_id($note_6_menu),0,!note_names_simple[4] & !accidental_names[$a])
			set_menu_item_str(get_ui_id($note_6_menu),1,!note_names_simple[5] & !accidental_names[$b])
			set_menu_item_str(get_ui_id($note_6_menu),2,!note_names_simple[5] & !accidental_names[$c])
		case 11 {B}
			set_menu_item_str(get_ui_id($note_6_menu),0,!note_names_simple[5] & !accidental_names[$a])
			set_menu_item_str(get_ui_id($note_6_menu),1,!note_names_simple[5] & !accidental_names[$b])
			set_menu_item_str(get_ui_id($note_6_menu),2,!note_names_simple[5] & !accidental_names[$c])
	end select
	
	
	{NOTE HEADS}
	
	{reset noteheads}
	$count := 0
	while ($count < num_elements(%notehead_label_ids))
		set_control_par(%notehead_label_ids[$count],$CONTROL_PAR_PICTURE_STATE,0)
		inc($count)
	end while
	
	{aux line}
	if ($root_note_sld <= 1)
		set_control_par(%notehead_label_ids[0],$CONTROL_PAR_PICTURE_STATE,6)
	end if
	
	if ($root_note_sld >= 10)
		set_control_par(%notehead_label_ids[6],$CONTROL_PAR_PICTURE_STATE,6)
	end if
	
	{highlight note}
	$a := get_control_par(%notehead_label_ids[$selected_tab],$CONTROL_PAR_PICTURE_STATE)
	set_control_par(%notehead_label_ids[$selected_tab],$CONTROL_PAR_PICTURE_STATE,$a+3)
	
	{apply accidentals for root note and fifth}
	$a := get_control_par(%notehead_label_ids[0],$CONTROL_PAR_PICTURE_STATE)
	set_control_par(%notehead_label_ids[0],$CONTROL_PAR_PICTURE_STATE,$a + %root_note_accidental[$root_note_sld])
	
	$a := get_control_par(%notehead_label_ids[4],$CONTROL_PAR_PICTURE_STATE)
	set_control_par(%notehead_label_ids[4],$CONTROL_PAR_PICTURE_STATE,$a + %fifth_accidental[$root_note_sld])
	
	{apply accidentals for all other notes}
	
	{2nd}
	$a := get_control_par(%notehead_label_ids[1],$CONTROL_PAR_PICTURE_STATE)
	$b := %second_note_accidental[$note_1_menu + $root_note_sld*3]
	set_control_par(%notehead_label_ids[1],$CONTROL_PAR_PICTURE_STATE,$a+$b)
	
	{3rd}
	$a := get_control_par(%notehead_label_ids[2],$CONTROL_PAR_PICTURE_STATE)
	$b := %third_note_accidental[$note_2_menu + $root_note_sld*3]
	set_control_par(%notehead_label_ids[2],$CONTROL_PAR_PICTURE_STATE,$a+$b)
	
	{4th}
	$a := get_control_par(%notehead_label_ids[3],$CONTROL_PAR_PICTURE_STATE)
	$b := %fourth_note_accidental[$note_3_menu + $root_note_sld*2]
	set_control_par(%notehead_label_ids[3],$CONTROL_PAR_PICTURE_STATE,$a+$b)
	
	{6th}
	$a := get_control_par(%notehead_label_ids[5],$CONTROL_PAR_PICTURE_STATE)
	$b := %sixth_note_accidental[$note_5_menu + $root_note_sld*3]
	set_control_par(%notehead_label_ids[5],$CONTROL_PAR_PICTURE_STATE,$a+$b)
	
	{7th}
	$a := get_control_par(%notehead_label_ids[6],$CONTROL_PAR_PICTURE_STATE)
	$b := %seventh_note_accidental[$note_6_menu + $root_note_sld*3]
	set_control_par(%notehead_label_ids[6],$CONTROL_PAR_PICTURE_STATE,$a+$b)
	
	{position noteheads}
	$count := 0
	while ($count < num_elements(%notehead_label_ids))
	
		select ($root_note_sld)
		
			case 0 to 1 {c and c#}
				set_control_par(%notehead_label_ids[$count],$CONTROL_PAR_POS_Y,122 -    %notehead_pos_y[(0*7) + $count])
			case 2 {d}
				set_control_par(%notehead_label_ids[$count],$CONTROL_PAR_POS_Y,122-4 -  %notehead_pos_y[(1*7) + $count])
			case 3 to 4{eb and 4}
				set_control_par(%notehead_label_ids[$count],$CONTROL_PAR_POS_Y,122-7 -  %notehead_pos_y[(2*7) + $count])
			case 5 to 6 {f and f#}
				set_control_par(%notehead_label_ids[$count],$CONTROL_PAR_POS_Y,122-11 - %notehead_pos_y[(3*7) + $count])
			case 7 {g}
				set_control_par(%notehead_label_ids[$count],$CONTROL_PAR_POS_Y,122-14 - %notehead_pos_y[(4*7) + $count])
			case 8 to 9 {Ab and A}
				set_control_par(%notehead_label_ids[$count],$CONTROL_PAR_POS_Y,122-18 - %notehead_pos_y[(5*7) + $count])
			case 10 to 11 {Bb and B}
				set_control_par(%notehead_label_ids[$count],$CONTROL_PAR_POS_Y,122-21 - %notehead_pos_y[(6*7) + $count])
			
			
		end select
		
		inc($count)
		
	end while
	
	{EXCEPTIONS}
	
	if ($root_note_sld = 0) {C}
		
		if ($note_2_menu = 0) {D}
			set_control_par(%notehead_label_ids[2],$CONTROL_PAR_POS_Y,122 - %notehead_pos_y[(0*7) + 1])
		end if
		
		if ($note_6_menu = 0) {A}
			set_control_par(%notehead_label_ids[6],$CONTROL_PAR_POS_Y,122 - %notehead_pos_y[(0*7) + 5])
		end if
	
	end if
	
	if ($root_note_sld = 1) {C#}
		
		if ($note_1_menu = 2) {E}
			set_control_par(%notehead_label_ids[1],$CONTROL_PAR_POS_Y,122 - %notehead_pos_y[(0*7) + 2])
		end if
		
		if ($note_2_menu = 2) {F}
			set_control_par(%notehead_label_ids[2],$CONTROL_PAR_POS_Y,122 - %notehead_pos_y[(0*7) + 3])
		end if
		
		if ($note_3_menu = 1) {G}
			set_control_par(%notehead_label_ids[3],$CONTROL_PAR_POS_Y,122 - %notehead_pos_y[(0*7) + 4])
		end if
		
		if ($note_5_menu = 2) {B}
			set_control_par(%notehead_label_ids[5],$CONTROL_PAR_POS_Y,122 - %notehead_pos_y[(0*7) + 6])
		end if
		
		if ($note_6_menu = 2) {C}
			set_control_par(%notehead_label_ids[6],$CONTROL_PAR_POS_Y,122 - %notehead_pos_y[(0*7) + 6] - 4)
		end if
	
	end if
	
	if ($root_note_sld = 2) {D}
		
		if ($note_1_menu = 2) {F}
			set_control_par(%notehead_label_ids[1],$CONTROL_PAR_POS_Y,122 - %notehead_pos_y[(1*7) + 3])
		end if
		
		if ($note_2_menu = 0) {E}
			set_control_par(%notehead_label_ids[2],$CONTROL_PAR_POS_Y,122 - %notehead_pos_y[(1*7) + 2])
		end if
		
		
		if ($note_5_menu = 2) {C}
			set_control_par(%notehead_label_ids[5],$CONTROL_PAR_POS_Y,122 - %notehead_pos_y[(1*7) + 6] - 4)
		end if
		
		if ($note_6_menu = 0) {B}
			set_control_par(%notehead_label_ids[6],$CONTROL_PAR_POS_Y,122 - %notehead_pos_y[(1*7) + 6])
		end if
	
	end if
	
	if ($root_note_sld = 3) {Eb}
		
		if ($note_1_menu = 0) {E}
			set_control_par(%notehead_label_ids[1],$CONTROL_PAR_POS_Y,122 - %notehead_pos_y[(2*7) + 2])
		end if
		
		if ($note_2_menu = 0) {F}
			set_control_par(%notehead_label_ids[2],$CONTROL_PAR_POS_Y,122 - %notehead_pos_y[(2*7) + 3])
		end if
		
		if ($note_5_menu = 0) {B}
			set_control_par(%notehead_label_ids[5],$CONTROL_PAR_POS_Y,122 - %notehead_pos_y[(2*7) + 6])
		end if
		
		if ($note_6_menu = 0) {C}
			set_control_par(%notehead_label_ids[6],$CONTROL_PAR_POS_Y,122 - %notehead_pos_y[(2*7) + 6] - 4)
		end if
	
	end if
	
	if ($root_note_sld = 4) {E}
		
		if ($note_1_menu = 2)
			set_control_par(%notehead_label_ids[1],$CONTROL_PAR_POS_Y,122 - %notehead_pos_y[(2*7) + 4])
		end if
		
		if ($note_5_menu = 2)
			set_control_par(%notehead_label_ids[5],$CONTROL_PAR_POS_Y,122 - %notehead_pos_y[(2*7) + 6] - 7)
		end if
		
	
	end if
	
	
	if ($root_note_sld = 5) {F}
		
		if ($note_2_menu = 0)
			set_control_par(%notehead_label_ids[2],$CONTROL_PAR_POS_Y,122 - %notehead_pos_y[(3*7) + 4])
		end if
		
		if ($note_6_menu = 0)
			set_control_par(%notehead_label_ids[6],$CONTROL_PAR_POS_Y,122 - %notehead_pos_y[(3*7) + 6] - 7)
		end if
	
	end if
	
	if ($root_note_sld = 6) {F#}
		
		if ($note_1_menu = 2)
			set_control_par(%notehead_label_ids[1],$CONTROL_PAR_POS_Y,122 - %notehead_pos_y[(4*7) + 5])
		end if
		
		if ($note_3_menu = 1)
			set_control_par(%notehead_label_ids[3],$CONTROL_PAR_POS_Y,122 - %notehead_pos_y[(4*7) + 6] - 4)
		end if
		
		if ($note_5_menu = 2)
			set_control_par(%notehead_label_ids[5],$CONTROL_PAR_POS_Y,122 - %notehead_pos_y[(4*7) + 6] - 11)
		end if
		
		if ($note_6_menu = 2)
			set_control_par(%notehead_label_ids[6],$CONTROL_PAR_POS_Y,122 - %notehead_pos_y[(4*7) + 6] - 14)
		end if
		
	end if
	
	if ($root_note_sld = 7) {G}
		
		if ($note_2_menu = 0)
			set_control_par(%notehead_label_ids[2],$CONTROL_PAR_POS_Y,122 - %notehead_pos_y[(4*7) + 5])
		end if
		
		if ($note_5_menu = 2)
			set_control_par(%notehead_label_ids[5],$CONTROL_PAR_POS_Y,122 - %notehead_pos_y[(4*7) + 6] - 14)
		end if
		
		if ($note_6_menu = 0)
			set_control_par(%notehead_label_ids[6],$CONTROL_PAR_POS_Y,122 - %notehead_pos_y[(4*7) + 6] - 11)
		end if
		
	end if
	
	if ($root_note_sld = 8) {Ab}
		
		if ($note_1_menu = 0)
			set_control_par(%notehead_label_ids[1],$CONTROL_PAR_POS_Y,122 - %notehead_pos_y[(4*7) + 5])
		end if
		
		if ($note_2_menu = 0)
			set_control_par(%notehead_label_ids[2],$CONTROL_PAR_POS_Y,122 - %notehead_pos_y[(4*7) + 6])
		end if
		
		if ($note_2_menu = 1)
			set_control_par(%notehead_label_ids[2],$CONTROL_PAR_POS_Y,122 - %notehead_pos_y[(4*7) + 6])
		end if
		
		if ($note_5_menu = 0)
			set_control_par(%notehead_label_ids[5],$CONTROL_PAR_POS_Y,122 - %notehead_pos_y[(4*7) + 6] - 11)
		end if
		
		if ($note_6_menu = 0)
			set_control_par(%notehead_label_ids[6],$CONTROL_PAR_POS_Y,122 - %notehead_pos_y[(4*7) + 6] - 14)
		end if
	
	end if
	
	if ($root_note_sld = 9) {A}
		
		if ($note_1_menu = 2)
			set_control_par(%notehead_label_ids[1],$CONTROL_PAR_POS_Y,122 - %notehead_pos_y[(4*7) + 6] - 4)
		end if
		
		if ($note_2_menu = 0)
			set_control_par(%notehead_label_ids[2],$CONTROL_PAR_POS_Y,122 - %notehead_pos_y[(4*7) + 6])
		end if
		
		if ($note_5_menu = 2)
			set_control_par(%notehead_label_ids[5],$CONTROL_PAR_POS_Y,122 - %notehead_pos_y[(4*7) + 6] - 18)
		end if
	
	end if
	
	if ($root_note_sld = 10) {Bb}
		
		if ($note_1_menu = 0)
			set_control_par(%notehead_label_ids[1],$CONTROL_PAR_POS_Y,122 - %notehead_pos_y[(5*7) + 5] - 4)
		end if
		
		if ($note_2_menu = 0)
			set_control_par(%notehead_label_ids[2],$CONTROL_PAR_POS_Y,122 - %notehead_pos_y[(5*7) + 6] - 4)
		end if
		
		if ($note_6_menu = 0)
			set_control_par(%notehead_label_ids[6],$CONTROL_PAR_POS_Y,122 - %notehead_pos_y[(5*7) + 6] - 18)
			
			$a := get_control_par(%notehead_label_ids[6],$CONTROL_PAR_PICTURE_STATE)
			set_control_par(%notehead_label_ids[6],$CONTROL_PAR_PICTURE_STATE,$a-6)
			
		end if
		
	end if
		
	if ($root_note_sld = 11) {B}
			
		if ($note_1_menu = 2)
			set_control_par(%notehead_label_ids[1],$CONTROL_PAR_POS_Y,122 - %notehead_pos_y[(5*7) + 6] - 7)
		end if
			
		if ($note_3_menu = 1)
			set_control_par(%notehead_label_ids[3],$CONTROL_PAR_POS_Y,122 - %notehead_pos_y[(5*7) + 6] - 14)
		end if
		
		
		if ($note_5_menu = 2)
			set_control_par(%notehead_label_ids[5],$CONTROL_PAR_POS_Y,122 - %notehead_pos_y[(5*7) + 6] - 21)
			
			$a := get_control_par(%notehead_label_ids[5],$CONTROL_PAR_PICTURE_STATE)
			set_control_par(%notehead_label_ids[5],$CONTROL_PAR_PICTURE_STATE,$a+6)
			
		end if
	
	end if
	
	
end function {}

function change_tab
	
	{passed variables: $selected_tab}
	
	{toggle functionality}
	$count := 0
	while ($count < num_elements(%tab_btn_ids))
		
		set_control_par(%tab_btn_ids[$count],$CONTROL_PAR_VALUE,0)
		inc($count)
	end while
	set_control_par(%tab_btn_ids[$selected_tab],$CONTROL_PAR_VALUE,1)
	
	
	{note menus}
	{hide all}
	$count := 0
	while ($count < num_elements(%note_menu_ids))
		set_control_par(%note_menu_ids[$count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
		inc($count)
	end while
	
	set_control_par(%note_menu_ids[$selected_tab],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
	
	{ornament menu}
	$note_ornament_menu := %ornaments_data[$selected_tab + $scale_sld*7]
	
	{tuning}
	$note_tune_sld := %tuning_data[$selected_tab + $scale_sld*7]
	
	
	
	call change_noteheads
	
end function {}

{PLAY BUFFER}
function update_play_buffer
	
	{initialize}
	
	$count := 0
	while ($count < num_elements(%play_buffer))
		%play_buffer[$count] := -1
		%alt_play_buffer[$count] := -1
		inc($count)
	end while
	
	{get step duration in sp ticks}
	$step_duration_ticks := 960/4
	
	{update play buffer for tanpura}
	$count := 0
	while ($count < 4)
		
		{position}
		%play_buffer[$count * $NUM_NOTE_PAR + 0] := 960 * $count
		%alt_play_buffer[$count * $NUM_NOTE_PAR + 0] := 960 * $count
		
		{note nr}
		select ($drone_menu)
			
			case 0
				
				%play_buffer[$count * $NUM_NOTE_PAR + 1] := %tanpura_notes_1[$root_note_sld * $NUM_OF_NOTES_TANPURA + $count]
				%alt_play_buffer[$count * $NUM_NOTE_PAR + 1] := %tanpura_notes_1[$root_note_sld * $NUM_OF_NOTES_TANPURA + $count]
				
			case 1
				
				%play_buffer[$count * $NUM_NOTE_PAR + 1] := %tanpura_notes_2[$root_note_sld * $NUM_OF_NOTES_TANPURA + $count]
				%alt_play_buffer[$count * $NUM_NOTE_PAR + 1] := %tanpura_notes_2[$root_note_sld * $NUM_OF_NOTES_TANPURA + $count]
				
			case 2
				
				%play_buffer[$count * $NUM_NOTE_PAR + 1] := %tanpura_notes_3[$root_note_sld * $NUM_OF_NOTES_TANPURA + $count]
				%alt_play_buffer[$count * $NUM_NOTE_PAR + 1] := %tanpura_notes_3[$root_note_sld * $NUM_OF_NOTES_TANPURA + $count]
				
		end select
		
		
		{group}
		%play_buffer[$count * $NUM_NOTE_PAR + 2] := $count
		%alt_play_buffer[$count * $NUM_NOTE_PAR + 2] := $count
		
		
		inc($count)
		
	end while
	
	
	
	
	if ($INSTRUMENT_ID = $TANPURA_ID)
		
		
		if ($inst_1_sld <= 50)
			$value := (($inst_1_sld - 0) * (960 - 1920) / 50) + 1920
		else
			$value := (($inst_1_sld - 50) * (480 - 960) / 50) + 960
		end if

		$count := 0
		while ($count < 4)
			
			{position}
			%fem_play_buffer[$count * $NUM_NOTE_PAR + 0] := $value * $count
			%fem_alt_play_buffer[$count * $NUM_NOTE_PAR + 0] := $value * $count
			
			{note nr}
			select ($drone_menu)
				
				case 0
					
					%fem_play_buffer[$count * $NUM_NOTE_PAR + 1] := %tanpura_notes_1[$root_note_sld * $NUM_OF_NOTES_TANPURA + $count] + 12
					%fem_alt_play_buffer[$count * $NUM_NOTE_PAR + 1] := %tanpura_notes_1[$root_note_sld * $NUM_OF_NOTES_TANPURA + $count] + 12
					
				case 1
					
					%fem_play_buffer[$count * $NUM_NOTE_PAR + 1] := %tanpura_notes_2[$root_note_sld * $NUM_OF_NOTES_TANPURA + $count] + 12
					%fem_alt_play_buffer[$count * $NUM_NOTE_PAR + 1] := %tanpura_notes_2[$root_note_sld * $NUM_OF_NOTES_TANPURA + $count] + 12
					
				case 2
					
					%play_buffer[$count * $NUM_NOTE_PAR + 1] := %tanpura_notes_3[$root_note_sld * $NUM_OF_NOTES_TANPURA + $count]
					%alt_play_buffer[$count * $NUM_NOTE_PAR + 1] := %tanpura_notes_3[$root_note_sld * $NUM_OF_NOTES_TANPURA + $count]
					
			end select
			
			
			{group}
			%fem_play_buffer[$count * $NUM_NOTE_PAR + 2] := $count + 4
			%fem_alt_play_buffer[$count * $NUM_NOTE_PAR + 2] := $count + 4
			
			
			inc($count)
			
		end while
	
	end if
	

end function {}

function change_sync
	
	if ($sync_btn = 1) {host tempo}
		
		{hide arrows}
		set_control_par(get_ui_id($tempo_up_btn),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
		set_control_par(get_ui_id($tempo_down_btn),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
		
		{show arrow labels}
		set_control_par(get_ui_id($tempo_up_lbl),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
		set_control_par(get_ui_id($tempo_down_lbl),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
		
		{show tempo label}
		set_control_par(get_ui_id($tempo_label_course),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
		set_control_par(get_ui_id($tempo_label_fine),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
		
		{hide tempo slider}
		set_control_par(get_ui_id($tempo_drag_course),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
		set_control_par(get_ui_id($tempo_drag_fine),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
		
		
	else {own tempo}
	
		
		{show arrows}
		set_control_par(get_ui_id($tempo_up_btn),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
		set_control_par(get_ui_id($tempo_down_btn),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
		
		{hide arrow labels}
		set_control_par(get_ui_id($tempo_up_lbl),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
		set_control_par(get_ui_id($tempo_down_lbl),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
		
		{hide tempo label}
		set_control_par(get_ui_id($tempo_label_course),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
		set_control_par(get_ui_id($tempo_label_fine),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
		
		{show tempo slider}
		set_control_par(get_ui_id($tempo_drag_course),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
		set_control_par(get_ui_id($tempo_drag_fine),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
		
	end if

end function {}

function change_tempo
	
	{normal time}
	if ($half_time_btn = 0 and $double_time_btn = 0)
	
		if ($sync_btn = 1)
			change_listener_par($NI_SIGNAL_TIMER_BEAT,$TICKS_PER_BEAT)
		else
			change_listener_par($NI_SIGNAL_TIMER_MS,60000000 / $tempo_vedit * 1000 / $TICKS_PER_BEAT / 10)
		end if
		
		{pgs for articulation script}
		pgs_set_key_val(GLOBAL_TIME,0,0)
		
	end if
	
	{half time}
	if ($half_time_btn = 1)
		
		if ($sync_btn = 1)
			change_listener_par($NI_SIGNAL_TIMER_BEAT,$TICKS_PER_BEAT/2)
		else
			change_listener_par($NI_SIGNAL_TIMER_MS,(60000000 / $tempo_vedit * 1000 / $TICKS_PER_BEAT / 10) * 2)
		end if
		
		pgs_set_key_val(GLOBAL_TIME,0,1)
		
	end if
	
	{double time}
	if ($double_time_btn = 1)
	
		if ($sync_btn = 1)
			change_listener_par($NI_SIGNAL_TIMER_BEAT,$TICKS_PER_BEAT*2)
		else
			change_listener_par($NI_SIGNAL_TIMER_MS,(60000000 / $tempo_vedit * 1000 / $TICKS_PER_BEAT / 10) / 2)
		end if
		
		pgs_set_key_val(GLOBAL_TIME,0,2)
		
	end if
	
	pgs_set_key_val(TEMPO,0,$tempo_vedit)
	
end function {}

function start_sequencer
	
	$play_first_beat := 1
	
	$play_btn := 1
	$last_play_btn := $play_btn
	
	$seq_running := 1
	
	if ($sync_btn = 0 or ($sync_btn = 1 and $NI_TRANSPORT_RUNNING = 0))
		if ($phrase_running = 0)
			$sync_position := 0
			$step_counter := 0
			$tick_counter := -1
			$fem_tick_counter := -1
		end if
	else
		$sync_position := 1
	end if
	
	$first := 1
	
	$new_id := play_note(1,1,0,10)
	set_event_par($new_id,$EVENT_PAR_2,1) {1 if sequencer note, 2 if played notes}
	
end function {}

function stop_sequencer

	$play_btn := 0
	$last_play_btn := $play_btn
	
	$seq_running := 0
	
	$new_id := play_note(0,1,0,1000)
	set_event_par($new_id,$EVENT_PAR_2,1) {1 if sequencer note, 2 if played notes}
	
end function {}

function get_tuning_tanpura
	
	select ($tuning_menu)
		
		case 0 {equal}
			$tanpura_tuning := 0
		case 1 {just}
			$tanpura_tuning := %just_tuning_data[($tanpura_played_note + (12-$root_note_sld)) mod 12]
		case 2 {scale}
			$tanpura_tuning := %scale_tuning_data[($tanpura_played_note mod 12) + $scale_sld * 12]
	end select

end function {}

{TICK RECEIVED}
function tick_received
	
	{get tick counter}
	if ($sync_btn = 0 or $sync_position = 0)
		{advance counter}
		inc($tick_counter)
		if ($tick_counter >= $played_pattern_length_ticks)
			$tick_counter := 0
		end if
	else
		{Host Tempo}
		if ($sync_position = 1)
			if ($NI_SONG_POSITION < 0)
				exit
			else
				{normal time}
				if ($half_time_btn = 0 and $double_time_btn = 0)
					$tick_counter := ($NI_SONG_POSITION/(960/($TICKS_PER_BEAT))) mod $played_pattern_length_ticks
				end if
				
				{half time}
				if ($half_time_btn = 1)
					$tick_counter := ($NI_SONG_POSITION/(960/($TICKS_PER_BEAT/2))) mod $played_pattern_length_ticks
				end if
				
				{double time}
				if ($double_time_btn = 1)
					$tick_counter := ($NI_SONG_POSITION/(960/($TICKS_PER_BEAT*2))) mod $played_pattern_length_ticks
				end if
					
			end if
		end if
	end if
	
	{reset $play_first_beat}
	if ($tick_counter > $TICKS_PER_BEAT)
		$play_first_beat := 0
	end if
	
	{alternate play buffer - triggers notes only once and only on position 0}
	if ($tick_counter = 0 and $play_first_beat = 1)
		$play_count := 0
		while (%alt_play_buffer[$play_count * $NUM_NOTE_PAR + 0] = 0 and $play_count < num_elements(%alt_play_buffer) / $NUM_NOTE_PAR)
				
			{randomize onset}
			$tanpura_played_wait := random(0,$randomize_time_abs)
			
			{group}
			$tanpura_played_group := %alt_play_buffer[$play_count * $NUM_NOTE_PAR + 2]
			
			{note}
			$tanpura_played_note := %alt_play_buffer[$play_count * $NUM_NOTE_PAR + 1]
			
			{velocity}
			$tanpura_played_velo := 64

			{tuning}
			call get_tuning_tanpura
			
			{TRIGGER NOTE}
			$new_id := play_note($tanpura_played_note,$tanpura_played_velo,0,$DURATION_SIXTEENTH)
			change_vol($new_id,$tanpura_played_vol,0)
			set_event_par($new_id,$EVENT_PAR_0,$tanpura_played_wait) {delay time}
			set_event_par($new_id,$EVENT_PAR_1,$tanpura_played_group) {group}
			set_event_par($new_id,$EVENT_PAR_2,1) {1 if sequencer note, 2 if played notes}
			set_event_par($new_id,$EVENT_PAR_3,$DURATION_SIXTEENTH) {duration}
			set_event_par($new_id,$EVENT_PAR_TUNE, $tanpura_tuning * 1000) {shruti tuning}
				
			inc($play_count)
	
		end while
	
	end if
			
	
	{play buffer}
	$play_count := 0
	while (%play_buffer[$play_count * $NUM_NOTE_PAR + 0] >= 0  and $play_count < num_elements(%play_buffer) / $NUM_NOTE_PAR)
		
		if (%play_buffer[$play_count * $NUM_NOTE_PAR + 0] / (960/$TICKS_PER_BEAT) = $tick_counter)
			
			{allowed the note per se}
			$trigger_note := 1
			
			{get wait time in ticks, i.e. time between (960/$TICKS_PER_BEAT) ticks grid}
			$tanpura_played_wait := %play_buffer[$play_count * $NUM_NOTE_PAR + 0] mod (960/$TICKS_PER_BEAT)
			{convert to microseconds}
			if ($sync_btn = 0)
				$tanpura_played_wait := $tanpura_played_wait * ((60000000 / $tempo_vedit * 1000 / $TICKS_PER_BEAT / 10) / (960/$TICKS_PER_BEAT))
			else
				$tanpura_played_wait := ticks_to_ms($tanpura_played_wait)
			end if
			{randomize}
			$tanpura_played_wait := $tanpura_played_wait + random(0,$randomize_time_abs)
			
			{get group}
			$tanpura_played_group := %play_buffer[$play_count * $NUM_NOTE_PAR + 2]
			
			{note}
			$tanpura_played_note := %play_buffer[$play_count * $NUM_NOTE_PAR + 1]
			
			{velocity}
			$tanpura_played_velo := 64

			{tuning}
			call get_tuning_tanpura
			
			{TRIGGER NOTE}
			$new_id := play_note($tanpura_played_note,$tanpura_played_velo,0,$DURATION_SIXTEENTH)
			call get_tuning_tanpura
			change_vol($new_id,$tanpura_played_vol,0)
			set_event_par($new_id,$EVENT_PAR_0,$tanpura_played_wait) {delay time}
			set_event_par($new_id,$EVENT_PAR_1,$tanpura_played_group) {group}
			set_event_par($new_id,$EVENT_PAR_2,1) {1 if sequencer note, 2 if played notes}
			set_event_par($new_id,$EVENT_PAR_3,$DURATION_SIXTEENTH) {duration}
			set_event_par($new_id,$EVENT_PAR_TUNE, $tanpura_tuning * 1000) {shruti tuning}
			
		end if
		
		inc($play_count)
		
	end while
	
end function {}

function fem_tick_received
	
	{get tick counter}
	if ($sync_btn = 0 or $sync_position = 0)
		{advance counter}
		inc($fem_tick_counter)
		if ($fem_tick_counter >= $fem_played_pattern_length_ticks)
			$fem_tick_counter := 0
		end if
	else
		{Host Tempo}
		if ($sync_position = 1)
			if ($NI_SONG_POSITION < 0)
				exit
			else
				{normal time}
				if ($half_time_btn = 0 and $double_time_btn = 0)
					$fem_tick_counter := ($NI_SONG_POSITION/(960/($TICKS_PER_BEAT))) mod $fem_played_pattern_length_ticks
				end if
				
				{half time}
				if ($half_time_btn = 1)
					$fem_tick_counter := ($NI_SONG_POSITION/(960/($TICKS_PER_BEAT/2))) mod $fem_played_pattern_length_ticks
				end if
				
				{double time}
				if ($double_time_btn = 1)
					$fem_tick_counter := ($NI_SONG_POSITION/(960/($TICKS_PER_BEAT*2))) mod $fem_played_pattern_length_ticks
				end if
					
			end if
		end if
	end if
	
	{reset $fem_play_first_beat}
	if ($fem_tick_counter > $TICKS_PER_BEAT)
		$fem_play_first_beat := 0
	end if
	
	{alternate play buffer - triggers notes only once and only on position 0}
	if ($fem_tick_counter = 0 and $fem_play_first_beat = 1)
		$fem_play_count := 0
		while (%fem_alt_play_buffer[$fem_play_count * $NUM_NOTE_PAR + 0] = 0 and $fem_play_count < num_elements(%fem_alt_play_buffer) / $NUM_NOTE_PAR)
				
			{randomize onset}
			$fem_tanpura_played_wait := random(0,$randomize_time_abs)
			
			{group}
			$fem_tanpura_played_group := %fem_alt_play_buffer[$fem_play_count * $NUM_NOTE_PAR + 2]
			
			{note}
			$fem_tanpura_played_note := %fem_alt_play_buffer[$fem_play_count * $NUM_NOTE_PAR + 1]
			
			{velocity}
			$fem_tanpura_played_velo := 64
			
			{TRIGGER NOTE}
			$fem_new_id := play_note($fem_tanpura_played_note,$fem_tanpura_played_velo,0,$DURATION_SIXTEENTH)
			change_vol($fem_new_id,$fem_tanpura_played_vol,0)
			set_event_par($fem_new_id,$EVENT_PAR_0,$fem_tanpura_played_wait) {delay time}
			set_event_par($fem_new_id,$EVENT_PAR_1,$fem_tanpura_played_group) {group}
			set_event_par($fem_new_id,$EVENT_PAR_2,1) {1 if sequencer note, 2 if played notes}
			set_event_par($fem_new_id,$EVENT_PAR_3,$DURATION_SIXTEENTH) {duration}
				
			inc($fem_play_count)
	
		end while
	
	end if
			
	
	{play buffer}
	$fem_play_count := 0
	while (%fem_play_buffer[$fem_play_count * $NUM_NOTE_PAR + 0] >= 0  and $fem_play_count < num_elements(%fem_play_buffer) / $NUM_NOTE_PAR)
		
		if (%fem_play_buffer[$fem_play_count * $NUM_NOTE_PAR + 0] / (960/$TICKS_PER_BEAT) = $fem_tick_counter)
			
			{allowed the note per se}
			$trigger_note := 1
			
			{get wait time in ticks, i.e. time between (960/$TICKS_PER_BEAT) ticks grid}
			$fem_tanpura_played_wait := %fem_play_buffer[$fem_play_count * $NUM_NOTE_PAR + 0] mod (960/$TICKS_PER_BEAT)
			{convert to microseconds}
			if ($sync_btn = 0)
				$fem_tanpura_played_wait := $fem_tanpura_played_wait * ((60000000 / $tempo_vedit * 1000 / $TICKS_PER_BEAT / 10) / (960/$TICKS_PER_BEAT))
			else
				$fem_tanpura_played_wait := ticks_to_ms($fem_tanpura_played_wait)
			end if
			{randomize}
			$fem_tanpura_played_wait := $fem_tanpura_played_wait + random(0,$randomize_time_abs)
			
			{get group}
			$fem_tanpura_played_group := %fem_play_buffer[$fem_play_count * $NUM_NOTE_PAR + 2]
			
			{note}
			$fem_tanpura_played_note := %fem_play_buffer[$fem_play_count * $NUM_NOTE_PAR + 1]
			
			{velocity}
			$fem_tanpura_played_velo := 64
			
			{TRIGGER NOTE}
			$new_id := play_note($fem_tanpura_played_note,$fem_tanpura_played_velo,0,$DURATION_SIXTEENTH)
			change_vol($new_id,$fem_tanpura_played_vol,0)
			set_event_par($new_id,$EVENT_PAR_0,$fem_tanpura_played_wait) {delay time}
			set_event_par($new_id,$EVENT_PAR_1,$fem_tanpura_played_group) {group}
			set_event_par($new_id,$EVENT_PAR_2,1) {1 if sequencer note, 2 if played notes}
			set_event_par($new_id,$EVENT_PAR_3,$DURATION_SIXTEENTH) {duration}
			
		end if
		
		inc($fem_play_count)
		
	end while
		
	
	
	
end function {}

{SCALE FUNCTIONS}
function key_color_check
	
	{copy from constrain_to_scale function}
	
	$played_scale_degree_2 := %mapping_helper[$original_note_2 mod 12]
		
		if ($original_note_2 >= 60)
			
			$new_octave_2 := ($original_note_2 - 60) / 12
			
		else
			
			$new_octave_2 := (($original_note_2 - 59) / 12) - 1
			
		end if
		
		{get $semitones_2}
		$semitones_2 := 0
		$count_1 := 0
		$count_2 := 0
		
		while ($count_1 < 12)
			
			if (%scale_data[$scale_sld * 12 + $count_1]  = 0)
				
				if ($count_2 = $played_scale_degree_2)
				
					$semitones_2 := $count_1
					
					$count_1 := 12 {break while loop}
				end if
				
				inc($count_2)
				
			end if
		
			inc($count_1)
			
		end while
		
		if ($root_note_sld <= 6) {if from C to F#}
			$new_note_2 := 60 + ($new_octave_2 * 12) + $semitones_2 + $root_note_sld
		else
			$new_note_2 := 60 + ($new_octave_2 * 12) + $semitones_2 + $root_note_sld - 12
		end if
		
	
end function {}


function change_key_color
	
	{reset}
	$count := 0
	while ($count < 128) 
  		set_key_color($count,$KEY_COLOR_INACTIVE)
  		inc($count)
  	end while
	
	{KEY SWITCHES}
	{white keys}
	$count := 0 
	while ($count < num_elements(%key_switch_notes)) 
		set_key_color(%key_switch_notes[$count],$KEY_COLOR_RED)
		set_key_type(%key_switch_notes[$count],$NI_KEY_TYPE_CONTROL)
		inc($count)
	end while
	
	{black keys}
	$count := 0 
	while ($count < num_elements(%chikari_notes)) 
		set_key_color(%chikari_notes[$count],$CHIKARI_COLOR)
		set_key_type(%chikari_notes[$count],$NI_KEY_TYPE_CONTROL)
		inc($count)
	end while
	
	if ($scale_sld = 0)
		
		{chromatic scale}
		
		$count := $MAPPED_RANGE_MIN
		while ($count < 128)
			
			if (in_range($count,$MAPPED_RANGE_MIN,$MAPPED_RANGE_MAX))
				set_key_color($count,$SCALE_NOTE_COLOR)
			end if
				
			inc($count)
		end while
		
	else
		
		if ($key_mode_menu = 0 or $key_mode_menu = 1) {guide or mapped}
			
			
			$count := 0
			while ($count < 128)
				if (%current_scale[$count mod 12] = 0 and in_range($count,$MAPPED_RANGE_MIN,$MAPPED_RANGE_MAX)) {if incoming note is in scale}
						
					set_key_color($count,$SCALE_NOTE_COLOR)
					
					if ($count mod 12 = $root_note_sld)
						set_key_color($count,$ROOT_NOTE_COLOR)
					end if
					
				end if
				
				inc($count)
			end while
			
		end if
		
		if ($key_mode_menu = 2) {easy}
	
			{get lowest note}
			$count := 0
			while ($count < 128)
				
				if (search(%white_keys,$count mod 12) # -1) {if it's a white key, look if the resulting note is equal or higher then the minimum mapped range}
					
					$original_note_2 := $count
					call key_color_check
					
					if ($new_note_2 >= $MAPPED_RANGE_MIN)
						$low_note := $count
						$count := 128 {breaks while loop}
					end if
				
				end if
				
				inc($count)
				
			end while
			
			{get highest note}
			$count := 127
			while ($count > -1)
				
				if (search(%white_keys,$count mod 12) # -1)
					
					$original_note_2 := $count
					call key_color_check
					
					if ($new_note_2 <= $MAPPED_RANGE_MAX)
						$high_note := $count
						$count := -1 {breaks while loop}
					end if
				
				end if
				
				dec($count)
				
			end while
			
			$count := 0
			while ($count < 128)
				
				if (in_range($count,$low_note,$high_note) and search(%white_keys,$count mod 12) # -1 and in_range($count,$PLAY_RANGE_MIN,$PLAY_RANGE_MAX))
					
					if ($count mod 12 = 0)
						set_key_color($count,$ROOT_NOTE_COLOR)
					else
					
						set_key_color($count,$SCALE_NOTE_COLOR)
					end if
				end if
					
				
				inc($count)
			end while
		
		end if
			
	end if
	
	{reso strings, only sitar}
	if ($INSTRUMENT_ID = $SITAR_ID)
		
		$count := 84
		while ($count <= 96)
			
			if (get_key_color($count-24) = $SCALE_NOTE_COLOR or get_key_color($count-24) = $ROOT_NOTE_COLOR)
				set_key_color($count,$KEY_COLOR_PURPLE)
			end if
			
			inc($count)
		
		end while
	
	end if
		
end function {}

function change_tuning
	
	
	{I}
	%scale_tuning_data[((0 + $root_note_sld) mod 12) + $scale_sld * 12] := %tuning_data[0 + $scale_sld*7]
	
	{II}
	%scale_tuning_data[((1 + $root_note_sld) mod 12) + $scale_sld * 12] := %tuning_data[1 + $scale_sld*7]
	%scale_tuning_data[((2 + $root_note_sld) mod 12) + $scale_sld * 12] := %tuning_data[1 + $scale_sld*7]
	
	{III}
	%scale_tuning_data[((3 + $root_note_sld) mod 12) + $scale_sld * 12] := %tuning_data[2 + $scale_sld*7]
	%scale_tuning_data[((4 + $root_note_sld) mod 12) + $scale_sld * 12] := %tuning_data[2 + $scale_sld*7]
	
	{IV}
	%scale_tuning_data[((5 + $root_note_sld) mod 12) + $scale_sld * 12] := %tuning_data[3 + $scale_sld*7]
	%scale_tuning_data[((6 + $root_note_sld) mod 12) + $scale_sld * 12] := %tuning_data[3 + $scale_sld*7]
	
	
	{V}
	%scale_tuning_data[((7 + $root_note_sld) mod 12) + $scale_sld * 12] := %tuning_data[4 + $scale_sld*7]
	
	{VI}
	%scale_tuning_data[((8 + $root_note_sld) mod 12) + $scale_sld * 12] := %tuning_data[5 + $scale_sld*7]
	%scale_tuning_data[((9 + $root_note_sld) mod 12) + $scale_sld * 12] := %tuning_data[5 + $scale_sld*7]
	
	{VII}
	%scale_tuning_data[((10 + $root_note_sld) mod 12) + $scale_sld * 12] := %tuning_data[6 + $scale_sld*7]
	%scale_tuning_data[((11 + $root_note_sld) mod 12) + $scale_sld * 12] := %tuning_data[6 + $scale_sld*7]

end function {}

function change_scale
	
	{note menus}
	$count := 0
	while ($count < num_elements(%note_menu_ids))
		set_control_par(%note_menu_ids[$count],$CONTROL_PAR_VALUE,%notes_data[$count + $scale_sld*7])
		inc($count)
	
	end while
	
	{ornament menu}
	$note_ornament_menu := %ornaments_data[$selected_tab + $scale_sld*7]
	
	{tuning}
	$note_tune_sld := %tuning_data[$selected_tab + $scale_sld*7]

	
	{copy into %scale_data, 0: in scale, 1: not in scale}
	
	{I}
	%scale_data[0 + $scale_sld * 12] := 0
	
	{0 means in scale}
	
	{II}
	if (%notes_data[1 + $scale_sld*7] = 0) {Db}
		%scale_data[1 + $scale_sld * 12] := 0
		%scale_data[2 + $scale_sld * 12] := 1
	end if
	
	if (%notes_data[1 + $scale_sld*7] = 1) {D}
		%scale_data[1 + $scale_sld * 12] := 1
		%scale_data[2 + $scale_sld * 12] := 0
	end if
	
	if (%notes_data[1 + $scale_sld*7] = 2) {D#}
		%scale_data[1 + $scale_sld * 12] := 1
		%scale_data[2 + $scale_sld * 12] := 1
		%scale_data[3 + $scale_sld * 12] := 0
		%scale_data[4 + $scale_sld * 12] := 0
	end if
	
	
	{III}
	
	if (%notes_data[2 + $scale_sld*7] = 0) {D}
		%scale_data[2 + $scale_sld * 12] := 0
		%scale_data[3 + $scale_sld * 12] := 1
		%scale_data[4 + $scale_sld * 12] := 1
	end if
	
	if (%notes_data[2 + $scale_sld*7] = 1) {Eb}
		%scale_data[3 + $scale_sld * 12] := 0
		%scale_data[4 + $scale_sld * 12] := 1
	end if
	
	if (%notes_data[2 + $scale_sld*7] = 2 and %notes_data[1 + $scale_sld*7] # 2) {E}
		%scale_data[3 + $scale_sld * 12] := 1
		%scale_data[4 + $scale_sld * 12] := 0
	end if
	
	{IV}
	if (%notes_data[3 + $scale_sld*7] = 0) {i.e. F}
		%scale_data[5 + $scale_sld * 12] := 0
		%scale_data[6 + $scale_sld * 12] := 1
	else
		%scale_data[5 + $scale_sld * 12] := 1
		%scale_data[6 + $scale_sld * 12] := 0
	end if
	
	{V}
	%scale_data[7 + $scale_sld * 12] := 0
	
	{VI}
	if (%notes_data[5 + $scale_sld*7] = 0) {Ab}
		%scale_data[8 + $scale_sld * 12] := 0
		%scale_data[9 + $scale_sld * 12] := 1
	end if
	
	if (%notes_data[5 + $scale_sld*7] = 1) {A}
		%scale_data[8 + $scale_sld * 12] := 1
		%scale_data[9 + $scale_sld * 12] := 0
	end if
	
	if (%notes_data[5 + $scale_sld*7] = 2) {A#}
		%scale_data[8  + $scale_sld * 12] := 1
		%scale_data[9  + $scale_sld * 12] := 1
		%scale_data[10 + $scale_sld * 12] := 0
		%scale_data[11 + $scale_sld * 12] := 0
	end if
	
	{VII}
	if (%notes_data[6 + $scale_sld*7] = 0) {0}
		%scale_data[9  + $scale_sld * 12] := 0
		%scale_data[10 + $scale_sld * 12] := 1
		%scale_data[11 + $scale_sld * 12] := 1
	end if
	
	if (%notes_data[6 + $scale_sld*7] = 1) {Bb}
		%scale_data[10 + $scale_sld * 12] := 0
		%scale_data[11 + $scale_sld * 12] := 1
	end if
	
	if (%notes_data[6 + $scale_sld*7] = 2 and %notes_data[5 + $scale_sld*7] # 2) {B}
		%scale_data[10 + $scale_sld * 12] := 1
		%scale_data[11 + $scale_sld * 12] := 0
	end if
	
	
	{copy scale_data to current_scale for constrain to scale functionality}
	$count := 0
	while($count < 12)
		%current_scale[$count] := %scale_data[$scale_sld * 12 + (($count + 12 - $root_note_sld) mod 12)] 
		inc($count)
	end while
	
	
	
	select ($scale_sld)
		case 0
			set_control_par_str(get_ui_id(@pattern_tedit),$CONTROL_PAR_TEXT,@scale_name_0)
			set_control_par_str(get_ui_id($pattern_lbl),$CONTROL_PAR_TEXT,@scale_name_0)
			set_control_par_str(get_ui_id($scale_sld),$CONTROL_PAR_LABEL,"Chrom")
		case 1
			set_control_par_str(get_ui_id(@pattern_tedit),$CONTROL_PAR_TEXT,@scale_name_1)
			set_control_par_str(get_ui_id($pattern_lbl),$CONTROL_PAR_TEXT,@scale_name_1)
			set_control_par_str(get_ui_id($scale_sld),$CONTROL_PAR_LABEL,@scale_name_1)
		case 2
			set_control_par_str(get_ui_id(@pattern_tedit),$CONTROL_PAR_TEXT,@scale_name_2)
			set_control_par_str(get_ui_id($pattern_lbl),$CONTROL_PAR_TEXT,@scale_name_2)
			set_control_par_str(get_ui_id($scale_sld),$CONTROL_PAR_LABEL,@scale_name_2)
		case 3
			set_control_par_str(get_ui_id(@pattern_tedit),$CONTROL_PAR_TEXT,@scale_name_3)
			set_control_par_str(get_ui_id($pattern_lbl),$CONTROL_PAR_TEXT,@scale_name_3)
			set_control_par_str(get_ui_id($scale_sld),$CONTROL_PAR_LABEL,@scale_name_3)
		case 4
			set_control_par_str(get_ui_id(@pattern_tedit),$CONTROL_PAR_TEXT,@scale_name_4)
			set_control_par_str(get_ui_id($pattern_lbl),$CONTROL_PAR_TEXT,@scale_name_4)
			set_control_par_str(get_ui_id($scale_sld),$CONTROL_PAR_LABEL,@scale_name_4)
		case 5
			set_control_par_str(get_ui_id(@pattern_tedit),$CONTROL_PAR_TEXT,@scale_name_5)
			set_control_par_str(get_ui_id($pattern_lbl),$CONTROL_PAR_TEXT,@scale_name_5)
			set_control_par_str(get_ui_id($scale_sld),$CONTROL_PAR_LABEL,@scale_name_5)
		case 6
			set_control_par_str(get_ui_id(@pattern_tedit),$CONTROL_PAR_TEXT,@scale_name_6)
			set_control_par_str(get_ui_id($pattern_lbl),$CONTROL_PAR_TEXT,@scale_name_6)
			set_control_par_str(get_ui_id($scale_sld),$CONTROL_PAR_LABEL,@scale_name_6)
		case 7
			set_control_par_str(get_ui_id(@pattern_tedit),$CONTROL_PAR_TEXT,@scale_name_7)
			set_control_par_str(get_ui_id($pattern_lbl),$CONTROL_PAR_TEXT,@scale_name_7)
			set_control_par_str(get_ui_id($scale_sld),$CONTROL_PAR_LABEL,@scale_name_7)
		case 8
			set_control_par_str(get_ui_id(@pattern_tedit),$CONTROL_PAR_TEXT,@scale_name_8)
			set_control_par_str(get_ui_id($pattern_lbl),$CONTROL_PAR_TEXT,@scale_name_8)
			set_control_par_str(get_ui_id($scale_sld),$CONTROL_PAR_LABEL,@scale_name_8)
		case 9
			set_control_par_str(get_ui_id(@pattern_tedit),$CONTROL_PAR_TEXT,@scale_name_9)
			set_control_par_str(get_ui_id($pattern_lbl),$CONTROL_PAR_TEXT,@scale_name_9)
			set_control_par_str(get_ui_id($scale_sld),$CONTROL_PAR_LABEL,@scale_name_9)
		case 10
			set_control_par_str(get_ui_id(@pattern_tedit),$CONTROL_PAR_TEXT,@scale_name_10)
			set_control_par_str(get_ui_id($pattern_lbl),$CONTROL_PAR_TEXT,@scale_name_10)
			set_control_par_str(get_ui_id($scale_sld),$CONTROL_PAR_LABEL,@scale_name_10)
		case 11
			set_control_par_str(get_ui_id(@pattern_tedit),$CONTROL_PAR_TEXT,@scale_name_11)
			set_control_par_str(get_ui_id($pattern_lbl),$CONTROL_PAR_TEXT,@scale_name_11)
			set_control_par_str(get_ui_id($scale_sld),$CONTROL_PAR_LABEL,@scale_name_11)
	end select
		
	
	
	call change_tuning
	
	call change_noteheads
	
	if ($INSTRUMENT_ID = $TUMBI_ID)
	
		$roll_played_note := 72 + $root_note_sld
		if ($roll_played_note > 77)
			$roll_played_note := $roll_played_note - 12
		end if
	
	end if
	
end function {}

function change_chikari_tuning

	
	{sitar chikari strings}
	set_engine_par($ENGINE_PAR_TUNE,%sitar1_root_data[$root_note_sld],20,-1,-1)
	set_engine_par($ENGINE_PAR_TUNE,%sitar1_root_data[$root_note_sld],20+5,-1,-1)
	set_engine_par($ENGINE_PAR_TUNE,%sitar1_root_data[$root_note_sld],20+10,-1,-1)
	
	set_engine_par($ENGINE_PAR_TUNE,%sitar1_root_data[$root_note_sld],21,-1,-1)
	set_engine_par($ENGINE_PAR_TUNE,%sitar1_root_data[$root_note_sld],21+5,-1,-1)
	set_engine_par($ENGINE_PAR_TUNE,%sitar1_root_data[$root_note_sld],21+10,-1,-1)
	
	set_engine_par($ENGINE_PAR_TUNE,%sitar2_root_data[$root_note_sld],22,-1,-1)
	set_engine_par($ENGINE_PAR_TUNE,%sitar2_root_data[$root_note_sld],22+5,-1,-1)
	set_engine_par($ENGINE_PAR_TUNE,%sitar2_root_data[$root_note_sld],22+10,-1,-1)
	
	set_engine_par($ENGINE_PAR_TUNE,%sitar1_root_data[$root_note_sld],23,-1,-1)
	set_engine_par($ENGINE_PAR_TUNE,%sitar1_root_data[$root_note_sld],23+5,-1,-1)
	set_engine_par($ENGINE_PAR_TUNE,%sitar1_root_data[$root_note_sld],23+10,-1,-1)
	
	set_engine_par($ENGINE_PAR_TUNE,%sitar2_root_data[$root_note_sld],24,-1,-1)
	set_engine_par($ENGINE_PAR_TUNE,%sitar2_root_data[$root_note_sld],24+5,-1,-1)
	set_engine_par($ENGINE_PAR_TUNE,%sitar2_root_data[$root_note_sld],24+10,-1,-1)
	
end function {}

function constrain_to_scale
	
	{turns $original_note to $new_note}
	
	if ($key_mode_menu = 0 or $key_mode_menu = 1) {guide or mapped}
		
		$played_scale_degree := (($original_note mod 12) + 12 - $root_note_sld) mod 12

		if (%current_scale[$original_note mod 12] # 0) {if incoming note is not in scale}
			
			$allow_ornament := 0
			
			if ($key_mode_menu = 0) {guide}
				
				$new_note := $original_note
				
			else {mapped}
			
				select (%map_low_high[$played_scale_degree])
					
					case 0 {lower note}
						
						$count_1 := -1
						while ($count_1 > -12)
							
							if (%current_scale[($original_note + $count_1) mod 12] = 0)
								$new_note := $original_note + $count_1
								
								$count_1 := -100
							end if
							
							dec($count_1)
						end while
						
						case 1 {higher note}
						
						$count_1 := 1
						while ($count_1 < 12)
							
							if (%current_scale[($original_note + $count_1) mod 12] = 0 )
								$new_note := $original_note + $count_1
								
								$count_1 := 100
							end if
							
							inc($count_1)
						end while
						
				end select
			
			end if
		
		else
			$new_note := $original_note
		end if
		
	end if
	
	
	{easy mapping}
	if ($key_mode_menu = 2)
		
		if (search(%white_keys,$original_note mod 12) = -1) {black key was played}
			$allow_ornament := 0
		end if
		
		
		$played_scale_degree := %mapping_helper[$original_note mod 12]
		
		if ($original_note >= 60)
			
			$new_octave := ($original_note - 60) / 12
			
		else
			
			$new_octave := (($original_note - 59) / 12) - 1
			
		end if
		
		{get $semitones}
		$semitones := 0
		$count_1 := 0
		$count_2 := 0
		
		while ($count_1 < 12)
			
			if (%scale_data[$scale_sld * 12 + $count_1]  = 0)
				
				if ($count_2 = $played_scale_degree)
				
					$semitones := $count_1
					
					$count_1 := 12 {break while loop}
				end if
				
				inc($count_2)
				
			end if
		
			inc($count_1)
			
		end while
		
		if ($root_note_sld <= 6) {if from C to F#}
			$new_note := 60 + ($new_octave * 12) + $semitones + $root_note_sld
		else
			$new_note := 60 + ($new_octave * 12) + $semitones + $root_note_sld - 12
		end if
		
	end if
	
	{check mapping}
	$high_note_2 := -1
	$low_note_2 := -1
	
	if ($key_mode_menu = 1)
	
		{check if lowest note is in scale}
		$count := $MAPPED_RANGE_MIN
		while ($count < 128)
			if (%current_scale[$count mod 12] # 0) {if not in scale}
				$low_note_2 := $count
			else
				$count := 128 {breaks while loop}
			end if
			inc($count)
		end while
		
		{check if higest note is in scale}
		$count := $MAPPED_RANGE_MAX
		while ($count > -1)
			if (%current_scale[$count mod 12] # 0) {if not in scale}
				$high_note_2 := $count
			else
				$count := -1 {breaks while loop}
			end if
			dec($count)
		end while
		
		if ($original_note = $low_note_2 or $original_note = $high_note_2)
			$allow_note := 0
		end if
		
	end if
	

end function {}

function update_menu
	
	select ($scale_sld)
		case 0
			@scale_name_0 := @pattern_tedit
		case 1
			@scale_name_1 := @pattern_tedit
		case 2
			@scale_name_2 := @pattern_tedit
		case 3
			@scale_name_3 := @pattern_tedit
		case 4
			@scale_name_4 := @pattern_tedit
		case 5
			@scale_name_5 := @pattern_tedit
		case 6
			@scale_name_6 := @pattern_tedit
		case 7
			@scale_name_7 := @pattern_tedit
		case 8
			@scale_name_8 := @pattern_tedit
		case 9
			@scale_name_9 := @pattern_tedit
		case 10
			@scale_name_10 := @pattern_tedit
		case 11
			@scale_name_11 := @pattern_tedit
	end select
	
	set_menu_item_str(get_ui_id($scale_menu),0,"1: " & @scale_name_0)
	set_menu_item_str(get_ui_id($scale_menu),1,"2: " & @scale_name_1)
	set_menu_item_str(get_ui_id($scale_menu),2,"3: " & @scale_name_2)
	set_menu_item_str(get_ui_id($scale_menu),3,"4: " & @scale_name_3)
	set_menu_item_str(get_ui_id($scale_menu),4,"5: " & @scale_name_4)
	set_menu_item_str(get_ui_id($scale_menu),5,"6: " & @scale_name_5)
	set_menu_item_str(get_ui_id($scale_menu),6,"7: " & @scale_name_6)
	set_menu_item_str(get_ui_id($scale_menu),7,"8: " & @scale_name_7)
	set_menu_item_str(get_ui_id($scale_menu),8,"9: " & @scale_name_8)
	set_menu_item_str(get_ui_id($scale_menu),9,"10: " & @scale_name_9)
	set_menu_item_str(get_ui_id($scale_menu),10,"11: " & @scale_name_10)
	set_menu_item_str(get_ui_id($scale_menu),11,"12: " & @scale_name_11)

end function {}

{PAGE HANDLING}
function show_main_page
	
	set_skin_offset(573*0)
	
	{show normal pattern name}
	set_control_par(get_ui_id(@pattern_tedit),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
	set_control_par(get_ui_id($pattern_lbl),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
	
	{hide seq - noteheads}
	$count := 0
	while ($count < num_elements(%notehead_label_ids))
		set_control_par(%notehead_label_ids[$count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
		inc($count)
	end while
	
	{hide seq - export scale button}
	set_control_par(get_ui_id($export_scale_btn),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
	
	{hide seq - scale tuning}
	$count := 0
	while ($count < num_elements(%note_tuning_ids))
		set_control_par(%note_tuning_ids[$count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
		inc($count)
	end while
	
	
	{hide seq - chromatic label}
	set_control_par(get_ui_id($chromatic_notes_lbl),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
	set_control_par(get_ui_id($chromatic_tabs_lbl),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
	
	{hide seq - tab buttons}
	$count := 0
	while ($count < num_elements(%tab_btn_ids))
		set_control_par(%tab_btn_ids[$count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
		inc($count)
	end while
	
	{hide seq - note menus}
	$count := 0
	while ($count < num_elements(%note_menu_ids))
		set_control_par(%note_menu_ids[$count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
		inc($count)
	end while
	
	{hide seq - browser}
	set_control_par(get_ui_id($file_browser),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
	
	{instrument selector}
	if ($INSTRUMENT_ID = $SITAR_ID or $INSTRUMENT_ID = $TANPURA_ID or $INSTRUMENT_ID = $HARMONIUM_ID or $INSTRUMENT_ID = $TUMBI_ID)
		set_control_par(get_ui_id($inst_0_btn),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
	else
		set_control_par(get_ui_id($inst_0_btn),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
	end if
	
	{inst page}
	$count := 0
	while ($count < num_elements(%inst_page_ids))
		set_control_par(%inst_page_ids[$count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
		inc($count)
	end while
	
	{help page}
	$count := 0
	while ($count < num_elements(%help_page_ids))
		set_control_par(%help_page_ids[$count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
		inc($count)
	end while
	
	{help labels}
	$count := 0
	while ($count < num_elements(%help_label_ids))
		set_control_par(%help_label_ids[$count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
		inc($count)
	end while
	
	{show help button}
	set_control_par(get_ui_id($help_btn),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
	
	{about page}
	set_control_par(get_ui_id($about_lbl),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
	set_control_par(get_ui_id($about_close_btn),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
	
	set_control_par(get_ui_id($about_btn),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
	
	$about_btn := 0
	
end function {}

function show_help_page
	
	call show_main_page
	
	$about_btn := 0
	
	set_skin_offset(573*1)
	
	$count := 0
	while ($count < num_elements(%help_page_ids))
		set_control_par(%help_page_ids[$count],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
		inc($count)
	end while
	
	$count := 0
	while ($count < num_elements(%help_label_ids))
		set_control_par(%help_label_ids[$count],$CONTROL_PAR_HIDE,$HIDE_PART_BG)
		inc($count)
	end while
	
	set_control_par(get_ui_id($articulation_lbl),$CONTROL_PAR_HIDE,$HIDE_PART_BG)
	
	set_control_par(get_ui_id($inst_0_btn),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
	
	
end function {}

function show_seq_page
	
	$help_btn := 0
	$inst_0_btn := 0
	$about_btn := 0
	
	call show_main_page
	
	call change_tab
	
	set_skin_offset(573*2)
	
	{about button}
	set_control_par(get_ui_id($about_btn),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
	
	
	
	if ($scale_sld > 0)
		
		{show seq - export scale button}
		if ($SHOW_EXPORT_BUTTON = 1)
			set_control_par(get_ui_id($export_scale_btn),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
		end if
		
		{show highlighted pattern name}
		set_control_par(get_ui_id(@pattern_tedit),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
		set_control_par(get_ui_id($pattern_lbl),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
		
		{show seq - noteheads}
		$count := 0
		while ($count < num_elements(%notehead_label_ids))
			set_control_par(%notehead_label_ids[$count],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
			inc($count)
		end while
		
		{correct picture state for arrows}
		set_control_par(get_ui_id($note_select_arrow_lbl),$CONTROL_PAR_PICTURE_STATE,0)
		set_control_par(get_ui_id($note_ornament_arrow_lbl),$CONTROL_PAR_PICTURE_STATE,0)
		
		{show seq - tab buttons}
		$count := 0
		while ($count < num_elements(%tab_btn_ids))
			set_control_par(%tab_btn_ids[$count],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
			inc($count)
		end while
		
		
		{show seq - browser}
		set_control_par(get_ui_id($file_browser),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
		
		{show seq - scale tuning}
		$count := 0
		while ($count < num_elements(%note_tuning_ids))
			set_control_par(%note_tuning_ids[$count],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
			inc($count)
		end while
		
		if ($tuning_menu # 2) {if equal or just, show labels instead of buttons}
			set_control_par(get_ui_id($note_tune_up_btn),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
			set_control_par(get_ui_id($note_tune_dn_btn),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
			
			set_control_par(get_ui_id($note_tune_sld),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
			
		else
			set_control_par(get_ui_id($note_tune_up_lbl),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
			set_control_par(get_ui_id($note_tune_dn_lbl),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
			
			set_control_par(get_ui_id($note_tune_lbl),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
		end if
		
		{hide seq - chromatic label}
		set_control_par(get_ui_id($chromatic_notes_lbl),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
		set_control_par(get_ui_id($chromatic_tabs_lbl),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
	
	else
		
		{show seq - chromatic label}
		set_control_par(get_ui_id($chromatic_notes_lbl),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
		set_control_par(get_ui_id($chromatic_tabs_lbl),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
		
		{note menus}
		{hide all}
		$count := 0
		while ($count < num_elements(%note_menu_ids))
			set_control_par(%note_menu_ids[$count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
			inc($count)
		end while
		
		set_control_par(get_ui_id($tuning_menu),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
		set_control_par(get_ui_id($drone_menu),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
		set_control_par(get_ui_id($tuning_menu_arrow_lbl),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
		set_control_par(get_ui_id($drone_menu_arrow_lbl),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
		
		set_control_par(get_ui_id($note_select_arrow_lbl),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
		set_control_par(get_ui_id($note_ornament_arrow_lbl),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
		
		set_control_par(get_ui_id($note_tune_up_lbl),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
		set_control_par(get_ui_id($note_tune_dn_lbl),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
		
		set_control_par(get_ui_id($note_select_arrow_lbl),$CONTROL_PAR_PICTURE_STATE,6)
		set_control_par(get_ui_id($note_ornament_arrow_lbl),$CONTROL_PAR_PICTURE_STATE,6)
		
		
		
	end if
	
	
	
	{hide help button}
	set_control_par(get_ui_id($help_btn),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
	
	{inst button}
	set_control_par(get_ui_id($inst_0_btn),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
	
	
	
	
end function {}

function show_about_page
	
	{show about label}
	set_control_par(get_ui_id($about_lbl),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
	set_control_par(get_ui_id($about_close_btn),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
	
	set_control_par(get_ui_id($inst_0_btn),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
	
end function {}

function show_inst_page
	
	call show_main_page
	
	$about_btn := 0
	
	set_skin_offset(573*3)
	
	set_control_par(get_ui_id($about_btn),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
	
	$count := 0
	while ($count < num_elements(%inst_page_ids))
		set_control_par(%inst_page_ids[$count],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
		inc($count)
	end while
	
	set_control_par(get_ui_id($inst_0_btn),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
	
	if ($INSTRUMENT_ID # $HARMONIUM_ID)
		set_control_par(get_ui_id($inst_2_sld),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
		set_control_par(get_ui_id($inst_2_lbl),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
		set_control_par(get_ui_id($inst_3_lbl),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
		
		set_control_par(get_ui_id($inst_3_menu),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
		set_control_par(get_ui_id($inst_3_arrow_lbl),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
		
	end if
	
end function {}


function get_ornament_notes
	
	if ($scale_sld > 0)
	
		{look HIGHER notes in the scale}
		$count := 1
		$count_1 := 1
		while ($count < 12)
			
			if (%current_scale[($original_pitch_class_tonal + $count + $root_note_sld) mod 12] = 0)
				
				%art_notes_upper[$count_1] := $new_note + $count
				
				if ($count_1 = 3)
					$count := 12
				end if
				
				inc($count_1)
				
			end if
			
			inc($count)
		end while
		
		
		{look for LOWER in the scale}
		$count := -1
		$count_1 := 1
		while ($count > -12)
			
			if (%current_scale[($original_pitch_class_tonal + $count + 12 + $root_note_sld) mod 12] = 0)
				
				%art_notes_lower[$count_1] := $new_note + $count
				
				if ($count_1 = 3)
					$count := -12
				end if
				
				inc($count_1)
				
			end if
			
			dec($count)
		end while
	
	else
		
		%art_notes_lower[1] := $original_note - 1
		%art_notes_upper[1] := $original_note + 1
		%art_notes_lower[2] := $original_note - 3
		%art_notes_upper[2] := $original_note + 3
		%art_notes_lower[3] := $original_note - 5
		%art_notes_upper[3] := $original_note + 5
	
	end if
	
	{get note}
	select ($played_ornament)
		case 1
			$art_note := %art_notes_lower[1]
		case 2
			$art_note := %art_notes_upper[1]
		case 3
			$art_note := %art_notes_lower[2]
		case 4
			$art_note := %art_notes_upper[2]
		case 5
			$art_note := %art_notes_lower[3]
		case 6
			$art_note := %art_notes_upper[3]
		case 7
			$art_note := %art_notes_upper[1]
		case 8
			$art_note := $new_note
	end select
	

end function {}

function get_tuning
	
	select ($tuning_menu)
		
		case 0 {equal}
			$played_tuning := 0
		case 1 {just}
			$played_tuning := %just_tuning_data[($played_note + (12-$root_note_sld)) mod 12]
		case 2 {scale}
			$played_tuning := %scale_tuning_data[($played_note mod 12) + $scale_sld * 12]
	end select
	
	
	
	if ($tuning_menu = 2 and $scale_sld = 0)
		$played_tuning := 0
	end if

end function {}



{ function note_callback }

on note

	ignore_event($EVENT_ID)
	
	{key switch notes}
	if (search(%key_switch_notes,$EVENT_NOTE) >= 0)
		
		$played_key_switch := -1
		%key_switch_down[$EVENT_NOTE] := 1
		
		$played_key_switch := search(%key_switch_notes,$EVENT_NOTE)
		
		exit
		
	end if
	
	{TUMBI - black keys}
	if ($INSTRUMENT_ID = $TUMBI_ID)
		%key_down_tumbi[$EVENT_NOTE] := 1
	end if
	
	if ($INSTRUMENT_ID = $TUMBI_ID and search(%chikari_notes,$EVENT_NOTE) >= 0)
		
		if ($sync_btn = 1)
				wait_ticks(25)
			else
				wait((((6000000/$tempo_vedit)*1000)/960)*26)
			end if
		
		$roll_active_keyswitch := search(%chikari_notes,$EVENT_NOTE)
		
		{get played note if roll is not running}
		if ($roll_running = 1)
			exit
		else
			$roll_running := 1
			
			$roll_played_note := 72 + $root_note_sld
				
			if ($roll_played_note > 77)
				$roll_played_note := $roll_played_note - 12
			end if
			
		end if
		
		
		
		$roll_count := 0
		
			
		while ($roll_running = 1)
			
			$roll_played_note_2 := $roll_played_note + %roll_note_data[($roll_count mod 32) + ($roll_active_keyswitch * 32)]
			
			{if (in_range($roll_played_note_2,$MAPPED_RANGE_MIN,$MAPPED_RANGE_MAX))
				$roll_played_note_2 := $roll_played_note_2
			else
				$roll_played_note_2 := $roll_played_note
			end if}
			
			$roll_played_velo := %roll_velo_data[($roll_count mod 32) + ($roll_active_keyswitch * 32)]
			
			{get stroke}
			
			$roll_played_stroke := $roll_count mod 2
			
			{allow note}
			$roll_allow_note := 1
			
			if ($roll_played_velo = 0)
				$roll_allow_note := 0
			end if
			
			{velocity}
			$roll_played_velo := $roll_played_velo + random(-2,2)
			
			if ($roll_played_velo < 1)
				$roll_played_velo := 1
			end if
			if ($roll_played_velo > 127)
				$roll_played_velo := 127
			end if
			
			{duration}
			if ($sync_btn = 1)
				$roll_duration_sixteenth := $DURATION_SIXTEENTH
			else
				$roll_duration_sixteenth := (6000000/$tempo_vedit/4) * 1000
			end if
			
			$roll_duration_helper := ($inst_1_sld * (($roll_duration_sixteenth/2) - (0)) / 100) + (0)
			
			if ($roll_count mod 2 = 0)
				$roll_played_duration := $roll_duration_sixteenth + $roll_duration_helper
			else
				$roll_played_duration := $roll_duration_sixteenth - $roll_duration_helper
			end if
			
			$roll_dur_percentage := $roll_played_duration*($ROLL_RND_PERCENT*100/100)/100
			$roll_played_duration := random($roll_played_duration-$roll_dur_percentage,$roll_played_duration+$roll_dur_percentage)
			
			{get tuning}
			select ($tuning_menu)
				case 0 {equal}
					$roll_played_tuning := 0
				case 1 {just}
					$roll_played_tuning := %just_tuning_data[($roll_played_note_2 + (12-$root_note_sld)) mod 12]
				case 2 {scale}
					$roll_played_tuning := %scale_tuning_data[($roll_played_note_2 mod 12) + $scale_sld * 12]
			end select
			
			if ($tuning_menu = 2 and $scale_sld = 0)
				$roll_played_tuning := 0
			end if

			
			{trigger roll note}
			if ($roll_allow_note = 1)
				$roll_note_id := play_note ($roll_played_note_2,$roll_played_velo,0,$roll_played_duration - $roll_played_duration/3)
				set_event_par($roll_note_id,$EVENT_PAR_0,0) {no wait time}
				set_event_par($roll_note_id,$EVENT_PAR_1,$roll_played_stroke) {played stroke}
				set_event_par($roll_note_id,$EVENT_PAR_2,3) {1 if sequencer note, 2 if played notes, 3 if roll}
				set_event_par($roll_note_id,$EVENT_PAR_3,$roll_duration_sixteenth/2) {duration}
				change_tune($roll_note_id,$roll_played_tuning * 1000,0)
			end if
			
			if ($NOTE_HELD = 1)
				wait($roll_played_duration/64)
			else
				exit
			end if
			
			if ($NOTE_HELD = 1)
				wait($roll_played_duration/64)
			else
				exit
			end if
			
			if ($NOTE_HELD = 1)
				wait($roll_played_duration/64)
			else
				exit
			end if
			
			if ($NOTE_HELD = 1)
				wait($roll_played_duration/64)
			else
				exit
			end if
			
			if ($NOTE_HELD = 1)
				wait($roll_played_duration/64)
			else
				exit
			end if
			
			if ($NOTE_HELD = 1)
				wait($roll_played_duration/64)
			else
				exit
			end if
			
			if ($NOTE_HELD = 1)
				wait($roll_played_duration/64)
			else
				exit
			end if
			
			if ($NOTE_HELD = 1)
				wait($roll_played_duration/64)
			else
				exit
			end if
			
			if ($NOTE_HELD = 1)
				wait($roll_played_duration/64)
			else
				exit
			end if
			
			if ($NOTE_HELD = 1)
				wait($roll_played_duration/64)
			else
				exit
			end if
			
			if ($NOTE_HELD = 1)
				wait($roll_played_duration/64)
			else
				exit
			end if
			
			if ($NOTE_HELD = 1)
				wait($roll_played_duration/64)
			else
				exit
			end if
			
			if ($NOTE_HELD = 1)
				wait($roll_played_duration/64)
			else
				exit
			end if
			
			if ($NOTE_HELD = 1)
				wait($roll_played_duration/64)
			else
				exit
			end if
			
			if ($NOTE_HELD = 1)
				wait($roll_played_duration/64)
			else
				exit
			end if
			
			if ($NOTE_HELD = 1)
				wait($roll_played_duration/64)
			else
				exit
			end if
			
			if ($NOTE_HELD = 1)
				wait($roll_played_duration/64)
			else
				exit
			end if
			
			if ($NOTE_HELD = 1)
				wait($roll_played_duration/64)
			else
				exit
			end if
			
			if ($NOTE_HELD = 1)
				wait($roll_played_duration/64)
			else
				exit
			end if
			
			if ($NOTE_HELD = 1)
				wait($roll_played_duration/64)
			else
				exit
			end if
			
			if ($NOTE_HELD = 1)
				wait($roll_played_duration/64)
			else
				exit
			end if
			
			if ($NOTE_HELD = 1)
				wait($roll_played_duration/64)
			else
				exit
			end if
			
			if ($NOTE_HELD = 1)
				wait($roll_played_duration/64)
			else
				exit
			end if
			
			if ($NOTE_HELD = 1)
				wait($roll_played_duration/64)
			else
				exit
			end if
			
			if ($NOTE_HELD = 1)
				wait($roll_played_duration/64)
			else
				exit
			end if
			
			if ($NOTE_HELD = 1)
				wait($roll_played_duration/64)
			else
				exit
			end if
			
			if ($NOTE_HELD = 1)
				wait($roll_played_duration/64)
			else
				exit
			end if
			
			if ($NOTE_HELD = 1)
				wait($roll_played_duration/64)
			else
				exit
			end if
			
			if ($NOTE_HELD = 1)
				wait($roll_played_duration/64)
			else
				exit
			end if
			
			if ($NOTE_HELD = 1)
				wait($roll_played_duration/64)
			else
				exit
			end if
			
			if ($NOTE_HELD = 1)
				wait($roll_played_duration/64)
			else
				exit
			end if
			
			if ($NOTE_HELD = 1)
				wait($roll_played_duration/64)
			else
				exit
			end if
			
			if ($NOTE_HELD = 1)
				wait($roll_played_duration/64)
			else
				exit
			end if
			
			if ($NOTE_HELD = 1)
				wait($roll_played_duration/64)
			else
				exit
			end if
			
			if ($NOTE_HELD = 1)
				wait($roll_played_duration/64)
			else
				exit
			end if
			
			if ($NOTE_HELD = 1)
				wait($roll_played_duration/64)
			else
				exit
			end if
			
			if ($NOTE_HELD = 1)
				wait($roll_played_duration/64)
			else
				exit
			end if
			
			if ($NOTE_HELD = 1)
				wait($roll_played_duration/64)
			else
				exit
			end if
			
			if ($NOTE_HELD = 1)
				wait($roll_played_duration/64)
			else
				exit
			end if
			
			if ($NOTE_HELD = 1)
				wait($roll_played_duration/64)
			else
				exit
			end if
			
			if ($NOTE_HELD = 1)
				wait($roll_played_duration/64)
			else
				exit
			end if
			
			if ($NOTE_HELD = 1)
				wait($roll_played_duration/64)
			else
				exit
			end if
			
			if ($NOTE_HELD = 1)
				wait($roll_played_duration/64)
			else
				exit
			end if
			
			if ($NOTE_HELD = 1)
				wait($roll_played_duration/64)
			else
				exit
			end if
			
			if ($NOTE_HELD = 1)
				wait($roll_played_duration/64)
			else
				exit
			end if
			
			if ($NOTE_HELD = 1)
				wait($roll_played_duration/64)
			else
				exit
			end if
			
			if ($NOTE_HELD = 1)
				wait($roll_played_duration/64)
			else
				exit
			end if
			
			if ($NOTE_HELD = 1)
				wait($roll_played_duration/64)
			else
				exit
			end if
			
			if ($NOTE_HELD = 1)
				wait($roll_played_duration/64)
			else
				exit
			end if
			
			if ($NOTE_HELD = 1)
				wait($roll_played_duration/64)
			else
				exit
			end if
			
			if ($NOTE_HELD = 1)
				wait($roll_played_duration/64)
			else
				exit
			end if
			
			if ($NOTE_HELD = 1)
				wait($roll_played_duration/64)
			else
				exit
			end if
			
			if ($NOTE_HELD = 1)
				wait($roll_played_duration/64)
			else
				exit
			end if
			
			if ($NOTE_HELD = 1)
				wait($roll_played_duration/64)
			else
				exit
			end if
			
			if ($NOTE_HELD = 1)
				wait($roll_played_duration/64)
			else
				exit
			end if
			
			if ($NOTE_HELD = 1)
				wait($roll_played_duration/64)
			else
				exit
			end if
			
			if ($NOTE_HELD = 1)
				wait($roll_played_duration/64)
			else
				exit
			end if
			
			if ($NOTE_HELD = 1)
				wait($roll_played_duration/64)
			else
				exit
			end if
			
			if ($NOTE_HELD = 1)
				wait($roll_played_duration/64)
			else
				exit
			end if
			
			if ($NOTE_HELD = 1)
				wait($roll_played_duration/64)
			else
				exit
			end if
			
			if ($NOTE_HELD = 1)
				wait($roll_played_duration/64)
			else
				exit
			end if
			
			if ($NOTE_HELD = 1)
				wait($roll_played_duration/64)
			else
				exit
			end if
			
			if ($NOTE_HELD = 1)
				wait($roll_played_duration/64)
			else
				exit
			end if
			
			if ($NOTE_HELD = 1)
				wait($roll_played_duration/64)
			else
				exit
			end if
			
			inc($roll_count)
			
		end while
		
		exit
		
	end if
	
	{TANPURA - black keys}
	if ($INSTRUMENT_ID = $TANPURA_ID  and search(%chikari_notes,$EVENT_NOTE) >= 0)
	
		select ($EVENT_NOTE)
			
			case 37 {damp}
			
		
				$played_note_id := play_note($EVENT_NOTE,$EVENT_VELOCITY,0,-1)
				set_event_par($played_note_id,$EVENT_PAR_2,4) {1 if sequencer note, 2 if melody note, 3 if key switch}
				exit

			case 39
				$tanpura_played_group := %play_buffer[0 * $NUM_NOTE_PAR + 2]
				$tanpura_played_note := %play_buffer[0 * $NUM_NOTE_PAR + 1]
			case 42
				$tanpura_played_group := %play_buffer[1 * $NUM_NOTE_PAR + 2]
				$tanpura_played_note := %play_buffer[1 * $NUM_NOTE_PAR + 1]
			case 44
				$tanpura_played_group := %play_buffer[2 * $NUM_NOTE_PAR + 2]
				$tanpura_played_note := %play_buffer[2 * $NUM_NOTE_PAR + 1]
			case 46
				$tanpura_played_group := %play_buffer[3 * $NUM_NOTE_PAR + 2]
				$tanpura_played_note := %play_buffer[3 * $NUM_NOTE_PAR + 1]
		end select
		
		
		{TRIGGER NOTE}
		$new_id := play_note($tanpura_played_note,$EVENT_VELOCITY,0,-1)
		set_event_par($new_id,$EVENT_PAR_1,$tanpura_played_group) {group}
		set_event_par($new_id,$EVENT_PAR_2,3)
		set_event_par($new_id,$EVENT_PAR_3,$DURATION_SIXTEENTH) {duration}
		
		
		exit
		
	end if
	
	
	{BANSURI - black keys}
	if ($INSTRUMENT_ID = $BANSURI_ID  and search(%chikari_notes,$EVENT_NOTE) >= 0)
		
		select ($EVENT_NOTE)
			case 37
				set_controller(21,127)
			case 39
				set_controller(22,127)
			case 42
				set_controller(23,127)
			case 44
				set_controller(24,127)
			case 46
				set_controller(25,127)
		end select
		
		exit

	end if
	
	{SANTUR - black keys}
	if ($INSTRUMENT_ID = $SANTUR_ID  and search(%chikari_notes,$EVENT_NOTE) >= 0)
		
		select ($EVENT_NOTE)
			
			case 37
				$played_note_id := play_note($EVENT_NOTE,$EVENT_VELOCITY,0,-1)
				set_event_par($played_note_id,$EVENT_PAR_2,3) {1 if sequencer note, 2 if melody note, 3 if key switch}
			case 39
				$played_note_id := play_note($EVENT_NOTE,$EVENT_VELOCITY,0,-1)
				set_event_par($played_note_id,$EVENT_PAR_2,3) {1 if sequencer note, 2 if melody note, 3 if key switch}
				
			case 42
				
				{root}
				$original_note := $root_note_sld + 48
				
				$new_note := $original_note
				$played_note := $new_note
				
				call get_tuning
				
				$played_note_id := play_note($played_note,$EVENT_VELOCITY,0,-1)
				set_event_par($played_note_id,$EVENT_PAR_2,4) {1 if sequencer note, 2 if melody note, 3 if drone}
				change_tune($played_note_id,$played_tuning * 1000,0)
				
			case 44
				
				{5th}
				$original_note := $root_note_sld + 55
				
				$new_note := $original_note
				$played_note := $new_note
				
				call get_tuning
				
				$played_note_id := play_note($played_note,$EVENT_VELOCITY,0,-1)
				set_event_par($played_note_id,$EVENT_PAR_2,4) {1 if sequencer note, 2 if melody note, 3 if drone, 4 if drone 2}
				change_tune($played_note_id,$played_tuning * 1000,0)
				
			case 46
				
				{8ve}
				$original_note := $root_note_sld + 60
				
				$new_note := $original_note
				$played_note := $new_note
				
				call get_tuning
				
				$played_note_id := play_note($played_note,$EVENT_VELOCITY,0,-1)
				set_event_par($played_note_id,$EVENT_PAR_2,4) {1 if sequencer note, 2 if melody note, 3 if drone}
				change_tune($played_note_id,$played_tuning * 1000,0)
				
		end select
				
		exit
		
	end if
	
	{SITAR - chikari strings}
	if ($INSTRUMENT_ID = $SITAR_ID and search(%chikari_notes,$EVENT_NOTE) >= 0)
		
		$played_note := %chikari_real_notes[search(%chikari_notes,$EVENT_NOTE) + $root_note_sld * 5] {only for tuning}
		call get_tuning
		
		$played_note_id := play_note($EVENT_NOTE,$EVENT_VELOCITY,0,-1)
		set_event_par($played_note_id,$EVENT_PAR_2,3) {1 if sequencer note, 2 if melody note, 3 if chikari, 4 if resonance}
		change_tune($played_note_id,$played_tuning * 1000,0)
		
		exit
			
	end if
	
	{SITAR - reso strings}
	if ($INSTRUMENT_ID = $SITAR_ID and in_range($EVENT_NOTE,84,96))
		
		$original_note := $EVENT_NOTE - 24
		$allow_note := 1
		
		if ($scale_sld > 0)
			call constrain_to_scale
		else
			$new_note := $original_note
		end if
		
		$played_note := $new_note
		
		call get_tuning
		
		if ($allow_note = 1)
			$played_note_id := play_note($played_note,$EVENT_VELOCITY,0,-1)
			set_event_par($played_note_id,$EVENT_PAR_2,4) {1 if sequencer note, 2 if melody note, 3 if chikari, 4 if resonance}
			change_tune($played_note_id,$played_tuning * 1000,0)
		end if
		
		exit
			
	end if
	
	
	{HARMONIUM - black keys}
	if ($INSTRUMENT_ID = $HARMONIUM_ID and search(%chikari_notes,$EVENT_NOTE) >= 0)
		
		select ($EVENT_NOTE)
			
			case 37
			
				{bellow pump}
				
				$played_note := random(36,41)
				
				$played_note_id := play_note($played_note,100,0,-1)
				set_event_par($played_note_id,$EVENT_PAR_2,5) {1 if sequencer note, 2 if melody note, 3 if drone, 4 if drone 2, 5 if bellow}
				
			case 39
			
				{bellow release}
				
				$played_note := random(48,56)
				
				$played_note_id := play_note($played_note,100,0,-1)
				set_event_par($played_note_id,$EVENT_PAR_2,5) {1 if sequencer note, 2 if melody note, 3 if drone, 4 if drone 2, 5 if bellow}
				
			case 42
				
				{tonic}
				if ($root_note_sld <= 6)
					$original_note := $root_note_sld + 48
				else
					$original_note := $root_note_sld + 36
				end if
				
				
				$new_note := $original_note
				$played_note := $new_note
				
				call get_tuning
				
				$played_note_id := play_note($played_note,$EVENT_VELOCITY,0,-1)
				set_event_par($played_note_id,$EVENT_PAR_2,3) {1 if sequencer note, 2 if melody note, 3 if drone}
				change_tune($played_note_id,$played_tuning * 1000,0)
				
			case 44
				
				{4th}
				$original_note := $root_note_sld + 65
				
				if ($original_note > 73)
					$original_note := $original_note - 12
				end if
				
				$new_note := $original_note
				$played_note := $new_note
				
				call get_tuning
				
				$played_note_id := play_note($played_note,$EVENT_VELOCITY,0,-1)
				set_event_par($played_note_id,$EVENT_PAR_2,4) {1 if sequencer note, 2 if melody note, 3 if drone, 4 if drone 2}
				change_tune($played_note_id,$played_tuning * 1000,0)
				
			case 46
				
				{5th}
				$original_note := $root_note_sld + 67
				
				if ($original_note > 73)
					$original_note := $original_note - 12
				end if
				
				$new_note := $original_note
				$played_note := $new_note
				
				call get_tuning
				
				$played_note_id := play_note($played_note,$EVENT_VELOCITY,0,-1)
				set_event_par($played_note_id,$EVENT_PAR_2,4) {1 if sequencer note, 2 if melody note, 3 if drone, 4 if drone 2}
				change_tune($played_note_id,$played_tuning * 1000,0)
			
		end select
		
		exit
			
	end if
	
	if (not(in_range($EVENT_NOTE,$PLAY_RANGE_MIN,$PLAY_RANGE_MAX)))
		exit
	end if
	
	{reset variables}
	$original_note := $EVENT_NOTE
	$allow_note := 1
	$allow_ornament := 1
	$played_swara := -1
	$played_ornament := 0
	$art_interval := 0
	
	{reset midi cc in sitar}
	if ($INSTRUMENT_ID = $SITAR_ID)
		set_controller($MIDI_CC_1,0)
		set_controller($MIDI_CC_2,0)
	end if
	
	{CONSTRAIN TO SCALE}
	if ($scale_sld > 0)
		call constrain_to_scale
	else
		{chromatic mode}
		$new_note := $original_note
	end if
	
	if (not(in_range($new_note,$MAPPED_RANGE_MIN,$MAPPED_RANGE_MAX)))
		$allow_ornament := 0
	end if
	
	if ($INSTRUMENT_ID = $TUMBI_ID and $roll_running = 1)
		$allow_ornament := 0
	end if
	
	{ORNAMENTS}
	if ($allow_ornament = 1)
		
		{get played swara and original pitch class, used for ornaments}
		if ($key_mode_menu = 0 or $key_mode_menu = 1) {guide or mapped}
			$played_swara := %mapping_swara[($original_note - $root_note_sld) mod 12]
			$original_pitch_class_tonal := (($new_note + (12-$root_note_sld)) mod 12)
		end if
		
		if ($key_mode_menu = 2) {easy}
			if (search(%white_keys,$original_note mod 12) # -1)
				$played_swara := search(%white_keys,$original_note mod 12)
				$original_pitch_class_tonal := (($new_note + (12-$root_note_sld)) mod 12)
			end if
		end if
		
		{get $played ornament and $art_interval}
		if ($main_ornament_menu = 1 or $played_key_switch >= 0)
			
			if ($played_key_switch = -1 and $scale_sld > 0)
				$played_ornament := %ornaments_data[$played_swara + $scale_sld*7]
			else
				select ($played_key_switch)
					case 0
						$played_ornament := 0
					case 1
						$played_ornament := 1
					case 2
						$played_ornament := 2
					case 3
						if ($INSTRUMENT_ID # $SITAR_ID)
							$played_ornament := 5
						else
							$played_ornament := 3
						end if
					case 4
						if ($INSTRUMENT_ID # $SITAR_ID)
							$played_ornament := 6
						else
							$played_ornament := 4
						end if
					case 5
						$played_ornament := 7
					case 6
						$played_ornament := 8
				end select
			end if
			
			if ($played_ornament > 0)
				call get_ornament_notes {returns $art_note}
				$art_interval := $art_note - $new_note
				
			end if
			
		end if
	
	end if	
	
	{TRIGGER ORNAMENT NOTE (all instruments except sitar)}
	if (($INSTRUMENT_ID # $SITAR_ID or $INSTRUMENT_ID = $SITAR_ID and in_range($played_ornament,7,8)) and $played_ornament > 0)

		{get tuning}
		$played_tuning := %scale_tuning_data[($art_note mod 12) + $scale_sld * 12]
		
		{get duration}
		$played_duration := ($perf_0_sld * ($ORNA_DURATION_MAX - $ORNA_DURATION_MIN) / 127) + $ORNA_DURATION_MIN
		$played_duration := $played_duration + random(-3,3)
		
		if ($INSTRUMENT_ID = $SITAR_ID and in_range($played_ornament,7,8))
			$played_duration := $played_duration*2
		end if
		
		if ($INSTRUMENT_ID # $SITAR_ID)
		
			$art_note_id := play_note($art_note,$EVENT_VELOCITY,0,$played_duration*2000)
			set_event_par($art_note_id,$EVENT_PAR_1,0)
			set_event_par($art_note_id,$EVENT_PAR_2,2) {1 if sequencer note, 2 if melody notes}
			change_tune($art_note_id,$played_tuning * 1000,0)
	
		
		else
			
			{SITAR - special ornaments}
			
			
			if (in_range($played_ornament,7,8))
			
				$art_note_id := play_note($new_note,$EVENT_VELOCITY,0,-1)
				set_event_par($art_note_id,$EVENT_PAR_1,4) {group}
				set_event_par($art_note_id,$EVENT_PAR_2,2) {2: melody notes}
				change_tune($art_note_id,$played_tuning * 1000,0)
				
				if ($played_ornament = 7)
					set_controller($MIDI_CC_2,127)
				end if
				
			end if
			
		
		end if
		
		wait($played_duration*1000)
		
		{second art note}
		if ($played_ornament >= 7)
			
			select ($played_ornament)
				
				case 7 {turn}
					$art_note := %art_notes_lower[1]
				
				case 8 {mordent}
					$art_note := %art_notes_upper[1]
					
			end select
			
			{get tuning}
			$played_tuning := %scale_tuning_data[($art_note mod 12) + $scale_sld * 12]
			
			if ($INSTRUMENT_ID # $SITAR_ID)
			
				$art_note_id := play_note($art_note,$EVENT_VELOCITY,0,$played_duration*2000)
				set_event_par($art_note_id,$EVENT_PAR_1,0) {group}
				set_event_par($art_note_id,$EVENT_PAR_2,2) {1 if sequencer note, 2 if melody notes}
				change_tune($art_note_id,$played_tuning * 1000,0)
				
				
			else
				
				select ($played_ornament)
					
					case 7
						
						set_controller($MIDI_CC_2,0)
						
					case 8 {mordent}
					
						set_controller($MIDI_CC_1,127)
					
				end select
			
			end if
			
			wait($played_duration*1000)
		
		end if
		
	end if
	
	if ($INSTRUMENT_ID = $SITAR_ID and in_range($played_ornament,7,8))
					
		set_controller($MIDI_CC_1,0)
		set_controller($MIDI_CC_2,0)
		exit
		
	end if
	
	{SITAR ORNAMENTATION}
	if ($INSTRUMENT_ID = $SITAR_ID)
		
		{key range of slides is limited, notes out of key range trigger normal note}
		select ($art_interval)
			
			case -1 {halftone up}
				if ($new_note < 51 or $new_note > 78)
					$art_interval := 0
					$played_ornament := 0
				end if
			
			case 1 {halftone down}
				if ($new_note < 50 or $new_note > 77)
					$art_interval := 0
					$played_ornament := 0
				end if
				
			case -2 {wholetone up}
				if ($new_note < 57 or $new_note > 79)
					$art_interval := 0
					$played_ornament := 0
				end if
			
			case 2 {wholetone down}
				if ($new_note < 55 or $new_note > 77)
					$art_interval := 0
					$played_ornament := 0
				end if
				
			case -3 {Minor 3rd up}
				if ($new_note < 60 or $new_note > 77)
					$art_interval := 0
					$played_ornament := 0
				end if
			
			case 3 {Minor 3rd down}
				if ($new_note < 57 or $new_note > 75)
					$art_interval := 0
					$played_ornament := 0
				end if
				
			case -4 {Major 3rd up}
				if ($new_note < 60 or $new_note > 78)
					$art_interval := 0
					$played_ornament := 0
				end if
			
			case 4 {Major 3rd down}
				if ($new_note < 57 or $new_note > 75)
					$art_interval := 0
					$played_ornament := 0
				end if
				
			case -5 {Forth up}
				if ($new_note < 62 or $new_note > 78)
					$art_interval := 0
					$played_ornament := 0
				end if
				
			case 5 {Forth down}
				if ($new_note < 58 or $new_note > 72)
					$art_interval := 0
					$played_ornament := 0
				end if
			
		end select
		
		{get group - trigger of slides and melody notes}
		select ($art_interval)
			case -6 to -5
				$played_group := 16
			case -4
				$played_group := 14
			case -3
				$played_group := 12
			case -2
				$played_group := 10
			case -1
				$played_group := 8
			case 0
				$played_group := 4
			case 1
				$played_group := 9
			case 2
				$played_group := 11
			case 3
				$played_group := 13
			case 4
				$played_group := 15
			case 5 to 6
				$played_group := 17
		end select
		
	end if
	
	
	{get group}
	if ($INSTRUMENT_ID # $SITAR_ID)
		$played_group := 0
	end if
	
	{get note}
	$played_note := $new_note
	
	{get velocity}
	if ($INSTRUMENT_ID = $SITAR_ID and $played_ornament > 0)
		$played_velo := $perf_0_sld
		if ($played_velo = 0)
			$played_velo := 1
		end if
	else
		$played_velo := $EVENT_VELOCITY
	end if
	
	{get tuning}
	call get_tuning
	
	{TRIGGER NOTE}
	if (in_range($played_note,$MAPPED_RANGE_MIN,$MAPPED_RANGE_MAX) and $allow_note = 1)
		
		if ($roll_running = 0)
			
			$played_note_id := play_note($played_note,$played_velo,0,-1)
			set_event_par($played_note_id,$EVENT_PAR_1,$played_group) {group}
			
			if ($INSTRUMENT_ID = $SITAR_ID and $played_ornament > 0)
				
				{sitar slides}
				
				set_event_par($played_note_id,$EVENT_PAR_2,5) {5 : slide}
				set_event_par($played_note_id,$EVENT_PAR_3,$art_interval)
				change_vol($played_note_id,(($EVENT_VELOCITY - 1) * (0 - (-10000)) / (127 - 1)) + (-10000),0)
				
			else
				
				{sitar melody}
				set_event_par($played_note_id,$EVENT_PAR_2,2) {2: melody notes}
			end if
			
			change_tune($played_note_id,$played_tuning * 1000,0)
			
		else
			
			$roll_played_note := $played_note
			%roll_played_note_per_key[$EVENT_NOTE] := $played_note
			
		end if
	
	end if
	
	
end on

{function } {}

{ function release_callback }

on release
	
	if (get_event_par($EVENT_ID,$EVENT_PAR_SOURCE) = -1) {if from outside}
	
		{key switch notes}
		if (search(%key_switch_notes,$EVENT_NOTE) >= 0)

			%key_switch_down[$EVENT_NOTE] := 0
			
			{look for other held key switches}
			$played_key_switch := -1
			$count := 0
			while ($count < num_elements(%key_switch_notes))
				
				if (%key_switch_down[%key_switch_notes[$count]] = 1)
					$played_key_switch := $count
				end if
				
				inc($count)
				
			end while
			
		end if
		
		{Bansuri - black key key switches}
		if ($INSTRUMENT_ID = $BANSURI_ID  and search(%chikari_notes,$EVENT_NOTE) >= 0)
			select ($EVENT_NOTE)
			case 37
				set_controller(21,0)
			case 39
				set_controller(22,0)
			case 42
				set_controller(23,0)
			case 44
				set_controller(24,0)
			case 46
				set_controller(25,0)
		end select
		end if
		
		{TUMBI}
		if ($INSTRUMENT_ID = $TUMBI_ID)
			
			%key_down_tumbi[$EVENT_NOTE] := 0
			
			if (in_range($EVENT_NOTE,$MAPPED_RANGE_MIN,$MAPPED_RANGE_MAX))
					
					$roll_played_note := 72 + $root_note_sld
					if ($roll_played_note > 77)
						$roll_played_note := $roll_played_note - 12
					end if
					
					$count := $MAPPED_RANGE_MIN
					while ($count < $MAPPED_RANGE_MAX)
						if (%key_down_tumbi[$count] = 1)
							$roll_played_note := %roll_played_note_per_key[$count]
						end if
						inc($count)
					end while
				
			end if
			
		end if
		
	end if
	
	{black keys tumbi}
	if ($INSTRUMENT_ID = $TUMBI_ID and get_event_par($EVENT_ID,$EVENT_PAR_SOURCE) = 0 and search(%chikari_notes,$EVENT_NOTE) >= 0)
			
		
		$roll_running := 0
		
		{if (search(%chikari_notes,$EVENT_NOTE) >= 0)
		
			if (%key_down_tumbi[37] = 0 and %key_down_tumbi[39] = 0 and %key_down_tumbi[42] = 0 and %key_down_tumbi[44] = 0 and %key_down_tumbi[46] = 0)
				$roll_running := 0
			end if
			
		end if}
			
	end if
	

end on

{function } {}

{ function async_callback }

on async_complete
	
	{PRESET ARRAY}
	if ($NI_ASYNC_ID = $load_array_id)
		$load_array_id := -1
		
		if ($NI_ASYNC_EXIT_STATUS = 0)
			message("Array file not found!")
		else
			
			$count := 0
			while ($count < num_elements(%single_scale_preset))
				
				select ($count)
				
					case 0 to 6 {notes}
				
						%notes_data[$count + $scale_sld*7] := %single_scale_preset[$count]
						
					case 7 to 13 {ornament}
						
						%ornaments_data[($count-7) + $scale_sld*7] := %single_scale_preset[$count]
						
					case 14 to 20 {tuning}
					
						%tuning_data[($count-14) + $scale_sld*7] := %single_scale_preset[$count]
					
				end select
						
				inc($count)
			end while
			
			
			
			{scale name}
			set_control_par_str(get_ui_id(@pattern_tedit),$CONTROL_PAR_TEXT,@browser_filename)
			call update_menu
			call change_scale
			call change_key_color
		end if
		
	end if
	
	
end on

{function } {}

{ function main_page_callbacks }

on ui_control (@pattern_tedit)
	call update_menu
	call change_scale
end on

on ui_control ($perf_0_sld)
	set_controller(1,$perf_0_sld)
end on

on ui_control ($mix_preset_menu)
	pgs_set_key_val(ACTION_TYPE,0,2)
	pgs_set_key_val(MIX_PRESET,0,$mix_preset_menu)
end on

on ui_control ($mix_preset_prev_btn)
	
	
	pgs_set_key_val(ACTION_TYPE,0,2)
	if ($mix_preset_menu = 0)
		$mix_preset_menu := $NUM_OF_FACTORY_MIXPRESETS - 1
	else
		dec($mix_preset_menu)
	end if
	
	$mix_preset_prev_btn := 0
	
	pgs_set_key_val(MIX_PRESET,0,$mix_preset_menu)
	
end on

on ui_control ($mix_preset_next_btn)
	
	
	pgs_set_key_val(ACTION_TYPE,0,2)
	if ($mix_preset_menu = $NUM_OF_FACTORY_MIXPRESETS - 1)
		$mix_preset_menu := 0
	else
		inc($mix_preset_menu)
	end if
	
	$mix_preset_next_btn := 0
	
	pgs_set_key_val(MIX_PRESET,0,$mix_preset_menu)
	
end on


on ui_control ($about_btn)
	
	if ($about_btn = 1)
		call show_about_page
	else
		if ($edit_seq_btn = 1)
			call show_seq_page
		else
			if ($inst_0_btn = 1)
				call show_inst_page
			else
				call show_main_page
			end if
		end if
		$about_close_btn := 0
	end if
	
end on

on ui_control ($about_close_btn)
	
	if ($edit_seq_btn = 1)
		call show_seq_page
	else
		call show_main_page
	end if
	$about_close_btn := 0
	$about_btn := 0
end on



on ui_control ($help_btn)
	
	if ($help_btn = 1)
		call show_help_page
	else
		if ($edit_seq_btn = 1)
			call show_seq_page
		else
			if ($inst_0_btn = 1)
				call show_inst_page
			else
				call show_main_page
			end if
		end if
		$close_help_btn := 0
	end if
	
end on

on ui_control ($close_help_btn)
	
	if ($edit_seq_btn = 1)
		call show_seq_page
	else
		call show_main_page
	end if
	$close_help_btn := 0
	$help_btn := 0
end on

on ui_control ($edit_seq_btn)
	
	if ($edit_seq_btn = 1)
		call show_seq_page
	else
		call show_main_page
	end if

end on




on ui_control ($root_note_sld)
	
	$last_callback_id := $NI_CALLBACK_ID
	
	wait($KNOB_ADJUSTMENT_TOLERANCE)
	 
	if ({$NI_CALLBACK_ID = $last_callback_id and }$root_note_sld # $root_note_sld_last_value)
		
		call update_play_buffer {for drone}
		call change_scale
		call change_key_color
		
		if ($INSTRUMENT_ID = $SITAR_ID)
			call change_chikari_tuning
		end if
		
		$root_note_sld_last_value := $root_note_sld
		
		if ($edit_seq_btn = 1)
			call change_noteheads
		end if
		
	end if
	
	set_control_par_str(get_ui_id($root_note_sld), $CONTROL_PAR_LABEL, !note_names_chromatic[$root_note_sld])
	
end on

on ui_control ($root_up_btn)
	
	if ($root_note_sld = 11)
		$root_note_sld := 0
	else
		inc($root_note_sld)
	end if
	
	call update_play_buffer {for drone}
	call change_scale
	call change_key_color
	
	if ($edit_seq_btn = 1)
		call change_noteheads
	end if
	
	if ($INSTRUMENT_ID = $SITAR_ID)
		call change_chikari_tuning
	end if
	
	$root_note_sld_last_value := $root_note_sld
	
	set_control_par_str(get_ui_id($root_note_sld), $CONTROL_PAR_LABEL, !note_names_chromatic[$root_note_sld])
	
	$root_up_btn := 0
	
end on

on ui_control ($root_down_btn)
	
	if ($root_note_sld = 0)
		$root_note_sld := 11
	else
		dec($root_note_sld)
	end if
	
	call update_play_buffer {for drone}
	call change_scale
	call change_key_color
	
	if ($edit_seq_btn = 1)
		call change_noteheads
	end if
	
	if ($INSTRUMENT_ID = $SITAR_ID)
		call change_chikari_tuning
	end if
	
	$root_note_sld_last_value := $root_note_sld
	
	set_control_par_str(get_ui_id($root_note_sld), $CONTROL_PAR_LABEL, !note_names_chromatic[$root_note_sld])
	
	$root_down_btn := 0
	
end on

on ui_control ($scale_menu)
	
	$scale_sld := $scale_menu
	
	if ($scale_sld # $scale_sld_last_value)
	
		call change_scale
		call change_key_color
		
		if ($edit_seq_btn = 1)
			call show_seq_page
		end if
		
		$scale_sld_last_value := $scale_sld
		
	end if
	
end on

on ui_control ($scale_sld)
	
	$last_callback_id := $NI_CALLBACK_ID
	
	wait($KNOB_ADJUSTMENT_TOLERANCE)
	 
	if ({$NI_CALLBACK_ID = $last_callback_id and }$scale_sld # $scale_sld_last_value)
		
		$scale_menu := $scale_sld
		
		call change_scale
		call change_key_color
		
		if ($edit_seq_btn = 1)
			call show_seq_page
		end if
		
		$scale_sld_last_value := $scale_sld
		
	end if
	
end on


on ui_control ($ornament_menu_sld)
	
	if ($ornament_menu_sld = $ornament_menu_sld_last_value)
		
		exit
	
	else
		
		$main_ornament_menu := $ornament_menu_sld
		
		set_control_par_str(get_ui_id($ornament_menu_sld), $CONTROL_PAR_LABEL, !ornament_names[$ornament_menu_sld])
		
		$ornament_menu_sld_last_value := $ornament_menu_sld
		
	end if
	
end on

on ui_control ($main_ornament_menu)
	
	$ornament_menu_sld:= $main_ornament_menu
	$ornament_menu_sld_last_value := $main_ornament_menu
	
	set_control_par_str(get_ui_id($ornament_menu_sld), $CONTROL_PAR_LABEL,!ornament_names[$ornament_menu_sld])
	
end on

on ui_control ($key_mode_menu_sld)
	
	if ($key_mode_menu_sld = $key_mode_sld_last_value)
		
		exit
	
	else
		
		$key_mode_menu := $key_mode_menu_sld
		
		call change_key_color
		set_control_par_str(get_ui_id($key_mode_menu_sld), $CONTROL_PAR_LABEL, !mapping_names[$key_mode_menu_sld])
		
		$key_mode_sld_last_value := $key_mode_menu_sld
		
	end if
	
end on

on ui_control ($key_mode_menu)
	
	$key_mode_menu_sld := $key_mode_menu
	$key_mode_sld_last_value := $key_mode_menu
	
	call change_key_color
	set_control_par_str(get_ui_id($key_mode_menu_sld), $CONTROL_PAR_LABEL, !mapping_names[$key_mode_menu_sld])
	
end on

on ui_control ($sync_btn)
	call change_sync
	
	{if sequence is running and and tempo sync is changed}
	if ($seq_running = 1 and $NI_TRANSPORT_RUNNING = 1)
		
		if ($sync_btn = 1)
			$sync_position := 1
		else
			$sync_position := 0
		end if	
		
		{call clear_lauflicht}
	end if
	
	call change_tempo
	
	pgs_set_key_val(SYNC,0,$sync_btn)
	
end on

on ui_control ($half_time_btn)
	
	if ($half_time_btn = 1)
		$double_time_btn := 0
	end if
	
	call change_tempo
	
end on

on ui_control ($double_time_btn)
	
	if ($double_time_btn = 1)
		$half_time_btn := 0
	end if
	
	call change_tempo

end on

on ui_control ($play_btn)
	
	if ($play_btn # $last_play_btn)
		
		if ($play_btn = 1)
			call start_sequencer
		else
			call stop_sequencer
		end if
		
		$last_play_btn := $play_btn
	
	end if
	
end on



on ui_control ($tempo_drag_course)
	$tempo_vedit := ($tempo_drag_course*100) + $tempo_drag_fine
	
	if ($sync_btn = 0)
		call change_tempo
	end if
	
	
end on

on ui_control ($tempo_drag_fine)
	
	$tempo_vedit := ($tempo_drag_course*100) + $tempo_drag_fine
	
	if ($sync_btn = 0)
		call change_tempo
	end if
	
end on

on ui_control ($tempo_up_btn)
	
	if (get_control_par(get_ui_id($tempo_up_btn),$CONTROL_PAR_KEY_SHIFT) = 0)
		if ($tempo_drag_course # 400)
			$tempo_drag_course := $tempo_drag_course + 1
			$tempo_vedit := ($tempo_drag_course*100) + $tempo_drag_fine
			if ($sync_btn = 0)
				call change_tempo
			end if
			
		end if
	else
		if ($tempo_drag_fine = 99)
			$tempo_drag_fine := 0
			$tempo_drag_course := $tempo_drag_course + 1
			
		else
			$tempo_drag_fine := $tempo_drag_fine + 1
		end if
		$tempo_vedit := ($tempo_drag_course*100) + $tempo_drag_fine
		if ($sync_btn = 0)
			call change_tempo
		end if
		
	end if
end on

on ui_control ($tempo_down_btn)
	if (get_control_par(get_ui_id($tempo_down_btn),$CONTROL_PAR_KEY_SHIFT) = 0)
		
		if ($tempo_drag_course # 10)
			
			$tempo_drag_course := $tempo_drag_course - 1
			
			$tempo_vedit := ($tempo_drag_course*100) + $tempo_drag_fine
			
			if ($sync_btn = 0)
				call change_tempo
			end if
		end if
	else
		if ($tempo_drag_fine = 0)
			$tempo_drag_fine := 99
			$tempo_drag_course := $tempo_drag_course - 1
			
		else
			$tempo_drag_fine := $tempo_drag_fine - 1
		end if
		
		$tempo_vedit := ($tempo_drag_course*100) + $tempo_drag_fine
		if ($sync_btn = 0)
			call change_tempo
		end if
		
	end if
end on

{function } {}

{ function seq_page_callbacks }

on ui_control ($drone_menu)
	
	call update_play_buffer

end on

on ui_control ($tuning_menu)
	
	if ($scale_sld > 0)
	
		if ($tuning_menu # 2) {if equal or just, show labels instead of buttons}
			set_control_par(get_ui_id($note_tune_up_btn),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
			set_control_par(get_ui_id($note_tune_dn_btn),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
			set_control_par(get_ui_id($note_tune_up_lbl),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
			set_control_par(get_ui_id($note_tune_dn_lbl),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
			
			set_control_par(get_ui_id($note_tune_lbl),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
			set_control_par(get_ui_id($note_tune_sld),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
		else
			set_control_par(get_ui_id($note_tune_up_lbl),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
			set_control_par(get_ui_id($note_tune_dn_lbl),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
			set_control_par(get_ui_id($note_tune_up_btn),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
			set_control_par(get_ui_id($note_tune_dn_btn),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
			
			set_control_par(get_ui_id($note_tune_sld),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
			set_control_par(get_ui_id($note_tune_lbl),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
			
		end if
	
		call change_tab
	end if
	
end on

on ui_control ($file_browser)
	
	@browser_filepath := fs_get_filename(get_ui_id($file_browser),2)
	@browser_filename := fs_get_filename(get_ui_id($file_browser),0) {returns the name displayed in the browser, without extension}
	
	$load_array_id := load_array_str(%single_scale_preset,@browser_filepath)
	
end on

on ui_control ($export_scale_btn)
	
	$count := 0
	while ($count < num_elements(%single_scale_preset))
		
		select ($count)
				
			case 0 to 6 {notes}
		
				%single_scale_preset[$count] := %notes_data[$count + $scale_sld*7]
				
			case 7 to 13 {ornament}
				
				%single_scale_preset[$count] := %ornaments_data[($count-7) + $scale_sld*7]
				
			case 14 to 20 {tuning}
			
				%single_scale_preset[$count] := %tuning_data[($count-14) + $scale_sld*7]
			
		end select
		
		
		inc($count)
	end while
	
	save_array(%single_scale_preset,0)
	
	$export_scale_btn := 0
	
end on

on ui_control ($note_tune_up_btn)
	
	if ($note_tune_sld < 100)
		inc($note_tune_sld)
		%tuning_data[$selected_tab + $scale_sld*7] := $note_tune_sld
	end if
	
	$note_tune_up_btn := 0
	
	call change_tuning
	
end on

on ui_control ($note_tune_dn_btn)
	
	if ($note_tune_sld > -100)
		dec($note_tune_sld)
		%tuning_data[$selected_tab + $scale_sld*7] := $note_tune_sld
	end if
	
	$note_tune_dn_btn := 0
	
	call change_tuning
	
end on

on ui_control ($note_tune_sld)
	%tuning_data[$selected_tab + $scale_sld*7] := $note_tune_sld
	
	call change_tuning
	
end on

on ui_control ($note_ornament_menu)
	%ornaments_data[$selected_tab + $scale_sld*7] := $note_ornament_menu
end on

on ui_control ($note_1_menu) {II}
	%notes_data[1 + $scale_sld*7] := $note_1_menu
	
	call change_scale
	call change_key_color
end on
on ui_control ($note_2_menu) {III}
	%notes_data[2 + $scale_sld*7] := $note_2_menu
	call change_scale
	call change_key_color
end on
on ui_control ($note_3_menu) {IV}
	%notes_data[3 + $scale_sld*7] := $note_3_menu
	call change_scale
	call change_key_color
end on
on ui_control ($note_5_menu) {VI}
	%notes_data[5 + $scale_sld*7] := $note_5_menu
	call change_scale
	call change_key_color
end on
on ui_control ($note_6_menu) {VII}
	%notes_data[6 + $scale_sld*7] := $note_6_menu
	call change_scale
	call change_key_color
end on
	

on ui_control ($tab_0_btn)
	$selected_tab := 0
	call change_tab
end on

on ui_control ($tab_1_btn)
	$selected_tab := 1
	call change_tab
end on

on ui_control ($tab_2_btn)
	$selected_tab := 2
	call change_tab
end on

on ui_control ($tab_3_btn)
	$selected_tab := 3
	call change_tab
end on

on ui_control ($tab_4_btn)
	$selected_tab := 4
	call change_tab
end on

on ui_control ($tab_5_btn)
	$selected_tab := 5
	call change_tab
end on

on ui_control ($tab_6_btn)
	$selected_tab := 6
	call change_tab
end on

{function } {}

{ function inst_page_callbacks }

on ui_control ($inst_0_sld)
	
	select ($INSTRUMENT_ID)
		
		case $TANPURA_ID
			
			{ATTACK}
			$value := ($inst_0_sld * (720000 - 100000) / 100) + 100000
			set_engine_par($ENGINE_PAR_ATTACK,$value,0,find_mod(0,"ENV_AHDSR"),-1)
			
			$value := ($inst_0_sld * (720000 - 100000) / 100) + 100000
			set_engine_par($ENGINE_PAR_ATTACK,$value,1,find_mod(1,"ENV_AHDSR"),-1)
			
			$value := ($inst_0_sld * (720000 - 100000) / 100) + 100000
			set_engine_par($ENGINE_PAR_ATTACK,$value,2,find_mod(2,"ENV_AHDSR"),-1)
			
			$value := ($inst_0_sld * (780000 - 100000) / 100) + 100000
			set_engine_par($ENGINE_PAR_ATTACK,$value,3,find_mod(3,"ENV_AHDSR"),-1)
			
			set_control_par_str(get_ui_id($inst_0_sld),$CONTROL_PAR_LABEL,$inst_0_sld & " %")
			
		case $HARMONIUM_ID
			
			if ($inst_0_sld <= 50)
				$value := ($inst_0_sld * 500000 / 50)
			else
				$value := (($inst_0_sld - 50) * (630000 - 500000) / 50) + 500000
			end if
			
			{stop 1 volume}
			set_engine_par($ENGINE_PAR_VOLUME,$value,4,-1,-1)
			
			
			set_control_par_str(get_ui_id($inst_0_sld),$CONTROL_PAR_LABEL,...
			get_engine_par_disp($ENGINE_PAR_VOLUME,4,-1,-1) & " dB")
			
		
		case $SITAR_ID
			
			if ($inst_0_sld <= 50)
				$value := ($inst_0_sld * 500000 / 50)
			else
				$value := (($inst_0_sld - 50) * (630000 - 500000) / 50) + 500000
			end if
			
			{release noise}
			set_engine_par($ENGINE_PAR_VOLUME,$value,19,-1,-1)
			
			
			set_control_par_str(get_ui_id($inst_0_sld),$CONTROL_PAR_LABEL,...
			get_engine_par_disp($ENGINE_PAR_VOLUME,19,-1,-1) & " dB")
			
		case $TUMBI_ID
			
			if ($inst_0_sld <= 50)
				$value := ($inst_0_sld * 500000 / 50)
			else
				$value := (($inst_0_sld - 50) * (630000 - 500000) / 50) + 500000
			end if
			
			{noise}
			set_engine_par($ENGINE_PAR_VOLUME,$value,10,-1,-1)
			set_engine_par($ENGINE_PAR_VOLUME,$value,11,-1,-1)
			set_engine_par($ENGINE_PAR_VOLUME,$value,12,-1,-1)
			set_engine_par($ENGINE_PAR_VOLUME,$value,13,-1,-1)
			set_engine_par($ENGINE_PAR_VOLUME,$value,14,-1,-1)
			set_engine_par($ENGINE_PAR_VOLUME,$value,15,-1,-1)
			
			set_engine_par($ENGINE_PAR_VOLUME,$value,16,-1,-1)
			set_engine_par($ENGINE_PAR_VOLUME,$value,17,-1,-1)
			set_engine_par($ENGINE_PAR_VOLUME,$value,18,-1,-1)
			
			set_control_par_str(get_ui_id($inst_0_sld),$CONTROL_PAR_LABEL,...
			get_engine_par_disp($ENGINE_PAR_VOLUME,10,-1,-1) & " dB")
			
	end select

end on

on ui_control ($inst_1_sld)
	
	select ($INSTRUMENT_ID)
		
		case $TANPURA_ID
			
			{DELAY}
			
			{volume}
			if ($inst_1_sld <= 50)
				$value := (($inst_1_sld - 0)  * (312000 - 0) / (50 - 0)) + 0
			else
				$value := (($inst_1_sld - 50) * (397000 - 312000) / (100 - 50)) + 312000
			end if
			
			set_engine_par($ENGINE_PAR_SEND_EFFECT_OUTPUT_GAIN,$value,-1,0,$NI_BUS_OFFSET + 1)
			
			{feedback}
			$value := ($inst_1_sld * (800000 - 500000) / 100) + 500000
			set_engine_par($ENGINE_PAR_DL_FEEDBACK,$value,-1,0,$NI_BUS_OFFSET + 1)
			
			{pan}
			$value := ($inst_1_sld * (1000000 - 700000) / 100) + 700000
			set_engine_par($ENGINE_PAR_DL_PAN,$value,-1,0,$NI_BUS_OFFSET + 1)
			
			{STEREO}
			$value := ($inst_1_sld * (1000000 - 500000) / 100) + 500000
			set_engine_par($ENGINE_PAR_STEREO,$value,-1,4,$NI_BUS_OFFSET + 1)
			
			set_control_par_str(get_ui_id($inst_1_sld),$CONTROL_PAR_LABEL,$inst_1_sld & " %")
			
		case $HARMONIUM_ID
			
			if ($inst_1_sld <= 50)
				$value := ($inst_1_sld * 500000 / 50)
			else
				$value := (($inst_1_sld - 50) * (630000 - 500000) / 50) + 500000
			end if
			
			{stop 2 volume}
			set_engine_par($ENGINE_PAR_VOLUME,$value,5,-1,-1)
			
			set_control_par_str(get_ui_id($inst_1_sld),$CONTROL_PAR_LABEL,...
			get_engine_par_disp($ENGINE_PAR_VOLUME,5,-1,-1) & " dB")
		
		case $SITAR_ID
			
			if ($inst_1_sld <= 50)
				$value := ($inst_1_sld * 500000 / 50)
			else
				$value := (($inst_1_sld - 50) * (630000 - 500000) / 50) + 500000 {CAUTION}
			end if
			
			{melody resonance}
			set_engine_par($ENGINE_PAR_VOLUME,$value,18,-1,-1)
			{chikari resonance}
			set_engine_par($ENGINE_PAR_VOLUME,$value,25,-1,-1)
			set_engine_par($ENGINE_PAR_VOLUME,$value,26,-1,-1)
			set_engine_par($ENGINE_PAR_VOLUME,$value,27,-1,-1)
			set_engine_par($ENGINE_PAR_VOLUME,$value,28,-1,-1)
			set_engine_par($ENGINE_PAR_VOLUME,$value,29,-1,-1)
			set_engine_par($ENGINE_PAR_VOLUME,$value,30,-1,-1)
			set_engine_par($ENGINE_PAR_VOLUME,$value,31,-1,-1)
			set_engine_par($ENGINE_PAR_VOLUME,$value,32,-1,-1)
			set_engine_par($ENGINE_PAR_VOLUME,$value,33,-1,-1)
			set_engine_par($ENGINE_PAR_VOLUME,$value,34,-1,-1)
			
			set_control_par_str(get_ui_id($inst_1_sld),$CONTROL_PAR_LABEL,...
			get_engine_par_disp($ENGINE_PAR_VOLUME,18,-1,-1) & " dB")
			
		case $TUMBI_ID
			
			set_control_par_str(get_ui_id($inst_1_sld),$CONTROL_PAR_LABEL,$inst_1_sld & " %")
			
	end select
	
end on

on ui_control ($inst_2_sld)
	
	select ($INSTRUMENT_ID)
		
		case $HARMONIUM_ID
			
			if ($inst_2_sld <= 50)
				$value := (($inst_2_sld - 0) * (500000 - 0) / (50 - 0)) + 0
			else
				$value := (($inst_2_sld - 51) * (630000 - 500000) / (100 - 51)) + 500000
			end if
			
			set_engine_par($ENGINE_PAR_VOLUME,$value,8,-1,-1) {key down}
			set_engine_par($ENGINE_PAR_VOLUME,$value,9,-1,-1) {key up}
			
			set_control_par_str(get_ui_id($inst_2_sld),$CONTROL_PAR_LABEL,...
			get_engine_par_disp($ENGINE_PAR_VOLUME,8,-1,-1) & " dB")
		
	end select

end on

on ui_control ($inst_3_menu)
	set_controller($COUPLER_CC,$inst_3_menu*127)
	
	$inst_3_menu_sld := $inst_3_menu
	set_control_par_str(get_ui_id($inst_3_menu_sld),$CONTROL_PAR_LABEL,get_menu_item_str(get_ui_id($inst_3_menu),$inst_3_menu_sld))
		
	
end on

on ui_control ($inst_3_menu_sld)
	
	if ($INSTRUMENT_ID = $HARMONIUM_ID)
		
		$inst_3_menu := $inst_3_menu_sld
		set_control_par_str(get_ui_id($inst_3_menu_sld),$CONTROL_PAR_LABEL,get_menu_item_str(get_ui_id($inst_3_menu),$inst_3_menu_sld))
	
	end if

end on

on ui_control ($inst_0_btn)
	call show_inst_page
end on

on ui_control ($close_inst_btn)
	
	call show_main_page
	$close_inst_btn := 0
	$inst_0_btn := 0
	
end on




{function } {}

{ function on_listener }

on listener
	
	{START}
	if ($NI_SIGNAL_TYPE = $NI_SIGNAL_TRANSP_START and $trigger_host_btn = 1)
		call start_sequencer
	end if
	
	{STOP}
	if ($NI_SIGNAL_TYPE = $NI_SIGNAL_TRANSP_STOP and $trigger_host_btn = 1)
		call stop_sequencer
	end if
	
	{Own Tempo}
	if ($NI_SIGNAL_TYPE = $NI_SIGNAL_TIMER_MS and $sync_btn = 0 and ($seq_running = 1 or $phrase_running = 1))
		call tick_received
		
		{if ($INSTRUMENT_ID = $TANPURA_ID)
			call fem_tick_received
		end if}
		
	end if
	
	{Host Tempo}
	if ($NI_SIGNAL_TYPE = $NI_SIGNAL_TIMER_BEAT and $sync_btn = 1 and ($seq_running = 1 or $phrase_running = 1))
		call tick_received
		
		{if ($INSTRUMENT_ID = $TANPURA_ID)
			call fem_tick_received
		end if}
		
	end if
	
	{display host tempo}
	if ($NI_SIGNAL_TYPE = $NI_SIGNAL_TIMER_BEAT and $sync_btn = 1)
		
		%tempo_check[1] := $DURATION_QUARTER
		
		if (%tempo_check[0] # %tempo_check[1])
			
			$tempo_gui_helper1 := ms_to_ticks(62502)
			$tempo_gui_helper2 := ms_to_ticks(6250200) mod 100
			
			if (in_range($tempo_gui_helper1,157,400))
				dec($tempo_gui_helper2)
			end if
			
			if ($tempo_gui_helper2 >= 50)
				dec($tempo_gui_helper1)
			end if
			
			set_control_par(get_ui_id($tempo_label_course),$CONTROL_PAR_PICTURE_STATE,$tempo_gui_helper1-10)
			set_control_par(get_ui_id($tempo_label_fine),$CONTROL_PAR_PICTURE_STATE,$tempo_gui_helper2)
			
		end if
		
		%tempo_check[0] := %tempo_check[1]
	end if
	
end on

{function } {}

{ function pgs_callback }

on pgs_changed
	
	wait(1)
	
	if (pgs_key_exists(INSTRUMENT_ID))
		$INSTRUMENT_ID := pgs_get_key_val(INSTRUMENT_ID,0)
	end if
	
	if (pgs_key_exists(PERF_SLIDER_0))
		$perf_0_sld := pgs_get_key_val(PERF_SLIDER_0,0)
	end if
	
	if (pgs_key_exists(MIX_PRESET))
		$mix_preset_menu := pgs_get_key_val(MIX_PRESET,0)
	end if
	
end on

{function } {}

{ function controller_callback }
on controller

	if ($CC_NUM = 1)
		$perf_0_sld := %CC[$CC_NUM]
	end if
	
	if ($INSTRUMENT_ID = $SITAR_ID and $CC_NUM = $MIDI_CC_1)
		ignore_controller
	end if
	if ($INSTRUMENT_ID = $SITAR_ID and $CC_NUM = $MIDI_CC_2)
		ignore_controller
	end if
	
	if ($INSTRUMENT_ID = $BANSURI_ID and $CC_NUM = 21)
		ignore_controller
	end if
	if ($INSTRUMENT_ID = $BANSURI_ID and $CC_NUM = 22)
		ignore_controller
	end if
	if ($INSTRUMENT_ID = $BANSURI_ID and $CC_NUM = 23)
		ignore_controller
	end if
	if ($INSTRUMENT_ID = $BANSURI_ID and $CC_NUM = 24)
		ignore_controller
	end if
	if ($INSTRUMENT_ID = $BANSURI_ID and $CC_NUM = 25)
		ignore_controller
	end if
	
	if ($INSTRUMENT_ID = $HARMONIUM_ID and $CC_NUM = $COUPLER_CC)
		ignore_controller
	end if
	
end on

{function } {}

{ function persistence_changed }

on persistence_changed
	
	{stop playback if triggered from midi note}
	if ($trigger_host_btn = 0 and $seq_running = 1 and $preset_key_counter > 0)
		$preset_key_counter := 0
		call stop_sequencer
	end if
	
	
	call change_sync
	call change_tempo
	call change_scale
	call change_key_color
	
	if ($INSTRUMENT_ID = $SITAR_ID)
		call change_chikari_tuning
	end if
	
	call update_menu
	
	if ($instr_loaded = 1)
		call show_main_page
	else
		
		if ($edit_seq_btn = 1)
			call show_seq_page
		else
			if ($selected_instrument # -1)
				call show_inst_page
			else
				if ($help_btn = 1)
					call show_help_page
				else
					call show_main_page
				end if
			end if
		end if
	end if
	
	

	$instr_loaded := 0
	
	{parameter readout}
	
	select ($INSTRUMENT_ID)
		
		
		
		case $HARMONIUM_ID
			
			
			set_control_par_str(get_ui_id($inst_0_sld),$CONTROL_PAR_LABEL,...
			get_engine_par_disp($ENGINE_PAR_VOLUME,4,-1,-1) & " dB")
			
			set_control_par_str(get_ui_id($inst_1_sld),$CONTROL_PAR_LABEL,...
			get_engine_par_disp($ENGINE_PAR_VOLUME,5,-1,-1) & " dB")
			
			set_control_par_str(get_ui_id($inst_2_sld),$CONTROL_PAR_LABEL,...
			get_engine_par_disp($ENGINE_PAR_VOLUME,8,-1,-1) & " dB")
			
			
			set_control_par_str(get_ui_id($inst_3_menu_sld),$CONTROL_PAR_LABEL,get_menu_item_str(get_ui_id($inst_3_menu),$inst_3_menu_sld))
			
			
		case $SITAR_ID
			set_control_par_str(get_ui_id($inst_0_sld),$CONTROL_PAR_LABEL,...
			get_engine_par_disp($ENGINE_PAR_VOLUME,19,-1,-1) & " dB")
			
			set_control_par_str(get_ui_id($inst_1_sld),$CONTROL_PAR_LABEL,...
			get_engine_par_disp($ENGINE_PAR_VOLUME,18,-1,-1) & " dB")
			
		case $TANPURA_ID
			
			set_control_par_str(get_ui_id($inst_0_sld),$CONTROL_PAR_LABEL,$inst_0_sld & " %")
			set_control_par_str(get_ui_id($inst_1_sld),$CONTROL_PAR_LABEL,$inst_1_sld & " %")
			
		case $TUMBI_ID
			
			set_control_par_str(get_ui_id($inst_0_sld),$CONTROL_PAR_LABEL,...
			get_engine_par_disp($ENGINE_PAR_VOLUME,10,-1,-1) & " dB")
			
			set_control_par_str(get_ui_id($inst_1_sld),$CONTROL_PAR_LABEL,$inst_1_sld & " %")
			
	end select
	
	
	
	
	set_control_par_str(get_ui_id($root_note_sld),     $CONTROL_PAR_LABEL, !note_names_chromatic[$root_note_sld])
	set_control_par_str(get_ui_id($key_mode_menu_sld), $CONTROL_PAR_LABEL, !mapping_names[$key_mode_menu_sld])
	set_control_par_str(get_ui_id($ornament_menu_sld), $CONTROL_PAR_LABEL, !ornament_names[$ornament_menu_sld])
	
	call update_play_buffer
	
{function } {}
	
end on


{END OF SCRIPT}
